{"items":[{"owner":{"reputation":26707,"user_id":799163,"user_type":"registered","accept_rate":70,"profile_image":"https://i.stack.imgur.com/QGcz9.jpg?s=128&g=1","display_name":"RemcoGerlich","link":"https://stackoverflow.com/users/799163/remcogerlich"},"is_accepted":false,"score":11,"last_activity_date":1437144443,"creation_date":1437144443,"answer_id":31478567,"question_id":38987,"content_license":"CC BY-SA 3.0","body":"<p>This can be done with a single dict comprehension:</p>\n\n<pre><code>&gt;&gt;&gt; x = {'a':1, 'b': 2}\n&gt;&gt;&gt; y = {'b':10, 'c': 11}\n&gt;&gt;&gt; { key: y[key] if key in y else x[key]\n      for key in set(x) + set(y)\n    }\n</code></pre>\n\n<p>In my view the best answer for the 'single expression' part as no extra functions are needed, and it is short.</p>\n"},{"owner":{"reputation":748,"user_id":4686674,"user_type":"registered","accept_rate":30,"profile_image":"https://i.stack.imgur.com/CLXZL.jpg?s=128&g=1","display_name":"Jitendra Damor","link":"https://stackoverflow.com/users/4686674/jitendra-damor"},"is_accepted":false,"score":1,"last_activity_date":1436935778,"creation_date":1436935778,"answer_id":31421735,"question_id":7975093,"content_license":"CC BY-SA 3.0","body":"<p>wrap all the script between this...</p>\n\n<pre><code>&lt;script&gt;\n    $.noConflict();\n    jQuery( document ).ready(function( $ ) {\n      // Code that uses jQuery's $ can follow here.\n    });\n&lt;/script&gt;\n</code></pre>\n\n<p>Many JavaScript libraries use $ as a function or variable name, just as jQuery does. In jQuery's case, $ is just an alias for jQuery, so all functionality is available without using $. If you need to use another JavaScript library alongside jQuery, return control of $ back to the other library with a call to <a href=\"http://api.jquery.com/jQuery.noConflict/\" rel=\"nofollow\">$.noConflict()</a>. Old references of $ are saved during jQuery initialization; noConflict() simply restores them.</p>\n"},{"owner":{"reputation":436,"user_id":3144561,"user_type":"registered","profile_image":"https://graph.facebook.com/566880418/picture?type=large","display_name":"koredalin","link":"https://stackoverflow.com/users/3144561/koredalin"},"is_accepted":false,"score":3,"last_activity_date":1436638381,"last_edit_date":1436638381,"creation_date":1436637807,"answer_id":31360202,"question_id":500431,"content_license":"CC BY-SA 3.0","body":"<p>There are only function scopes in JS. Not block scopes!\nYou can see what is hoisting too.</p>\n\n<pre><code>var global_variable = \"global_variable\";\nvar hoisting_variable = \"global_hoist\";\n\n// Global variables printed\nconsole.log(\"global_scope: - global_variable: \" + global_variable);\nconsole.log(\"global_scope: - hoisting_variable: \" + hoisting_variable);\n\nif (true) {\n    // The variable block will be global, on true condition.\n    var block = \"block\";\n}\nconsole.log(\"global_scope: - block: \" + block);\n\nfunction local_function() {\n    var local_variable = \"local_variable\";\n    console.log(\"local_scope: - local_variable: \" + local_variable);\n    console.log(\"local_scope: - global_variable: \" + global_variable);\n    console.log(\"local_scope: - block: \" + block);\n    // The hoisting_variable is undefined at the moment.\n    console.log(\"local_scope: - hoisting_variable: \" + hoisting_variable);\n\n    var hoisting_variable = \"local_hoist\";\n    // The hoisting_variable is now set as a local one.\n    console.log(\"local_scope: - hoisting_variable: \" + hoisting_variable);\n}\n\nlocal_function();\n\n// No variable in a separate function is visible into the global scope.\nconsole.log(\"global_scope: - local_variable: \" + local_variable);\n</code></pre>\n"},{"owner":{"reputation":108381,"user_id":1269037,"user_type":"registered","accept_rate":38,"profile_image":"https://i.stack.imgur.com/mMk1e.jpg?s=128&g=1","display_name":"Dan Dascalescu","link":"https://stackoverflow.com/users/1269037/dan-dascalescu"},"is_accepted":false,"score":46,"last_activity_date":1436323685,"last_edit_date":1436323685,"creation_date":1436323272,"answer_id":31282622,"question_id":950087,"content_license":"CC BY-SA 3.0","body":"<p>Here's the generalized version of how Facebook does it for their ubiquitous Like button:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script&gt;\r\n  var firstScript = document.getElementsByTagName('script')[0],\r\n      js = document.createElement('script');\r\n  js.src = 'https://cdnjs.cloudflare.com/ajax/libs/Snowstorm/20131208/snowstorm-min.js';\r\n  js.onload = function () {\r\n    // do stuff with your dynamically loaded script\r\n    snowStorm.snowColor = '#99ccff';\r\n  };\r\n  firstScript.parentNode.insertBefore(js, firstScript);\r\n&lt;/script&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>If it works for Facebook, it will work for you.</p>\n\n<p>The reason why we look for the first <code>script</code> element instead of <code>head</code> or <code>body</code> is because some browsers don't create one if missing, but we're guaranteed to have a <code>script</code> element - this one. Read more at <a href=\"http://www.jspatterns.com/the-ridiculous-case-of-adding-a-script-element/\">http://www.jspatterns.com/the-ridiculous-case-of-adding-a-script-element/</a>.</p>\n"},{"owner":{"reputation":983,"user_id":2474068,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/0359ccfbb2f690e5c97b525106b3bd96?s=128&d=identicon&r=PG","display_name":"leo","link":"https://stackoverflow.com/users/2474068/leo"},"is_accepted":false,"score":6,"last_activity_date":1435689400,"last_edit_date":1435689400,"creation_date":1432596392,"answer_id":30447254,"question_id":17289236,"content_license":"CC BY-SA 3.0","body":"<p>This seriously took me 4 HOURS (including endless searches on SO) but finally I found it: by mistake (unintentionally) I added a space somewhere.</p>\n\n<p>Can you spot it?</p>\n\n<p><code>angular.module('bwshopper.signup').controller('SignupCtrl ', SignupCtrl);</code></p>\n\n<p>So ... 4 hours later I saw that it should be:</p>\n\n<p><code>angular.module('bwshopper.signup').controller('SignupCtrl', SignupCtrl);</code></p>\n\n<p>Almost impossible to see with just the naked eye.</p>\n\n<p>This stresses the vital importance of revision control (git or whatever) and unit/regression testing.</p>\n"},{"owner":{"reputation":17207,"user_id":1031916,"user_type":"registered","accept_rate":83,"profile_image":"https://www.gravatar.com/avatar/014ce995ce41da0cad624dbd371e509c?s=128&d=identicon&r=PG","display_name":"heinob","link":"https://stackoverflow.com/users/1031916/heinob"},"is_accepted":false,"score":57,"last_activity_date":1434638650,"last_edit_date":1434638650,"creation_date":1386762863,"answer_id":20518446,"question_id":950087,"content_license":"CC BY-SA 3.0","body":"<p>Here is a <strong>synchronous</strong> version <strong>without jQuery</strong>:</p>\n\n<pre><code>function myRequire( url ) {\n    var ajax = new XMLHttpRequest();\n    ajax.open( 'GET', url, false ); // &lt;-- the 'false' makes it synchronous\n    ajax.onreadystatechange = function () {\n        var script = ajax.response || ajax.responseText;\n        if (ajax.readyState === 4) {\n            switch( ajax.status) {\n                case 200:\n                    eval.apply( window, [script] );\n                    console.log(\"script loaded: \", url);\n                    break;\n                default:\n                    console.log(\"ERROR: script not loaded: \", url);\n            }\n        }\n    };\n    ajax.send(null);\n}\n</code></pre>\n\n<p>Note that to get this working cross-domain, the server will need to set <code>allow-origin</code> header in its response.</p>\n"},{"owner":{"reputation":1454,"user_id":2199605,"user_type":"registered","accept_rate":70,"profile_image":"https://www.gravatar.com/avatar/88ab9279aa07f5aa1888426dc36ea106?s=128&d=identicon&r=PG","display_name":"Micka","link":"https://stackoverflow.com/users/2199605/micka"},"is_accepted":false,"score":29,"last_activity_date":1433024589,"last_edit_date":1433024589,"creation_date":1374052024,"answer_id":17695617,"question_id":9329446,"content_license":"CC BY-SA 3.0","body":"<p>An easy solution now would be to use the <a href=\"https://en.wikipedia.org/wiki/Underscore.js\">underscore.js library</a>. It's providing many useful tools, such as <code>each</code> and will automatically delegate the job to the native <code>forEach</code> if available.</p>\n\n<p><a href=\"http://codepen.io/Micka33/pen/nbyxf\">A CodePen example</a> of how it works is:</p>\n\n<pre><code>var arr = [\"elemA\", \"elemB\", \"elemC\"];\n_.each(arr, function(elem, index, ar)\n{\n...\n});\n</code></pre>\n\n<h3>See also</h3>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\">Documentation for native <code>Array.prototype.forEach()</code></a>.</li>\n<li>In <em><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for_each...in\">for_each...in</a></em> (MDN) it is explained that <code>for each (variable in object)</code> is deprecated as the part of ECMA-357 (<a href=\"https://developer.mozilla.org/en-US/docs/E4X\">EAX</a>) standard.</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of\">for...of</a> (MDN) describes the next way of iterating using <code>for (variable of object)</code> as the part of the Harmony (ECMAScript&nbsp;6) proposal.</li>\n</ul>\n"},{"owner":{"reputation":1542,"user_id":4165438,"user_type":"registered","profile_image":"https://i.stack.imgur.com/KbCzn.jpg?s=128&g=1","display_name":"Elo","link":"https://stackoverflow.com/users/4165438/elo"},"is_accepted":false,"score":1,"last_activity_date":1432219013,"creation_date":1432219013,"answer_id":30376916,"question_id":17289236,"content_license":"CC BY-SA 3.0","body":"<p>I had the same error with a big mistake:</p>\n\n<pre><code>appFormid.controller('TreeEditStepControlsCtrl', [$scope, function($scope){\n\n}]);\n</code></pre>\n\n<p>You see ? i forgot the '' around the first $scope, the right syntax is of course:</p>\n\n<pre><code>appFormid.controller('TreeEditStepControlsCtrl', ['$scope', function($scope){\n\n}]);\n</code></pre>\n\n<p>A first error i didn't see immediatly was: \"<em>$scope is not defined</em>\", followed by \"<em>Error: [ng:areq] Argument 'TreeEditStepControlsCtrl' is not a function, got undefined</em>\"</p>\n"},{"owner":{"reputation":741,"user_id":2454402,"user_type":"registered","accept_rate":100,"profile_image":"https://www.gravatar.com/avatar/dc495f546e02b01bb3dfa57018fd1c7e?s=128&d=identicon&r=PG&f=1","display_name":"sla55er","link":"https://stackoverflow.com/users/2454402/sla55er"},"is_accepted":false,"score":35,"last_activity_date":1431164261,"last_edit_date":1431164261,"creation_date":1401956924,"answer_id":24055237,"question_id":336859,"content_license":"CC BY-SA 3.0","body":"<p>The first example is a function declaration:</p>\n\n<pre><code>function abc(){}\n</code></pre>\n\n<p>The second example is a function expression:</p>\n\n<pre><code>var abc = function() {};\n</code></pre>\n\n<p>The main difference is how they are hoisted (lifted and declared). In the first example, the whole function declaration is hoisted. In the second example only the var 'abc' is hoisted, its value (the function) will be undefined, and the function itself remains at the position that it is declared.</p>\n\n<p>To put it simply:</p>\n\n<pre><code>//this will work\nabc(param);\nfunction abc(){}\n\n//this would fail\nabc(param);\nvar abc = function() {}\n</code></pre>\n\n<p>To study more about this topic I strongly recommend you this\n<a href=\"http://javascriptweblog.wordpress.com/2010/07/06/function-declarations-vs-function-expressions/#comment-43792\">link</a></p>\n"},{"owner":{"reputation":27307,"user_id":168738,"user_type":"registered","accept_rate":100,"profile_image":"https://i.stack.imgur.com/MMeLF.png?s=128&g=1","display_name":"Leon Gaban","link":"https://stackoverflow.com/users/168738/leon-gaban"},"is_accepted":false,"score":45,"last_activity_date":1430492815,"creation_date":1430492815,"answer_id":29989450,"question_id":336859,"content_license":"CC BY-SA 3.0","body":"<p>I'm adding my own answer just because everyone else has covered the hoisting part thoroughly.</p>\n\n<p>I've wondered about which way is better for a long while now, and thanks to <a href=\"http://jsperf.com\" rel=\"noreferrer\">http://jsperf.com</a> now I know :)</p>\n\n<p><img src=\"https://i.stack.imgur.com/bCrSm.png\" alt=\"enter image description here\"></p>\n\n<p><strong>Function declarations</strong> are faster, and that's what really matters in web dev right? ;)</p>\n"},{"owner":{"reputation":30748,"user_id":239916,"user_type":"registered","accept_rate":90,"profile_image":"https://www.gravatar.com/avatar/950ab2797f3012eeed28559fcdde8e1f?s=128&d=identicon&r=PG&f=1","display_name":"Thomas Eding","link":"https://stackoverflow.com/users/239916/thomas-eding"},"is_accepted":false,"score":1280,"last_activity_date":1427529721,"last_edit_date":1427529721,"creation_date":1280773611,"answer_id":3390635,"question_id":3390396,"content_license":"CC BY-SA 3.0","body":"<p>I personally use </p>\n\n<pre><code>myVar === undefined\n</code></pre>\n\n<p>Warning: Please note that <code>===</code> is used over <code>==</code> and that <code>myVar</code> has been previously <em>declared</em> (not <em>defined</em>).</p>\n\n<hr>\n\n<p>I do not like <code>typeof myVar === \"undefined\"</code>. I think it is long winded and unnecessary. (I can get the same done in less code.)</p>\n\n<p>Now some people will keel over in pain when they read this, screaming: \"Wait! WAAITTT!!! <code>undefined</code> can be redefined!\"</p>\n\n<p>Cool. I know this. Then again, most variables in Javascript can be redefined. Should you never use any built-in identifier that can be redefined?</p>\n\n<p>If you follow this rule, good for you: you aren't a hypocrite.</p>\n\n<p>The thing is, in order to do lots of real work in JS, developers need to rely on redefinable identifiers to be what they are. I don't hear people telling me that I shouldn't use <code>setTimeout</code> because someone can</p>\n\n<pre><code>window.setTimeout = function () {\n    alert(\"Got you now!\");\n};\n</code></pre>\n\n<p>Bottom line, the \"it can be redefined\" argument to not use a raw <code>=== undefined</code> is bogus. </p>\n\n<p>(If you are still scared of <code>undefined</code> being redefined, why are you blindly integrating untested library code into your code base? Or even simpler: a linting tool.)</p>\n\n<hr>\n\n<p>Also, like the <code>typeof</code> approach, this technique can \"detect\" undeclared variables: </p>\n\n<pre><code>if (window.someVar === undefined) {\n    doSomething();\n}\n</code></pre>\n\n<p>But both these techniques leak in their abstraction. I urge you not to use this or even </p>\n\n<pre><code>if (typeof myVar !== \"undefined\") {\n    doSomething();\n}\n</code></pre>\n\n<p>Consider:</p>\n\n<pre><code>var iAmUndefined;\n</code></pre>\n\n<p>To catch whether or not that variable is declared or not, you may need to resort to the <code>in</code> operator. (In many cases, you can simply read the code O_o).</p>\n\n<pre><code>if (\"myVar\" in window) {\n    doSomething();\n}\n</code></pre>\n\n<p>But wait! There's more! What if some prototype chain magic is happening…? Now even the superior <code>in</code> operator does not suffice. (Okay, I'm done here about this part except to say that for 99% of the time, <code>=== undefined</code> (and ****cough**** <code>typeof</code>) works just fine. If you really care, you can read about this subject on its own.)</p>\n"},{"owner":{"reputation":42137,"user_id":361151,"user_type":"registered","accept_rate":60,"profile_image":"https://i.stack.imgur.com/Z524i.jpg?s=128&g=1","display_name":"Chandermani","link":"https://stackoverflow.com/users/361151/chandermani"},"is_accepted":true,"score":108,"last_activity_date":1426664590,"last_edit_date":1426664590,"creation_date":1372136449,"answer_id":17289451,"question_id":17289236,"content_license":"CC BY-SA 3.0","body":"<p>Remove the <code>[]</code> from the name ([myApp]) of module</p>\n\n<pre><code>angular.module('myApp', [])\n</code></pre>\n\n<p>And add <code>ng-app=\"myApp\"</code> to the html and it should work.</p>\n"},{"owner":{"reputation":6940,"user_id":1394294,"user_type":"registered","accept_rate":100,"profile_image":"https://i.stack.imgur.com/ThnH5.jpg?s=128&g=1","display_name":"Hrishi","link":"https://stackoverflow.com/users/1394294/hrishi"},"is_accepted":false,"score":14,"last_activity_date":1425563890,"last_edit_date":1425563890,"creation_date":1387535080,"answer_id":20701430,"question_id":3390396,"content_license":"CC BY-SA 3.0","body":"<p>Personally, I always use the following:</p>\n\n<pre><code>var x;\nif( x === undefined) {\n    //Do something here\n}\nelse {\n   //Do something else here\n}\n</code></pre>\n\n<p>The window.undefined property is non-writable in all modern browsers (JavaScript 1.8.5 or later). From Mozilla's documentation: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\" rel=\"noreferrer\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined</a>, I see this: One reason to use typeof() is that it does not throw an error if the variable has not been defined.</p>\n\n<p>I prefer to have the approach of using</p>\n\n<pre><code>x === undefined \n</code></pre>\n\n<p>because it fails and blows up in my face rather than silently passing/failing if x has not been declared before. This alerts me that x is not declared. I believe all variables used in JavaScript should be declared.</p>\n"},{"owner":{"reputation":68892,"user_id":367138,"user_type":"registered","profile_image":"https://i.stack.imgur.com/L9Q9v.png?s=128&g=1","display_name":"Oleksandr T.","link":"https://stackoverflow.com/users/367138/oleksandr-t"},"is_accepted":false,"score":6,"last_activity_date":1425479991,"creation_date":1425479991,"answer_id":28857228,"question_id":28857189,"content_license":"CC BY-SA 3.0","body":"<p>You should use </p>\n\n<pre><code>expect(X).not.toBe(Y);\n</code></pre>\n\n<p>Read this <a href=\"http://jasmine.github.io/2.0/introduction.html\" rel=\"noreferrer\">Jasmine introduction</a></p>\n"},{"owner":{"reputation":26858,"user_id":973651,"user_type":"registered","accept_rate":90,"profile_image":"https://www.gravatar.com/avatar/dd66c6ce85ae84cb0e0c39654f5028ba?s=128&d=identicon&r=PG","display_name":"Mathew Berg","link":"https://stackoverflow.com/users/973651/mathew-berg"},"is_accepted":true,"score":35,"last_activity_date":1425479975,"creation_date":1425479975,"answer_id":28857217,"question_id":28857189,"content_license":"CC BY-SA 3.0","body":"<p>It should be:</p>\n\n<pre><code>expect(X).not.toBe(Y);\n</code></pre>\n"},{"owner":{"reputation":321,"user_id":1375848,"user_type":"registered","profile_image":"https://i.stack.imgur.com/hZKS4.jpg?s=128&g=1","display_name":"ccummings","link":"https://stackoverflow.com/users/1375848/ccummings"},"is_accepted":true,"score":2,"last_activity_date":1425281068,"creation_date":1425281068,"answer_id":28804559,"question_id":28804334,"content_license":"CC BY-SA 3.0","body":"<p>Couple of things:</p>\n\n<ul>\n<li>The static methods on can.Model are findAll and findOne, not findall and findone.</li>\n<li>The fixture URLs should have a space between the HTTP verb and the URL. So 'POST/todos' should be 'POST /todos'.</li>\n<li>The fixture for PUT is missing a matching }. It should be 'PUT /todos/{id}'</li>\n</ul>\n\n<p>Here's your example working on jsbin: <a href=\"http://jsbin.com/waqihidajo/1/edit\" rel=\"nofollow\">http://jsbin.com/waqihidajo/1/edit</a></p>\n"},{"owner":{"reputation":181719,"user_id":949476,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/8feb0675d5ebf4c11ed13885347cc970?s=128&d=identicon&r=PG","display_name":"dfsq","link":"https://stackoverflow.com/users/949476/dfsq"},"is_accepted":false,"score":1,"last_activity_date":1425280668,"creation_date":1425280668,"answer_id":28804475,"question_id":28804334,"content_license":"CC BY-SA 3.0","body":"<p>Methods are <code>findAll</code> and <code>findOne</code>. Try this:</p>\n\n<pre><code>var Todo = can.Model({\n    findAll : 'GET /todos',\n    findOne : 'GET /todos{id}',\n    create  : 'POST /todos',\n    update  : 'PUT /todos/{id}',\n    remove  : 'DELETE /todos/{id}'\n}, {});\n</code></pre>\n"},{"owner":{"reputation":25113,"user_id":900,"user_type":"registered","accept_rate":82,"profile_image":"https://www.gravatar.com/avatar/4725e478b3758cc62ea2142fc39b161d?s=128&d=identicon&r=PG","display_name":"Arcturus","link":"https://stackoverflow.com/users/900/arcturus"},"is_accepted":false,"score":1,"last_activity_date":1424082224,"creation_date":1424082224,"answer_id":28539217,"question_id":28539077,"content_license":"CC BY-SA 3.0","body":"<p>Not really an answer to your question, but you can also access the current element with the <code>this</code> parameter: </p>\n\n<pre><code>  function (i) {\n                var columnId = $(this).data('column');\n                ...\n</code></pre>\n\n<p>It seems that this makes it work in your jFiddle</p>\n"},{"owner":{"reputation":1042,"user_id":2985548,"user_type":"registered","accept_rate":92,"profile_image":"https://i.stack.imgur.com/dH6Z4.jpg?s=128&g=1","display_name":"Anduril","link":"https://stackoverflow.com/users/2985548/anduril"},"is_accepted":false,"score":6,"last_activity_date":1424082037,"creation_date":1424082037,"answer_id":28539153,"question_id":28539077,"content_license":"CC BY-SA 3.0","body":"<p>The problem you are having is in the jQuery .each() the element passed in the second arg in an element <em>not</em> a jQuery object. try this:</p>\n\n<pre><code>$.each($('#column-selector'), function (i, checkbox) {\n    var columnId = $(checkbox).data('column'); //Error occurs here\n    //More stuff\n});\n</code></pre>\n"},{"owner":{"reputation":10215,"user_id":4086177,"user_type":"registered","accept_rate":25,"profile_image":"https://www.gravatar.com/avatar/032eab83ad219f13bbc21714d55438f3?s=128&d=identicon&r=PG&f=1","display_name":"Beri","link":"https://stackoverflow.com/users/4086177/beri"},"is_accepted":false,"score":7,"last_activity_date":1424082000,"creation_date":1424082000,"answer_id":28539140,"question_id":28539077,"content_license":"CC BY-SA 3.0","body":"<p>You need to cast checkbox to a jQuery element:</p>\n\n<pre><code> $.each($('#column-selector'), function (i, checkbox) {\n    var columnId = $(checkbox).data('column'); //Error occurs here\n    //More stuff\n });\n</code></pre>\n"},{"owner":{"reputation":1044,"user_id":4303905,"user_type":"registered","accept_rate":92,"profile_image":"https://www.gravatar.com/avatar/6fcee96d81bdad2b6d0ff4a220c76256?s=128&d=identicon&r=PG&f=1","display_name":"Travis","link":"https://stackoverflow.com/users/4303905/travis"},"is_accepted":false,"score":13,"last_activity_date":1423969811,"creation_date":1423969811,"answer_id":28522648,"question_id":27509,"content_license":"CC BY-SA 3.0","body":"<p>Reading through this, I'm amazed I didn't see this. I have found multiple algorithms that would work for this.</p>\n\n<h1>Never Defined</h1>\n\n<p>If the value of an object was never defined, this will prevent from returning <code>true</code> if it is defined as <code>null</code> or <code>undefined</code>. This is helpful if you want true to be returned for values set as <code>undefined</code></p>\n\n<pre><code>if(obj.prop === void 0) console.log(\"The value has never been defined\");\n</code></pre>\n\n<h1>Defined as undefined Or never Defined</h1>\n\n<p>If you want it to result as <code>true</code> for values defined with the value of <code>undefined</code>, or never defined, you can simply use <code>=== undefined</code></p>\n\n<pre><code>if(obj.prop === undefined) console.log(\"The value is defined as undefined, or never defined\");\n</code></pre>\n\n<h1>Defined as a falsy value, undefined,null, or never defined.</h1>\n\n<p>Commonly, people have asked me for an algorithm to figure out if a value is either falsy, <code>undefined</code>, or <code>null</code>. The following works.</p>\n\n<pre><code>if(obj.prop == false || obj.prop === null || obj.prop === undefined) {\n    console.log(\"The value is falsy, null, or undefined\");\n}\n</code></pre>\n"},{"owner":{"reputation":5316,"user_id":901865,"user_type":"registered","profile_image":"https://i.stack.imgur.com/qriGh.png?s=128&g=1","display_name":"EeKay","link":"https://stackoverflow.com/users/901865/eekay"},"is_accepted":false,"score":3,"last_activity_date":1423126472,"creation_date":1423126472,"answer_id":28339727,"question_id":17289236,"content_license":"CC BY-SA 3.0","body":"<p>In my case (having an overview page and an \"add\" page) I got this with my routing setup like below. It was giving the message for the AddCtrl that could not be injected...</p>\n\n<pre><code>$routeProvider.\n  when('/', {\n    redirectTo: '/overview'\n  }).      \n  when('/overview', {\n    templateUrl: 'partials/overview.html',\n    controller: 'OverviewCtrl'\n  }).\n  when('/add', {\n    templateUrl: 'partials/add.html',\n    controller: 'AddCtrl'\n  }).\n  otherwise({\n    redirectTo: '/overview'\n  });\n</code></pre>\n\n<p>Because of the <code>when('/'</code> route all my routes went to the overview and the controller could not be matched on the /add route page rendering. This was confusing because I DID see the add.html template but its controller was nowhere to be found.</p>\n\n<p>Removing the '/'-route when case fixed this issue for me.</p>\n"},{"owner":{"reputation":7837,"user_id":1468130,"user_type":"registered","accept_rate":59,"profile_image":"https://i.stack.imgur.com/LO71w.jpg?s=128&g=1","display_name":"Jackson","link":"https://stackoverflow.com/users/1468130/jackson"},"is_accepted":false,"score":12,"last_activity_date":1421119498,"last_edit_date":1421119498,"creation_date":1413075537,"answer_id":26320800,"question_id":336859,"content_license":"CC BY-SA 3.0","body":"<p>In light of the \"named functions show up in stack traces\" argument, modern JavaScript engines are actually quite capable of representing anonymous functions.</p>\n\n<p>As of this writing, V8, SpiderMonkey, Chakra and Nitro always refer to named functions by their names. They almost always refer to an anonymous function by its identifier if it has one.</p>\n\n<p>SpiderMonkey can figure out the name of an anonymous function returned from another function. The rest can't.</p>\n\n<p>If you really, really wanted your iterator and success callbacks to show up in the trace, you could name those too...</p>\n\n<pre><code>[].forEach(function iterator() {});\n</code></pre>\n\n<p>But for the most part it's not worth stressing over.</p>\n\n<h2>Harness (<a href=\"http://jsfiddle.net/us9dg6y8/\">Fiddle</a>)</h2>\n\n<pre><code>'use strict';\n\nvar a = function () {\n    throw new Error();\n},\n    b = function b() {\n        throw new Error();\n    },\n    c = function d() {\n        throw new Error();\n    },\n    e = {\n        f: a,\n        g: b,\n        h: c,\n        i: function () {\n            throw new Error();\n        },\n        j: function j() {\n            throw new Error();\n        },\n        k: function l() {\n            throw new Error();\n        }\n    },\n    m = (function () {\n        return function () {\n            throw new Error();\n        };\n    }()),\n    n = (function () {\n        return function n() {\n            throw new Error();\n        };\n    }()),\n    o = (function () {\n        return function p() {\n            throw new Error();\n        };\n    }());\n\nconsole.log([a, b, c].concat(Object.keys(e).reduce(function (values, key) {\n    return values.concat(e[key]);\n}, [])).concat([m, n, o]).reduce(function (logs, func) {\n\n    try {\n        func();\n    } catch (error) {\n        return logs.concat('func.name: ' + func.name + '\\n' +\n                           'Trace:\\n' +\n                           error.stack);\n        // Need to manually log the error object in Nitro.\n    }\n\n}, []).join('\\n\\n'));\n</code></pre>\n\n<h2>V8</h2>\n\n<pre><code>func.name: \nTrace:\nError\n    at a (http://localhost:8000/test.js:4:11)\n    at http://localhost:8000/test.js:47:9\n    at Array.reduce (native)\n    at http://localhost:8000/test.js:44:27\n\nfunc.name: b\nTrace:\nError\n    at b (http://localhost:8000/test.js:7:15)\n    at http://localhost:8000/test.js:47:9\n    at Array.reduce (native)\n    at http://localhost:8000/test.js:44:27\n\nfunc.name: d\nTrace:\nError\n    at d (http://localhost:8000/test.js:10:15)\n    at http://localhost:8000/test.js:47:9\n    at Array.reduce (native)\n    at http://localhost:8000/test.js:44:27\n\nfunc.name: \nTrace:\nError\n    at a (http://localhost:8000/test.js:4:11)\n    at http://localhost:8000/test.js:47:9\n    at Array.reduce (native)\n    at http://localhost:8000/test.js:44:27\n\nfunc.name: b\nTrace:\nError\n    at b (http://localhost:8000/test.js:7:15)\n    at http://localhost:8000/test.js:47:9\n    at Array.reduce (native)\n    at http://localhost:8000/test.js:44:27\n\nfunc.name: d\nTrace:\nError\n    at d (http://localhost:8000/test.js:10:15)\n    at http://localhost:8000/test.js:47:9\n    at Array.reduce (native)\n    at http://localhost:8000/test.js:44:27\n\nfunc.name: \nTrace:\nError\n    at e.i (http://localhost:8000/test.js:17:19)\n    at http://localhost:8000/test.js:47:9\n    at Array.reduce (native)\n    at http://localhost:8000/test.js:44:27\n\nfunc.name: j\nTrace:\nError\n    at j (http://localhost:8000/test.js:20:19)\n    at http://localhost:8000/test.js:47:9\n    at Array.reduce (native)\n    at http://localhost:8000/test.js:44:27\n\nfunc.name: l\nTrace:\nError\n    at l (http://localhost:8000/test.js:23:19)\n    at http://localhost:8000/test.js:47:9\n    at Array.reduce (native)\n    at http://localhost:8000/test.js:44:27\n\nfunc.name: \nTrace:\nError\n    at http://localhost:8000/test.js:28:19\n    at http://localhost:8000/test.js:47:9\n    at Array.reduce (native)\n    at http://localhost:8000/test.js:44:27\n\nfunc.name: n\nTrace:\nError\n    at n (http://localhost:8000/test.js:33:19)\n    at http://localhost:8000/test.js:47:9\n    at Array.reduce (native)\n    at http://localhost:8000/test.js:44:27\n\nfunc.name: p\nTrace:\nError\n    at p (http://localhost:8000/test.js:38:19)\n    at http://localhost:8000/test.js:47:9\n    at Array.reduce (native)\n    at http://localhost:8000/test.js:44:27 test.js:42\n</code></pre>\n\n<h2>SpiderMonkey</h2>\n\n<pre><code>func.name: \nTrace:\na@http://localhost:8000/test.js:4:5\n@http://localhost:8000/test.js:47:9\n@http://localhost:8000/test.js:54:1\n\n\nfunc.name: b\nTrace:\nb@http://localhost:8000/test.js:7:9\n@http://localhost:8000/test.js:47:9\n@http://localhost:8000/test.js:54:1\n\n\nfunc.name: d\nTrace:\nd@http://localhost:8000/test.js:10:9\n@http://localhost:8000/test.js:47:9\n@http://localhost:8000/test.js:54:1\n\n\nfunc.name: \nTrace:\na@http://localhost:8000/test.js:4:5\n@http://localhost:8000/test.js:47:9\n@http://localhost:8000/test.js:54:1\n\n\nfunc.name: b\nTrace:\nb@http://localhost:8000/test.js:7:9\n@http://localhost:8000/test.js:47:9\n@http://localhost:8000/test.js:54:1\n\n\nfunc.name: d\nTrace:\nd@http://localhost:8000/test.js:10:9\n@http://localhost:8000/test.js:47:9\n@http://localhost:8000/test.js:54:1\n\n\nfunc.name: \nTrace:\ne.i@http://localhost:8000/test.js:17:13\n@http://localhost:8000/test.js:47:9\n@http://localhost:8000/test.js:54:1\n\n\nfunc.name: j\nTrace:\nj@http://localhost:8000/test.js:20:13\n@http://localhost:8000/test.js:47:9\n@http://localhost:8000/test.js:54:1\n\n\nfunc.name: l\nTrace:\nl@http://localhost:8000/test.js:23:13\n@http://localhost:8000/test.js:47:9\n@http://localhost:8000/test.js:54:1\n\n\nfunc.name: \nTrace:\nm&lt;/&lt;@http://localhost:8000/test.js:28:13\n@http://localhost:8000/test.js:47:9\n@http://localhost:8000/test.js:54:1\n\n\nfunc.name: n\nTrace:\nn@http://localhost:8000/test.js:33:13\n@http://localhost:8000/test.js:47:9\n@http://localhost:8000/test.js:54:1\n\n\nfunc.name: p\nTrace:\np@http://localhost:8000/test.js:38:13\n@http://localhost:8000/test.js:47:9\n@http://localhost:8000/test.js:54:1\n</code></pre>\n\n<h2>Chakra</h2>\n\n<pre><code>func.name: undefined\nTrace:\nError\n   at a (http://localhost:8000/test.js:4:5)\n   at Anonymous function (http://localhost:8000/test.js:47:9)\n   at Global code (http://localhost:8000/test.js:42:1)\n\n\nfunc.name: undefined\nTrace:\nError\n   at b (http://localhost:8000/test.js:7:9)\n   at Anonymous function (http://localhost:8000/test.js:47:9)\n   at Global code (http://localhost:8000/test.js:42:1)\n\n\nfunc.name: undefined\nTrace:\nError\n   at d (http://localhost:8000/test.js:10:9)\n   at Anonymous function (http://localhost:8000/test.js:47:9)\n   at Global code (http://localhost:8000/test.js:42:1)\n\n\nfunc.name: undefined\nTrace:\nError\n   at a (http://localhost:8000/test.js:4:5)\n   at Anonymous function (http://localhost:8000/test.js:47:9)\n   at Global code (http://localhost:8000/test.js:42:1)\n\n\nfunc.name: undefined\nTrace:\nError\n   at b (http://localhost:8000/test.js:7:9)\n   at Anonymous function (http://localhost:8000/test.js:47:9)\n   at Global code (http://localhost:8000/test.js:42:1)\n\n\nfunc.name: undefined\nTrace:\nError\n   at d (http://localhost:8000/test.js:10:9)\n   at Anonymous function (http://localhost:8000/test.js:47:9)\n   at Global code (http://localhost:8000/test.js:42:1)\n\n\nfunc.name: undefined\nTrace:\nError\n   at e.i (http://localhost:8000/test.js:17:13)\n   at Anonymous function (http://localhost:8000/test.js:47:9)\n   at Global code (http://localhost:8000/test.js:42:1)\n\n\nfunc.name: undefined\nTrace:\nError\n   at j (http://localhost:8000/test.js:20:13)\n   at Anonymous function (http://localhost:8000/test.js:47:9)\n   at Global code (http://localhost:8000/test.js:42:1)\n\n\nfunc.name: undefined\nTrace:\nError\n   at l (http://localhost:8000/test.js:23:13)\n   at Anonymous function (http://localhost:8000/test.js:47:9)\n   at Global code (http://localhost:8000/test.js:42:1)\n\n\nfunc.name: undefined\nTrace:\nError\n   at Anonymous function (http://localhost:8000/test.js:28:13)\n   at Anonymous function (http://localhost:8000/test.js:47:9)\n   at Global code (http://localhost:8000/test.js:42:1)\n\n\nfunc.name: undefined\nTrace:\nError\n   at n (http://localhost:8000/test.js:33:13)\n   at Anonymous function (http://localhost:8000/test.js:47:9)\n   at Global code (http://localhost:8000/test.js:42:1)\n\n\nfunc.name: undefined\nTrace:\nError\n   at p (http://localhost:8000/test.js:38:13)\n   at Anonymous function (http://localhost:8000/test.js:47:9)\n   at Global code (http://localhost:8000/test.js:42:1)\n</code></pre>\n\n<h2>Nitro</h2>\n\n<pre><code>func.name: \nTrace:\na@http://localhost:8000/test.js:4:22\nhttp://localhost:8000/test.js:47:13\nreduce@[native code]\nglobal code@http://localhost:8000/test.js:44:33\n\nfunc.name: b\nTrace:\nb@http://localhost:8000/test.js:7:26\nhttp://localhost:8000/test.js:47:13\nreduce@[native code]\nglobal code@http://localhost:8000/test.js:44:33\n\nfunc.name: d\nTrace:\nd@http://localhost:8000/test.js:10:26\nhttp://localhost:8000/test.js:47:13\nreduce@[native code]\nglobal code@http://localhost:8000/test.js:44:33\n\nfunc.name: \nTrace:\na@http://localhost:8000/test.js:4:22\nhttp://localhost:8000/test.js:47:13\nreduce@[native code]\nglobal code@http://localhost:8000/test.js:44:33\n\nfunc.name: b\nTrace:\nb@http://localhost:8000/test.js:7:26\nhttp://localhost:8000/test.js:47:13\nreduce@[native code]\nglobal code@http://localhost:8000/test.js:44:33\n\nfunc.name: d\nTrace:\nd@http://localhost:8000/test.js:10:26\nhttp://localhost:8000/test.js:47:13\nreduce@[native code]\nglobal code@http://localhost:8000/test.js:44:33\n\nfunc.name: \nTrace:\ni@http://localhost:8000/test.js:17:30\nhttp://localhost:8000/test.js:47:13\nreduce@[native code]\nglobal code@http://localhost:8000/test.js:44:33\n\nfunc.name: j\nTrace:\nj@http://localhost:8000/test.js:20:30\nhttp://localhost:8000/test.js:47:13\nreduce@[native code]\nglobal code@http://localhost:8000/test.js:44:33\n\nfunc.name: l\nTrace:\nl@http://localhost:8000/test.js:23:30\nhttp://localhost:8000/test.js:47:13\nreduce@[native code]\nglobal code@http://localhost:8000/test.js:44:33\n\nfunc.name: \nTrace:\nhttp://localhost:8000/test.js:28:30\nhttp://localhost:8000/test.js:47:13\nreduce@[native code]\nglobal code@http://localhost:8000/test.js:44:33\n\nfunc.name: n\nTrace:\nn@http://localhost:8000/test.js:33:30\nhttp://localhost:8000/test.js:47:13\nreduce@[native code]\nglobal code@http://localhost:8000/test.js:44:33\n\nfunc.name: p\nTrace:\np@http://localhost:8000/test.js:38:30\nhttp://localhost:8000/test.js:47:13\nreduce@[native code]\nglobal code@http://localhost:8000/test.js:44:33\n</code></pre>\n"},{"owner":{"reputation":4128,"user_id":13871,"user_type":"registered","accept_rate":100,"profile_image":"https://i.stack.imgur.com/X46zs.jpg?s=128&g=1","display_name":"zaphod","link":"https://stackoverflow.com/users/13871/zaphod"},"is_accepted":false,"score":172,"last_activity_date":1420857175,"last_edit_date":1420857175,"creation_date":1224729536,"answer_id":228366,"question_id":38987,"content_license":"CC BY-SA 3.0","body":"<p>In a follow-up answer, you asked about the relative performance of these two alternatives:</p>\n\n<pre><code>z1 = dict(x.items() + y.items())\nz2 = dict(x, **y)\n</code></pre>\n\n<p>On my machine, at least (a fairly ordinary x86_64 running Python 2.5.2), alternative <code>z2</code> is not only shorter and simpler but also significantly faster.  You can verify this for yourself using the <code>timeit</code> module that comes with Python.</p>\n\n<p>Example 1: identical dictionaries mapping 20 consecutive integers to themselves:</p>\n\n<pre><code>% python -m timeit -s 'x=y=dict((i,i) for i in range(20))' 'z1=dict(x.items() + y.items())'\n100000 loops, best of 3: 5.67 usec per loop\n% python -m timeit -s 'x=y=dict((i,i) for i in range(20))' 'z2=dict(x, **y)' \n100000 loops, best of 3: 1.53 usec per loop\n</code></pre>\n\n<p><code>z2</code> wins by a factor of 3.5 or so.  Different dictionaries seem to yield quite different results, but <code>z2</code> always seems to come out ahead.  (If you get inconsistent results for the <em>same</em> test, try passing in <code>-r</code> with a number larger than the default 3.)</p>\n\n<p>Example 2: non-overlapping dictionaries mapping 252 short strings to integers and vice versa:</p>\n\n<pre><code>% python -m timeit -s 'from htmlentitydefs import codepoint2name as x, name2codepoint as y' 'z1=dict(x.items() + y.items())'\n1000 loops, best of 3: 260 usec per loop\n% python -m timeit -s 'from htmlentitydefs import codepoint2name as x, name2codepoint as y' 'z2=dict(x, **y)'               \n10000 loops, best of 3: 26.9 usec per loop\n</code></pre>\n\n<p><code>z2</code> wins by about a factor of 10.  That's a pretty big win in my book!</p>\n\n<p>After comparing those two, I wondered if <code>z1</code>'s poor performance could be attributed to the overhead of constructing the two item lists, which in turn led me to wonder if this variation might work better:</p>\n\n<pre><code>from itertools import chain\nz3 = dict(chain(x.iteritems(), y.iteritems()))\n</code></pre>\n\n<p>A few quick tests, e.g.</p>\n\n<pre><code>% python -m timeit -s 'from itertools import chain; from htmlentitydefs import codepoint2name as x, name2codepoint as y' 'z3=dict(chain(x.iteritems(), y.iteritems()))'\n10000 loops, best of 3: 66 usec per loop\n</code></pre>\n\n<p>lead me to conclude that <code>z3</code> is somewhat faster than <code>z1</code>, but not nearly as fast as <code>z2</code>.  Definitely not worth all the extra typing.</p>\n\n<p>This discussion is still missing something important, which is a performance comparison of these alternatives with the \"obvious\" way of merging two lists: using the <code>update</code> method.  To try to keep things on an equal footing with the expressions, none of which modify x or y, I'm going to make a copy of x instead of modifying it in-place, as follows:</p>\n\n<pre><code>z0 = dict(x)\nz0.update(y)\n</code></pre>\n\n<p>A typical result:</p>\n\n<pre><code>% python -m timeit -s 'from htmlentitydefs import codepoint2name as x, name2codepoint as y' 'z0=dict(x); z0.update(y)'\n10000 loops, best of 3: 26.9 usec per loop\n</code></pre>\n\n<p>In other words, <code>z0</code> and <code>z2</code> seem to have essentially identical performance.  Do you think this might be a coincidence?  I don't....</p>\n\n<p>In fact, I'd go so far as to claim that it's impossible for pure Python code to do any better than this.  And if you can do significantly better in a C extension module, I imagine the Python folks might well be interested in incorporating your code (or a variation on your approach) into the Python core.  Python uses <code>dict</code> in lots of places; optimizing its operations is a big deal.</p>\n\n<p>You could also write this as</p>\n\n<pre><code>z0 = x.copy()\nz0.update(y)\n</code></pre>\n\n<p>as Tony does, but (not surprisingly) the difference in notation turns out not to have any measurable effect on performance.  Use whichever looks right to you.  Of course, he's absolutely correct to point out that the two-statement version is much easier to understand.</p>\n"},{"owner":{"reputation":107,"user_id":3169972,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/ee3c950c5397ef237467fe894e12abbe?s=128&d=identicon&r=PG","display_name":"bassounds","link":"https://stackoverflow.com/users/3169972/bassounds"},"is_accepted":false,"score":4,"last_activity_date":1420856518,"last_edit_date":1420856518,"creation_date":1412044579,"answer_id":26111877,"question_id":38987,"content_license":"CC BY-SA 3.0","body":"<p>A union of the OP's two dictionaries would be something like:</p>\n\n<pre><code>{'a': 1, 'b': 2, 10, 'c': 11}\n</code></pre>\n\n<p>Specifically, the union of two entities(<code>x</code> and <code>y</code>) contains all the elements of <code>x</code> and/or <code>y</code>.\nUnfortunately, what the OP asks for is not a union, despite the title of the post.</p>\n\n<p>My code below is neither elegant nor a one-liner, but I believe it is consistent with the meaning of union.</p>\n\n<p>From the OP's example:</p>\n\n<pre><code>x = {'a':1, 'b': 2}\ny = {'b':10, 'c': 11}\n\nz = {}\nfor k, v in x.items():\n    if not k in z:\n        z[k] = [(v)]\n    else:\n        z[k].append((v))\nfor k, v in y.items():\n    if not k in z:\n        z[k] = [(v)]\n    else:\n        z[k].append((v))\n\n{'a': [1], 'b': [2, 10], 'c': [11]}\n</code></pre>\n\n<p>Whether one wants lists could be changed, but the above will work if a dictionary contains lists (and nested lists) as values in either dictionary.</p>\n"},{"owner":{"reputation":158543,"user_id":246342,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/a8ba0aea3f521082f18dd7c186e7d4c3?s=128&d=identicon&r=PG","display_name":"Alex K.","link":"https://stackoverflow.com/users/246342/alex-k"},"is_accepted":false,"score":1,"last_activity_date":1419273248,"last_edit_date":1495541152,"creation_date":1419273248,"answer_id":27608457,"question_id":27608009,"content_license":"CC BY-SA 3.0","body":"<p>Given your comments you would be better off replacing <em>known</em> possible characters and validating the return result.</p>\n\n<pre><code>function CDec(Currency) {\n    if (typeof Currency !== \"number\")\n        Currency = parseFloat(Currency.toString().replace(/[£$%]/g, \"\"));\n\n    return Currency;\n}\n\nconsole.log( CDec(1.22) );\nconsole.log( CDec(-1.22) );\nconsole.log( CDec(\"$1.22\") );\nconsole.log( CDec(\"$1.22%\") );\nconsole.log( CDec(\"-£1.22\") );\n\nif (isNaN(CDec(\"Woof\"))\n   alert(\"invalid!\");\n</code></pre>\n\n<p>You should also probably scale your values: <a href=\"https://stackoverflow.com/questions/2876536/precise-financial-calculation-in-javascript-what-are-the-gotchas\">Precise Financial Calculation in JavaScript. What Are the Gotchas?</a></p>\n"},{"owner":{"reputation":2622,"user_id":2633697,"user_type":"registered","accept_rate":25,"profile_image":"https://i.stack.imgur.com/Tlp23.jpg?s=128&g=1","display_name":"hjl","link":"https://stackoverflow.com/users/2633697/hjl"},"is_accepted":true,"score":2,"last_activity_date":1419271933,"creation_date":1419271933,"answer_id":27608172,"question_id":27608009,"content_license":"CC BY-SA 3.0","body":"<pre><code>function CDec(Currency) {\n    Currency = Currency.toString();\n    var number = Currency.replace(/[^0-9\\.]+/g,\"\");\n    return number;\n}\n</code></pre>\n"},{"owner":{"reputation":2817,"user_id":1404942,"user_type":"registered","accept_rate":56,"profile_image":"https://www.gravatar.com/avatar/373a069f5f3e4b6f558e4ecc5ca1b302?s=128&d=identicon&r=PG","display_name":"Kiril","link":"https://stackoverflow.com/users/1404942/kiril"},"is_accepted":false,"score":2,"last_activity_date":1419271784,"creation_date":1419271784,"answer_id":27608141,"question_id":27608009,"content_license":"CC BY-SA 3.0","body":"<p>Simply convert numbers that are passed as parameter to string, e.g.:</p>\n\n<pre><code>function CDec(Currency) {\n    var number = (Currency + '').replace(/[^0-9\\.]+/g,\"\");\n    return number;\n}\n</code></pre>\n\n<p>But I would recommend you to validate input data first.</p>\n"},{"owner":{"reputation":96095,"user_id":288671,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/65f66029eed1093e5c7e3214b4774d8f?s=128&d=identicon&r=PG&f=1","display_name":"Vitalii Fedorenko","link":"https://stackoverflow.com/users/288671/vitalii-fedorenko"},"is_accepted":false,"score":6,"last_activity_date":1418596524,"creation_date":1418596524,"answer_id":27474938,"question_id":27509,"content_license":"CC BY-SA 3.0","body":"<p>If you are using Angular: </p>\n\n<pre><code>angular.isUndefined(obj)\nangular.isUndefined(obj.prop)\n</code></pre>\n\n<p>Underscore.js:</p>\n\n<pre><code>_.isUndefined(obj) \n_.isUndefined(obj.prop) \n</code></pre>\n"},{"owner":{"reputation":121,"user_id":4349610,"user_type":"registered","profile_image":"https://graph.facebook.com/795315679/picture?type=large","display_name":"Le_Dhul","link":"https://stackoverflow.com/users/4349610/le-dhul"},"is_accepted":false,"score":11,"last_activity_date":1418296505,"last_edit_date":1418296505,"creation_date":1418294886,"answer_id":27420988,"question_id":7975093,"content_license":"CC BY-SA 3.0","body":"<p>I had this problem only on Chrome. </p>\n\n<p>I tried adding</p>\n\n<pre><code>var $ =jQuery.noConflict();\n</code></pre>\n\n<p>just before calling</p>\n\n<pre><code>$(document).ready(function () {\n</code></pre>\n\n<p>It worked. </p>\n\n<p>Thanks a lot</p>\n"},{"owner":{"reputation":22338,"user_id":415865,"user_type":"registered","accept_rate":80,"profile_image":"https://www.gravatar.com/avatar/df9cd80fd5e2fc697e95b640fbecb918?s=128&d=identicon&r=PG","display_name":"Vikas","link":"https://stackoverflow.com/users/415865/vikas"},"is_accepted":false,"score":3,"last_activity_date":1416750070,"last_edit_date":1416750070,"creation_date":1365828552,"answer_id":15984362,"question_id":3390396,"content_license":"CC BY-SA 3.0","body":"<p>On the contrary of @Thomas Eding answer:</p>\n\n<p>If I forget to declare <code>myVar</code> in my code, then I'll get <code>myVar is not defined</code>.</p>\n\n<p>Let's take a real example:</p>\n\n<p>I've a variable name, but I am not sure if it is declared somewhere or not.</p>\n\n<p>Then @Anurag's answer will help:</p>\n\n<pre><code>var myVariableToCheck = 'myVar';\nif (window[myVariableToCheck] === undefined)\n    console.log(\"Not declared or declared, but undefined.\");\n\n// Or you can check it directly \nif (window['myVar'] === undefined) \n    console.log(\"Not declared or declared, but undefined.\");\n</code></pre>\n"},{"owner":{"reputation":3152,"user_id":788840,"user_type":"registered","accept_rate":78,"profile_image":"https://www.gravatar.com/avatar/cfb0145d17fa7e39473b0493cc1ce449?s=128&d=identicon&r=PG","display_name":"Marthijn","link":"https://stackoverflow.com/users/788840/marthijn"},"is_accepted":false,"score":16,"last_activity_date":1416749978,"last_edit_date":1416749978,"creation_date":1387449742,"answer_id":20679463,"question_id":3390396,"content_license":"CC BY-SA 3.0","body":"<p>In <a href=\"http://flippinawesome.org/2013/12/09/exploring-the-abyss-of-null-and-undefined-in-javascript/\" rel=\"noreferrer\">this article</a> I read that frameworks like <a href=\"https://en.wikipedia.org/wiki/Underscore.js\" rel=\"noreferrer\">Underscore.js</a> use this function:</p>\n\n<pre><code>function isUndefined(obj){\n    return obj === void 0;\n}\n</code></pre>\n"},{"owner":{"reputation":3151,"user_id":2123853,"user_type":"registered","accept_rate":0,"profile_image":"https://i.stack.imgur.com/sSAAV.jpg?s=128&g=1","display_name":"sourcecode","link":"https://stackoverflow.com/users/2123853/sourcecode"},"is_accepted":false,"score":4,"last_activity_date":1416749890,"last_edit_date":1416749890,"creation_date":1407481787,"answer_id":25197817,"question_id":3390396,"content_license":"CC BY-SA 3.0","body":"<pre><code>// x has not been defined before\nif (typeof x === 'undefined') { // Evaluates to true without errors.\n   // These statements execute.\n}\n\nif (x === undefined) { // Throws a ReferenceError\n\n}\n</code></pre>\n"},{"owner":{"reputation":743,"user_id":3297388,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/a52ef596dea8092ea2451e90a62d499c?s=128&d=identicon&r=PG&f=1","display_name":"Gaurav","link":"https://stackoverflow.com/users/3297388/gaurav"},"is_accepted":false,"score":3,"last_activity_date":1416749822,"last_edit_date":1416749822,"creation_date":1393958257,"answer_id":22180193,"question_id":3390396,"content_license":"CC BY-SA 3.0","body":"<pre><code>    var x;\n    if (x === undefined) {\n        alert (\"I am declared, but not defined.\")\n    };\n    if (typeof y === \"undefined\") {\n        alert (\"I am not even declared.\")\n    };\n\n    /* One more thing to understand: typeof ==='undefined' also checks \n       for if a variable is declared, but no value is assigned. In other \n       words, the variable is declared, but not defined. */\n\n    // Will repeat above logic of x for typeof === 'undefined'\n    if (x === undefined) {\n        alert (\"I am declared, but not defined.\")\n    };\n    /* So typeof === 'undefined' works for both, but x === undefined \n       only works for a variable which is at least declared. */\n\n    /* Say if I try using typeof === undefined (not in quotes) for \n       a variable which is not even declared, we will get run a \n       time error. */\n\n    if (z === undefined) {\n        alert (\"I am neither declared nor defined.\")\n    };\n    // I got this error for z ReferenceError: z is not defined \n</code></pre>\n"},{"owner":{"reputation":4735,"user_id":1416980,"user_type":"registered","accept_rate":87,"profile_image":"https://www.gravatar.com/avatar/d5d3824688ae0511311ef8a1d41b827a?s=128&d=identicon&r=PG","display_name":"anmarti","link":"https://stackoverflow.com/users/1416980/anmarti"},"is_accepted":false,"score":6,"last_activity_date":1416749506,"last_edit_date":1416749506,"creation_date":1353602843,"answer_id":13517037,"question_id":3390396,"content_license":"CC BY-SA 3.0","body":"<p>Since none of the other answers helped me, I suggest doing this. It worked for me in Internet&nbsp;Explorer&nbsp;8:</p>\n\n<pre><code>if (typeof variable_name.value === 'undefined') {\n    // variable_name is undefined\n}\n</code></pre>\n"},{"owner":{"reputation":1497,"user_id":2088061,"user_type":"registered","profile_image":"https://i.stack.imgur.com/dpZRL.jpg?s=128&g=1","display_name":"DenisS","link":"https://stackoverflow.com/users/2088061/deniss"},"is_accepted":false,"score":13,"last_activity_date":1416748760,"last_edit_date":1416748760,"creation_date":1392049565,"answer_id":21682564,"question_id":27509,"content_license":"CC BY-SA 3.0","body":"<h2>'<em>if (window.x) { }</em>' is error safe</h2>\n\n<p>Most likely you want <code>if (window.x)</code>. This check is safe even if x hasn't been declared (<code>var x;</code>) - browser doesn't throw an error. </p>\n\n<h2>Example: I want to know if my browser supports History API</h2>\n\n<pre><code>if (window.history) {\n    history.call_some_function();\n}\n</code></pre>\n\n<h2>How this works:</h2>\n\n<p><strong>window</strong> is an object which holds all global variables as its members, and it is legal to try to access a non-existing member. If <strong>x</strong> hasn't been declared or hasn't been set then <code>window.x</code> returns <strong>undefined</strong>. <strong>undefined</strong> leads to <strong>false</strong> when <strong>if()</strong> evaluates it.</p>\n"},{"owner":{"reputation":1459,"user_id":117263,"user_type":"registered","accept_rate":43,"profile_image":"https://www.gravatar.com/avatar/4d991be03ac4d7b55ad49e401e9b1692?s=128&d=identicon&r=PG","display_name":"Arnaud Gouder de Beauregard","link":"https://stackoverflow.com/users/117263/arnaud-gouder-de-beauregard"},"is_accepted":false,"score":64,"last_activity_date":1416070882,"last_edit_date":1416070882,"creation_date":1244117096,"answer_id":950109,"question_id":950087,"content_license":"CC BY-SA 3.0","body":"<p>Maybe you can use this function that I found on this page <em><a href=\"http://forums.digitalpoint.com/showthread.php?t=146094\" rel=\"noreferrer\">How do I include a JavaScript file in a JavaScript file?</a></em>:</p>\n\n<pre><code>function include(filename)\n{\n    var head = document.getElementsByTagName('head')[0];\n\n    var script = document.createElement('script');\n    script.src = filename;\n    script.type = 'text/javascript';\n\n    head.appendChild(script)\n}\n</code></pre>\n"},{"owner":{"reputation":743,"user_id":3297388,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/a52ef596dea8092ea2451e90a62d499c?s=128&d=identicon&r=PG&f=1","display_name":"Gaurav","link":"https://stackoverflow.com/users/3297388/gaurav"},"is_accepted":false,"score":16,"last_activity_date":1416002585,"last_edit_date":1416002585,"creation_date":1415430283,"answer_id":26814731,"question_id":17289236,"content_license":"CC BY-SA 3.0","body":"<p>Some times this error is a result of <strong>two</strong> <code>ng-app</code> directives specified in the html.\nIn my case by mistake I had specified <code>ng-app</code> in my <code>html</code> tag and <code>ng-app=\"myApp\"</code> in the <code>body</code> tag like this:</p>\n\n<pre><code>&lt;html ng-app&gt;\n  &lt;body ng-app=\"myApp\"&gt;&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n"},{"owner":{"reputation":1468,"user_id":3535045,"user_type":"registered","profile_image":"https://i.stack.imgur.com/MeDXM.gif?s=128&g=1","display_name":"Seti","link":"https://stackoverflow.com/users/3535045/seti"},"is_accepted":false,"score":4,"last_activity_date":1415536055,"last_edit_date":1415536055,"creation_date":1412842148,"answer_id":26273383,"question_id":27509,"content_license":"CC BY-SA 3.0","body":"<p>I would like to show you something I'm using in order to protect the <code>undefined</code> variable:</p>\n\n<pre><code>Object.defineProperty(window, 'undefined', {});\n</code></pre>\n\n<p>This forbids anyone to change the <code>window.undefined</code> value therefore destroying the code based on that variable. If using <code>\"use strict\"</code>, anything trying to change its value will end in error, otherwise it would be silently ignored.</p>\n"},{"owner":{"reputation":7832,"user_id":412591,"user_type":"registered","accept_rate":46,"profile_image":"https://www.gravatar.com/avatar/c0c4cd78943c002e5d61f0f8de0ef30b?s=128&d=identicon&r=PG","display_name":"Angelin Nadar","link":"https://stackoverflow.com/users/412591/angelin-nadar"},"is_accepted":false,"score":6,"last_activity_date":1415535972,"last_edit_date":1415535972,"creation_date":1404807547,"answer_id":24626893,"question_id":27509,"content_license":"CC BY-SA 3.0","body":"<p>Going through the comments, for those who want to check both is it undefined or its value is null:</p>\n\n<pre><code>//Just in JavaScript\nvar s; // Undefined\nif (typeof s == \"undefined\" || s === null){\n    alert('either it is undefined or value is null')\n}\n</code></pre>\n\n<p>If you are using jQuery Library then <code>jQuery.isEmptyObject()</code> will suffice for both cases,</p>\n\n<pre><code>var s; // Undefined\njQuery.isEmptyObject(s); // Will return true;\n\ns = null; // Defined as null\njQuery.isEmptyObject(s); // Will return true;\n\n//Usage\nif (jQuery.isEmptyObject(s)) {\n    alert('Either variable:s is undefined or its value is null');\n} else {\n     alert('variable:s has value ' + s);\n}\n\ns = 'something'; // Defined with some value\njQuery.isEmptyObject(s); // Will return false;\n</code></pre>\n"},{"owner":{"reputation":3152,"user_id":788840,"user_type":"registered","accept_rate":78,"profile_image":"https://www.gravatar.com/avatar/cfb0145d17fa7e39473b0493cc1ce449?s=128&d=identicon&r=PG","display_name":"Marthijn","link":"https://stackoverflow.com/users/788840/marthijn"},"is_accepted":false,"score":15,"last_activity_date":1415535746,"last_edit_date":1415535746,"creation_date":1387449887,"answer_id":20679527,"question_id":27509,"content_license":"CC BY-SA 3.0","body":"<p>In the article <em><a href=\"http://flippinawesome.org/2013/12/09/exploring-the-abyss-of-null-and-undefined-in-javascript/\" rel=\"noreferrer\">Exploring the Abyss of Null and Undefined in JavaScript </a></em> I read that frameworks like <a href=\"https://en.wikipedia.org/wiki/Underscore.js\" rel=\"noreferrer\">Underscore.js</a> use this function:</p>\n\n<pre><code>function isUndefined(obj){\n    return obj === void 0;\n}\n</code></pre>\n"},{"owner":{"reputation":21951,"user_id":460942,"user_type":"registered","accept_rate":84,"profile_image":"https://www.gravatar.com/avatar/6faba49dfe8649fc2b4073f3bbc3428f?s=128&d=identicon&r=PG","display_name":"Anoop","link":"https://stackoverflow.com/users/460942/anoop"},"is_accepted":false,"score":10,"last_activity_date":1415535392,"last_edit_date":1415535392,"creation_date":1318850572,"answer_id":7793028,"question_id":27509,"content_license":"CC BY-SA 3.0","body":"<p>You can get an array all undefined with path using the following code.</p>\n\n<pre><code> function getAllUndefined(object) {\n\n        function convertPath(arr, key) {\n            var path = \"\";\n            for (var i = 1; i &lt; arr.length; i++) {\n\n                path += arr[i] + \"-&gt;\";\n            }\n            path += key;\n            return path;\n        }\n\n\n        var stack = [];\n        var saveUndefined= [];\n        function getUndefiend(obj, key) {\n\n            var t = typeof obj;\n            switch (t) {\n                case \"object\":\n                    if (t === null) {\n                        return false;\n                    }\n                    break;\n                case \"string\":\n                case \"number\":\n                case \"boolean\":\n                case \"null\":\n                    return false;\n                default:\n                    return true;\n            }\n            stack.push(key);\n            for (k in obj) {\n                if (obj.hasOwnProperty(k)) {\n                    v = getUndefiend(obj[k], k);\n                    if (v) {\n                        saveUndefined.push(convertPath(stack, k));\n                    }\n                }\n            }\n            stack.pop();\n\n        }\n\n        getUndefiend({\n            \"\": object\n        }, \"\");\n        return saveUndefined;\n    }\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/anoop26667/9XbEK/\" rel=\"noreferrer\">jsFiddle</a> link</p>\n"},{"owner":{"reputation":5215,"user_id":653,"user_type":"registered","accept_rate":100,"profile_image":"https://www.gravatar.com/avatar/00e30f0c3219349c80f3ff7aacc9d34a?s=128&d=identicon&r=PG","display_name":"Ricky","link":"https://stackoverflow.com/users/653/ricky"},"is_accepted":false,"score":11,"last_activity_date":1415534871,"last_edit_date":1415534871,"creation_date":1219754302,"answer_id":27911,"question_id":27509,"content_license":"CC BY-SA 3.0","body":"<p>The solution is incorrect. In JavaScript,</p>\n\n<pre><code>null == undefined\n</code></pre>\n\n<p>will return true, because they both are \"casted\" to a boolean and are false. The correct way would be to check</p>\n\n<pre><code>if (something === undefined)\n</code></pre>\n\n<p>which is the identity operator...</p>\n"},{"owner":{"reputation":2647,"user_id":214046,"user_type":"registered","accept_rate":33,"profile_image":"https://i.stack.imgur.com/7bico.jpg?s=128&g=1","display_name":"tggagne","link":"https://stackoverflow.com/users/214046/tggagne"},"is_accepted":false,"score":23,"last_activity_date":1414936220,"last_edit_date":1414936220,"creation_date":1364153532,"answer_id":15602970,"question_id":950087,"content_license":"CC BY-SA 3.0","body":"<p>This should do:</p>\n\n<pre><code>xhr = new XMLHttpRequest();\nxhr.open(\"GET\", \"/soap/ajax/11.0/connection.js\", false);\nxhr.send();\neval(xhr.responseText);\n</code></pre>\n"},{"owner":{"reputation":442,"user_id":45957,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/14c593e154d4e2b191a9508f4e1ac05e?s=128&d=identicon&r=PG","display_name":"Kafka","link":"https://stackoverflow.com/users/45957/kafka"},"is_accepted":false,"score":28,"last_activity_date":1413757519,"last_edit_date":1413757519,"creation_date":1229628642,"answer_id":378934,"question_id":336859,"content_license":"CC BY-SA 3.0","body":"<p>In computer science terms, we talk about anonymous functions and named functions. I think the most important difference is that an anonymous function is not bound to an name, hence the name anonymous function. In JavaScript it is a first class object dynamically declared at runtime.</p>\n\n<p>For more information on anonymous functions and lambda calculus, Wikipedia is a good start (<a href=\"http://en.wikipedia.org/wiki/Anonymous_function\" rel=\"noreferrer\">http://en.wikipedia.org/wiki/Anonymous_function</a>).</p>\n"},{"owner":{"reputation":9697,"user_id":117587,"user_type":"registered","accept_rate":78,"profile_image":"https://www.gravatar.com/avatar/b868d100bfcc500ca0e4a94116a4b36c?s=128&d=identicon&r=PG","display_name":"Sean McMillan","link":"https://stackoverflow.com/users/117587/sean-mcmillan"},"is_accepted":false,"score":97,"last_activity_date":1413757470,"last_edit_date":1413757470,"creation_date":1299179958,"answer_id":5185403,"question_id":336859,"content_license":"CC BY-SA 3.0","body":"<p>Other commenters have already covered the semantic difference of the two variants above. I wanted to note a stylistic difference: Only the \"assignment\" variation can set a property of another object.</p>\n\n<p>I often build JavaScript modules with a pattern like this:</p>\n\n<pre><code>(function(){\n    var exports = {};\n\n    function privateUtil() {\n            ...\n    }\n\n    exports.publicUtil = function() {\n            ...\n    };\n\n    return exports;\n})();\n</code></pre>\n\n<p>With this pattern, your public functions will all use assignment, while your private functions use declaration.</p>\n\n<p>(Note also that assignment should require a semicolon after the statement, while declaration prohibits it.)</p>\n"},{"owner":{"reputation":1509,"user_id":1909864,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/67f8d18e4c02782758c1227465bdfc6a?s=128&d=identicon&r=PG","display_name":"stamat","link":"https://stackoverflow.com/users/1909864/stamat"},"is_accepted":false,"score":12,"last_activity_date":1413743186,"last_edit_date":1413743186,"creation_date":1365784490,"answer_id":15976557,"question_id":950087,"content_license":"CC BY-SA 3.0","body":"<p>I wrote a simple module that automates the job of importing/including module scripts in JavaScript. For detailed explanation of the code, refer to the blog post <em><a href=\"http://stamat.wordpress.com/2013/04/12/javascript-require-import-include-modules/\" rel=\"noreferrer\">JavaScript require / import / include modules</a></em>.</p>\n\n<pre><code>// ----- USAGE -----\n\nrequire('ivar.util.string');\nrequire('ivar.net.*');\nrequire('ivar/util/array.js');\nrequire('http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js');\n\nready(function(){\n    //Do something when required scripts are loaded\n});\n\n    //--------------------\n\nvar _rmod = _rmod || {}; //Require module namespace\n_rmod.LOADED = false;\n_rmod.on_ready_fn_stack = [];\n_rmod.libpath = '';\n_rmod.imported = {};\n_rmod.loading = {\n    scripts: {},\n    length: 0\n};\n\n_rmod.findScriptPath = function(script_name) {\n    var script_elems = document.getElementsByTagName('script');\n    for (var i = 0; i &lt; script_elems.length; i++) {\n        if (script_elems[i].src.endsWith(script_name)) {\n            var href = window.location.href;\n            href = href.substring(0, href.lastIndexOf('/'));\n            var url = script_elems[i].src.substring(0, script_elems[i].length - script_name.length);\n            return url.substring(href.length+1, url.length);\n        }\n    }\n    return '';\n};\n\n_rmod.libpath = _rmod.findScriptPath('script.js'); //Path of your main script used to mark\n                                                   //the root directory of your library, any library.\n\n\n_rmod.injectScript = function(script_name, uri, callback, prepare) {\n\n    if(!prepare)\n        prepare(script_name, uri);\n\n    var script_elem = document.createElement('script');\n    script_elem.type = 'text/javascript';\n    script_elem.title = script_name;\n    script_elem.src = uri;\n    script_elem.async = true;\n    script_elem.defer = false;\n\n    if(!callback)\n        script_elem.onload = function() {\n            callback(script_name, uri);\n        };\n    document.getElementsByTagName('head')[0].appendChild(script_elem);\n};\n\n_rmod.requirePrepare = function(script_name, uri) {\n    _rmod.loading.scripts[script_name] = uri;\n    _rmod.loading.length++;\n};\n\n_rmod.requireCallback = function(script_name, uri) {\n    _rmod.loading.length--;\n    delete _rmod.loading.scripts[script_name];\n    _rmod.imported[script_name] = uri;\n\n    if(_rmod.loading.length == 0)\n        _rmod.onReady();\n};\n\n_rmod.onReady = function() {\n    if (!_rmod.LOADED) {\n        for (var i = 0; i &lt; _rmod.on_ready_fn_stack.length; i++){\n            _rmod.on_ready_fn_stack[i]();\n        });\n        _rmod.LOADED = true;\n    }\n};\n\n_.rmod = namespaceToUri = function(script_name, url) {\n    var np = script_name.split('.');\n    if (np.getLast() === '*') {\n        np.pop();\n        np.push('_all');\n    }\n\n    if(!url)\n        url = '';\n\n    script_name = np.join('.');\n    return  url + np.join('/')+'.js';\n};\n\n//You can rename based on your liking. I chose require, but it\n//can be called include or anything else that is easy for you\n//to remember or write, except \"import\", because it is reserved\n//for future use.\nvar require = function(script_name) {\n    var uri = '';\n    if (script_name.indexOf('/') &gt; -1) {\n        uri = script_name;\n        var lastSlash = uri.lastIndexOf('/');\n        script_name = uri.substring(lastSlash+1, uri.length);\n    } \n    else {\n        uri = _rmod.namespaceToUri(script_name, ivar._private.libpath);\n    }\n\n    if (!_rmod.loading.scripts.hasOwnProperty(script_name)\n     &amp;&amp; !_rmod.imported.hasOwnProperty(script_name)) {\n        _rmod.injectScript(script_name, uri,\n            _rmod.requireCallback,\n                _rmod.requirePrepare);\n    }\n};\n\nvar ready = function(fn) {\n    _rmod.on_ready_fn_stack.push(fn);\n};\n</code></pre>\n"},{"owner":{"reputation":1910,"user_id":1593459,"user_type":"registered","accept_rate":75,"profile_image":"https://i.stack.imgur.com/jJEZg.png?s=128&g=1","display_name":"Ale","link":"https://stackoverflow.com/users/1593459/ale"},"is_accepted":false,"score":10,"last_activity_date":1413742681,"last_edit_date":1413742681,"creation_date":1385145633,"answer_id":20152162,"question_id":950087,"content_license":"CC BY-SA 3.0","body":"<p>There is also <a href=\"http://headjs.com/\" rel=\"noreferrer\">Head.js</a>. It is very easy to deal with:</p>\n\n<pre><code>head.load(\"js/jquery.min.js\",\n          \"js/jquery.someplugin.js\",\n          \"js/jquery.someplugin.css\", function() {\n  alert(\"Everything is ok!\");\n});\n</code></pre>\n\n<p>As you see, it's easier than Require.js and as convenient as jQuery's <code>$.getScript</code> method. It also has some advanced features, like conditional loading, feature detection and <a href=\"http://headjs.com/site/api/v1.00.html\" rel=\"noreferrer\">much more</a>.</p>\n"},{"owner":{"reputation":5079,"user_id":193400,"user_type":"registered","accept_rate":93,"profile_image":"https://www.gravatar.com/avatar/c314c21919b2a89546c854506e088031?s=128&d=identicon&r=PG","display_name":"Marcin","link":"https://stackoverflow.com/users/193400/marcin"},"is_accepted":false,"score":7,"last_activity_date":1413742630,"last_edit_date":1413742630,"creation_date":1383759347,"answer_id":19818854,"question_id":950087,"content_license":"CC BY-SA 3.0","body":"<p>Here is a <a href=\"http://gruntjs.com/\" rel=\"noreferrer\">Grunt</a> plugin allowing you to use <code>@import \"path/to/file.js\";</code> syntax in any file including JavaScript files. It can be paired with uglify or watch or any other plugin.</p>\n\n<p>It can be installed with npm install: <a href=\"https://npmjs.org/package/grunt-import\" rel=\"noreferrer\">https://npmjs.org/package/grunt-import</a></p>\n"},{"owner":{"reputation":1822,"user_id":998008,"user_type":"registered","profile_image":"https://i.stack.imgur.com/Tedl0.jpg?s=128&g=1","display_name":"Dmitry Sheiko","link":"https://stackoverflow.com/users/998008/dmitry-sheiko"},"is_accepted":false,"score":30,"last_activity_date":1413742426,"last_edit_date":1413742426,"creation_date":1373751843,"answer_id":17634471,"question_id":950087,"content_license":"CC BY-SA 3.0","body":"<p>Most of solutions shown here imply dynamical loading. I was searching instead for a compiler which assemble all the depended files into a single output file. The same as <a href=\"http://en.wikipedia.org/wiki/Less_%28stylesheet_language%29\">Less</a>/<a href=\"http://en.wikipedia.org/wiki/Sass_%28stylesheet_language%29\">Sass</a> preprocessors deal with the CSS <code>@import</code> at-rule. Since I didn't find anything decent of this sort, I wrote a simple tool solving the issue.</p>\n\n<p>So here is the compiler, <a href=\"https://github.com/dsheiko/jsic\">https://github.com/dsheiko/jsic</a>, which replaces <code>$import(\"file-path\")</code> with the requested file content securely. Here is the corresponding <a href=\"http://gruntjs.com/\">Grunt</a> plugin: <a href=\"https://github.com/dsheiko/grunt-jsic\">https://github.com/dsheiko/grunt-jsic</a>.</p>\n\n<p>On the jQuery master branch, they simply concatenate atomic source files into a single one starting with <code>intro.js</code> and ending with <code>outtro.js</code>. That doesn't suits me as it provides no flexibility on the source code design. Check out how it works with jsic:</p>\n\n<p><em>src/main.js</em></p>\n\n<pre><code>var foo = $import(\"./Form/Input/Tel\");\n</code></pre>\n\n<p><em>src/Form/Input/Tel.js</em></p>\n\n<pre><code>function() {\n    return {\n          prop: \"\",\n          method: function(){}\n    }\n}\n</code></pre>\n\n<p>Now we can run the compiler:</p>\n\n<pre><code>node jsic.js src/main.js build/mail.js\n</code></pre>\n\n<p>And get the combined file</p>\n\n<p><em>build/main.js</em></p>\n\n<pre><code>var foo = function() {\n    return {\n          prop: \"\",\n          method: function(){}\n    }\n};\n</code></pre>\n"},{"owner":{"reputation":1464,"user_id":945011,"user_type":"registered","profile_image":"https://i.stack.imgur.com/AJZKn.png?s=128&g=1","display_name":"Duncan","link":"https://stackoverflow.com/users/945011/duncan"},"is_accepted":false,"score":5,"last_activity_date":1413742031,"last_edit_date":1413742031,"creation_date":1362671450,"answer_id":15275614,"question_id":950087,"content_license":"CC BY-SA 3.0","body":"<p>Now, I may be totally misguided, but here's what I've recently started doing... \nStart and end your JavaScript files with a carriage return, place in the PHP script, followed by one more carriage return.\nThe JavaScript comment \"//\" is ignored by PHP so the inclusion happens anyway. The purpose for the carriage returns is so that the first line of your included JavaScript isn't commented out.</p>\n\n<p>Technically, you don't need the comment, but it posts errors in <a href=\"http://en.wikipedia.org/wiki/Adobe_Dreamweaver\" rel=\"nofollow\">Dreamweaver</a> that annoy me. If you're scripting in an IDE that doesn't post errors, you shouldn't need the comment or the carriage returns.</p>\n\n<pre><code>\\n\n//&lt;?php require_once(\"path/to/javascript/dependency.js\"); ?&gt;\n\nfunction myFunction(){\n    // stuff\n}\n\\n\n</code></pre>\n"},{"owner":{"reputation":87,"user_id":1625049,"user_type":"unregistered","profile_image":"https://www.gravatar.com/avatar/82aea6d1f6975ca7ed7c96886494211e?s=128&d=identicon&r=PG","display_name":"weageoo","link":"https://stackoverflow.com/users/1625049/weageoo"},"is_accepted":false,"score":7,"last_activity_date":1413741976,"last_edit_date":1413741976,"creation_date":1345925841,"answer_id":12125326,"question_id":950087,"content_license":"CC BY-SA 3.0","body":"<p>Better use the <a href=\"http://en.wikipedia.org/wiki/JQuery\" rel=\"noreferrer\">jQuery</a> way. To delay the ready event, first call <code>$.holdReady(true)</code>.\nExample (<a href=\"http://jqapi.com/#p=jQuery.holdReady\" rel=\"noreferrer\">source</a>):</p>\n\n<pre><code>$.holdReady(true);\n$.getScript(\"myplugin.js\", function() {\n    $.holdReady(false);\n});\n</code></pre>\n"},{"owner":{"reputation":5685,"user_id":946170,"user_type":"registered","accept_rate":75,"profile_image":"https://www.gravatar.com/avatar/6d76fa97b108dcfbbf8d9b8e8705a140?s=128&d=identicon&r=PG","display_name":"Imdad","link":"https://stackoverflow.com/users/946170/imdad"},"is_accepted":false,"score":108,"last_activity_date":1413741937,"last_edit_date":1413741937,"creation_date":1341322374,"answer_id":11312069,"question_id":950087,"content_license":"CC BY-SA 3.0","body":"<p>There is a good news for you. Very soon you will be able to load JavaScript code easily. It will become a standard way of importing modules of JavaScript code and will be part of core JavaScript itself. </p>\n\n<p>You simply have to write <code>import cond from 'cond.js';</code> to load a macro named <code>cond</code> from a file <code>cond.js</code>.</p>\n\n<p>So you don't have to rely upon any JavaScript framework nor do you have to explicitly make <a href=\"http://en.wikipedia.org/wiki/Ajax_%28programming%29\">Ajax</a> calls.</p>\n\n<p>Refer to:</p>\n\n<ul>\n<li><p><em><a href=\"http://calculist.org/blog/2012/06/29/static-module-resolution/\">Static module resolution</a></em></p></li>\n<li><p><em><a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:module_loaders\">Module loaders</a></em></p></li>\n</ul>\n"},{"owner":{"reputation":239,"user_id":1443203,"user_type":"unregistered","profile_image":"https://www.gravatar.com/avatar/e493aeb3098ab4795f37576ff0ef1c54?s=128&d=identicon&r=PG","display_name":"JMawer","link":"https://stackoverflow.com/users/1443203/jmawer"},"is_accepted":false,"score":23,"last_activity_date":1413741771,"last_edit_date":1413741771,"creation_date":1339102087,"answer_id":10939637,"question_id":950087,"content_license":"CC BY-SA 3.0","body":"<p>Or rather than including at run time, use a script to concatenate prior to upload.</p>\n\n<p>I use <a href=\"https://github.com/sstephenson/sprockets\" rel=\"noreferrer\">Sprockets</a> (I don't know if there are others). You build your JavaScript code in separate files and include comments that are processed by the Sprockets engine as includes. For development you can include files sequentially, then for production to merge them...</p>\n\n<p>See also:</p>\n\n<ul>\n<li><em><a href=\"http://37signals.com/svn/posts/1587-introducing-sprockets-javascript-dependency-management-and-concatenation\" rel=\"noreferrer\">Introducing Sprockets: JavaScript dependency management and concatenation</a></em></li>\n</ul>\n"},{"owner":{"reputation":17671,"user_id":40667,"user_type":"registered","accept_rate":85,"profile_image":"https://i.stack.imgur.com/nfHSj.jpg?s=128&g=1","display_name":"Wayne Molina","link":"https://stackoverflow.com/users/40667/wayne-molina"},"is_accepted":false,"score":9,"last_activity_date":1413668738,"last_edit_date":1413668738,"creation_date":1327008459,"answer_id":8933531,"question_id":950087,"content_license":"CC BY-SA 3.0","body":"<p>I have created a function that will allow you to use similar verbiage to C#/Java to include a JavaScript file. I've tested it a little bit even from inside of <em>another</em> JavaScript file and it seems to work. It does require jQuery though for a bit of \"magic\" at the end.</p>\n\n<p>I put this code in a file at the root of my script directory (I named it <code>global.js</code>, but you can use whatever you want. Unless I'm mistaken this and jQuery should be the only required scripts on a given page. Keep in mind this is largely untested beyond some basic usage, so there may or may not be any issues with the way I've done it; use at your own risk yadda yadda I am not responsible if you screw anything up yadda yadda:</p>\n\n<pre><code>/**\n* @fileoverview This file stores global functions that are required by other libraries.\n*/\n\nif (typeof(jQuery) === 'undefined') {\n    throw 'jQuery is required.';\n}\n\n/** Defines the base script directory that all .js files are assumed to be organized under. */\nvar BASE_DIR = 'js/';\n\n/**\n* Loads the specified file, outputting it to the &lt;head&gt; HTMLElement.\n*\n* This method mimics the use of using in C# or import in Java, allowing\n* JavaScript files to \"load\" other JavaScript files that they depend on\n* using a familiar syntax.\n*\n* This method assumes all scripts are under a directory at the root and will\n* append the .js file extension automatically.\n*\n* @param {string} file A file path to load using C#/Java \"dot\" syntax.\n*\n* Example Usage:\n* imports('core.utils.extensions');\n* This will output: &lt;script type=\"text/javascript\" src=\"/js/core/utils/extensions.js\"&gt;&lt;/script&gt;\n*/\nfunction imports(file) {\n    var fileName = file.substr(file.lastIndexOf('.') + 1, file.length);\n\n    // Convert PascalCase name to underscore_separated_name\n    var regex = new RegExp(/([A-Z])/g);\n    if (regex.test(fileName)) {\n        var separated = fileName.replace(regex, \",$1\").replace(',', '');\n        fileName = separated.replace(/[,]/g, '_');\n    }\n\n    // Remove the original JavaScript file name to replace with underscore version\n    file = file.substr(0, file.lastIndexOf('.'));\n\n    // Convert the dot syntax to directory syntax to actually load the file\n    if (file.indexOf('.') &gt; 0) {\n        file = file.replace(/[.]/g, '/');\n    }\n\n    var src = BASE_DIR + file + '/' + fileName.toLowerCase() + '.js';\n    var script = document.createElement('script');\n    script.type = 'text/javascript';\n    script.src = src;\n\n    $('head').find('script:last').append(script);\n}\n</code></pre>\n"},{"owner":{"reputation":1437,"user_id":2672014,"user_type":"registered","accept_rate":42,"profile_image":"https://i.stack.imgur.com/aQPqE.jpg?s=128&g=1","display_name":"Yeasin Abedin Siam","link":"https://stackoverflow.com/users/2672014/yeasin-abedin-siam"},"is_accepted":false,"score":8,"last_activity_date":1413626096,"creation_date":1413626096,"answer_id":26438460,"question_id":500431,"content_license":"CC BY-SA 3.0","body":"<p>run the code. hope this will give an idea about scoping </p>\n\n<pre><code>Name = 'global data';\ndocument.Name = 'current document data';\n(function(window,document){\nvar Name = 'local data';\nvar myObj = {\n    Name: 'object data',\n    f: function(){\n        alert(this.Name);\n    }\n};\n\nmyObj.newFun = function(){\n    alert(this.Name);\n}\n\nfunction testFun(){\n    alert(\"Window Scope : \" + window.Name + \n          \"\\nLocal Scope : \" + Name + \n          \"\\nObject Scope : \" + this.Name + \n          \"\\nCurrent document Scope : \" + document.Name\n         );\n}\n\n\ntestFun.call(myObj);\n})(window,document);\n</code></pre>\n"},{"owner":{"reputation":2957,"user_id":1051462,"user_type":"registered","profile_image":"https://i.stack.imgur.com/JR86H.jpg?s=128&g=1","display_name":"Dmitri Algazin","link":"https://stackoverflow.com/users/1051462/dmitri-algazin"},"is_accepted":false,"score":1,"last_activity_date":1411729346,"creation_date":1411729346,"answer_id":26058052,"question_id":17289236,"content_license":"CC BY-SA 3.0","body":"<p>I got sane error with LoginController, which I used in main index.html.\nI found two ways to resolve:</p>\n\n<ol>\n<li><p>setting $controllerProvider.allowGlobals(), I found that comment in Angular <a href=\"https://github.com/angular/angular.js/commit/3f2232b5a181512fac23775b1df4a6ebda67d018\" rel=\"nofollow\">change-list</a>\n\"this option might be handy for migrating old apps, but please don't use it in new ones!\" original comment on Angular</p>\n\n<p>app.config(['$controllerProvider', function($controllerProvider) {\n     $controllerProvider.allowGlobals();\n   }]);</p></li>\n<li><p>wrong contructor of registering controller</p></li>\n</ol>\n\n<p>before</p>\n\n<pre><code>LoginController.$inject = ['$rootScope', '$scope', '$location'];\n</code></pre>\n\n<p>now</p>\n\n<pre><code>app.controller('LoginController', ['$rootScope', '$scope', '$location', LoginController]);\n</code></pre>\n\n<p>'app' come from app.js</p>\n\n<pre><code>var MyApp = {};\nvar app = angular.module('MyApp ', ['app.services']);\nvar services = angular.module('app.services', ['ngResource', 'ngCookies', 'ngAnimate', 'ngRoute']);\n</code></pre>\n"},{"owner":{"reputation":8294,"user_id":1768910,"user_type":"registered","accept_rate":79,"profile_image":"https://i.stack.imgur.com/rfR4i.jpg?s=128&g=1","display_name":"Anshul","link":"https://stackoverflow.com/users/1768910/anshul"},"is_accepted":false,"score":9,"last_activity_date":1411332557,"last_edit_date":1411332557,"creation_date":1411332250,"answer_id":25963672,"question_id":500431,"content_license":"CC BY-SA 3.0","body":"<p>JavaScript have only two type of scope : </p>\n\n<ol>\n<li><strong>Global Scope</strong> : Global is nothing but a window level scope.Here, variable present throughout the application.</li>\n<li><strong>Functional Scope</strong> : Variable declared within a function with <code>var</code> keyword has functional scope.</li>\n</ol>\n\n<p><em>Whenever a function is called, a variable scope object is created (and included in scope chain) which is followed by variables in JavaScript.</em></p>\n\n<pre><code>        a = \"global\";\n         function outer(){ \n              b = \"local\";\n              console.log(a+b); //\"globallocal\"\n         }\nouter();\n</code></pre>\n\n<p>Scope chain -->  </p>\n\n<ol>\n<li>Window level - <code>a</code> and <code>outer</code> function are at top level in scope chain.</li>\n<li>when outer function called a new <code>variable scope object</code>(and included in scope chain) added with variable <code>b</code> inside it.</li>\n</ol>\n\n<p>Now when a variable <code>a</code> required it first searches for nearest variable scope and if variable is not there than it move's to next object of variable scope chain.which is in this case is window level.</p>\n"},{"owner":{"reputation":15415,"user_id":3446,"user_type":"registered","accept_rate":67,"profile_image":"https://www.gravatar.com/avatar/b785d79619fc2a21e66d5b849341952a?s=128&d=identicon&r=PG","display_name":"rcreswick","link":"https://stackoverflow.com/users/3446/rcreswick"},"is_accepted":false,"score":135,"last_activity_date":1410638181,"last_edit_date":1410638181,"creation_date":1220555305,"answer_id":44512,"question_id":38987,"content_license":"CC BY-SA 3.0","body":"<p>I wanted something similar, but with the ability to specify how the values on duplicate keys were merged, so I hacked this out (but did not heavily test it).  Obviously this is not a single expression, but it is a single function call.</p>\n\n<pre><code>def merge(d1, d2, merge_fn=lambda x,y:y):\n    \"\"\"\n    Merges two dictionaries, non-destructively, combining \n    values on duplicate keys as defined by the optional merge\n    function.  The default behavior replaces the values in d1\n    with corresponding values in d2.  (There is no other generally\n    applicable merge strategy, but often you'll have homogeneous \n    types in your dicts, so specifying a merge technique can be \n    valuable.)\n\n    Examples:\n\n    &gt;&gt;&gt; d1\n    {'a': 1, 'c': 3, 'b': 2}\n    &gt;&gt;&gt; merge(d1, d1)\n    {'a': 1, 'c': 3, 'b': 2}\n    &gt;&gt;&gt; merge(d1, d1, lambda x,y: x+y)\n    {'a': 2, 'c': 6, 'b': 4}\n\n    \"\"\"\n    result = dict(d1)\n    for k,v in d2.iteritems():\n        if k in result:\n            result[k] = merge_fn(result[k], v)\n        else:\n            result[k] = v\n    return result\n</code></pre>\n"},{"owner":{"reputation":205422,"user_id":15055,"user_type":"registered","accept_rate":80,"profile_image":"https://www.gravatar.com/avatar/7f71287b47b7189d11fe6d3fbc7ed2fe?s=128&d=identicon&r=PG","display_name":"Claudiu","link":"https://stackoverflow.com/users/15055/claudiu"},"is_accepted":false,"score":27,"last_activity_date":1410637938,"last_edit_date":1495542893,"creation_date":1375910588,"answer_id":18114065,"question_id":38987,"content_license":"CC BY-SA 3.0","body":"<p>Abuse leading to a one-expression solution for <a href=\"https://stackoverflow.com/a/39437/15055\">Matthew's answer</a>:</p>\n\n<pre><code>&gt;&gt;&gt; x = {'a':1, 'b': 2}\n&gt;&gt;&gt; y = {'b':10, 'c': 11}\n&gt;&gt;&gt; z = (lambda f=x.copy(): (f.update(y), f)[1])()\n&gt;&gt;&gt; z\n{'a': 1, 'c': 11, 'b': 10}\n</code></pre>\n\n<p>You said you wanted one expression, so I abused <code>lambda</code> to bind a name, and tuples to override lambda's one-expression limit. Feel free to cringe.</p>\n\n<p>You could also do this of course if you don't care about copying it:</p>\n\n<pre><code>&gt;&gt;&gt; x = {'a':1, 'b': 2}\n&gt;&gt;&gt; y = {'b':10, 'c': 11}\n&gt;&gt;&gt; z = (x.update(y), x)[1]\n&gt;&gt;&gt; z\n{'a': 1, 'b': 10, 'c': 11}\n</code></pre>\n"},{"owner":{"reputation":9271,"user_id":4966,"user_type":"registered","accept_rate":62,"profile_image":"https://www.gravatar.com/avatar/929fba6f82f04811b09c16df239bbb21?s=128&d=identicon&r=PG","display_name":"Tony Meyer","link":"https://stackoverflow.com/users/4966/tony-meyer"},"is_accepted":false,"score":236,"last_activity_date":1407282962,"last_edit_date":1407282962,"creation_date":1220872614,"answer_id":49492,"question_id":38987,"content_license":"CC BY-SA 3.0","body":"<p>This probably won't be a popular answer, but you almost certainly do not want to do this.  If you want a copy that's a merge, then use copy (or <a href=\"https://docs.python.org/2/library/copy.html\" rel=\"noreferrer\">deepcopy</a>, depending on what you want) and then update.  The two lines of code are much more readable - more Pythonic - than the single line creation with .items() + .items().  Explicit is better than implicit.</p>\n\n<p>In addition, when you use .items() (pre Python 3.0), you're creating a new list that contains the items from the dict.  If your dictionaries are large, then that is quite a lot of overhead (two large lists that will be thrown away as soon as the merged dict is created).  update() can work more efficiently, because it can run through the second dict item-by-item.</p>\n\n<p>In terms of <a href=\"https://docs.python.org/2/library/timeit.html\" rel=\"noreferrer\">time</a>:</p>\n\n<pre><code>&gt;&gt;&gt; timeit.Timer(\"dict(x, **y)\", \"x = dict(zip(range(1000), range(1000)))\\ny=dict(zip(range(1000,2000), range(1000,2000)))\").timeit(100000)\n15.52571702003479\n&gt;&gt;&gt; timeit.Timer(\"temp = x.copy()\\ntemp.update(y)\", \"x = dict(zip(range(1000), range(1000)))\\ny=dict(zip(range(1000,2000), range(1000,2000)))\").timeit(100000)\n15.694622993469238\n&gt;&gt;&gt; timeit.Timer(\"dict(x.items() + y.items())\", \"x = dict(zip(range(1000), range(1000)))\\ny=dict(zip(range(1000,2000), range(1000,2000)))\").timeit(100000)\n41.484580039978027\n</code></pre>\n\n<p>IMO the tiny slowdown between the first two is worth it for the readability.  In addition, keyword arguments for dictionary creation was only added in Python 2.3, whereas copy() and update() will work in older versions.</p>\n"},{"owner":{"reputation":131,"user_id":3595369,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/095b09317386251eabdfd44e0b340d69?s=128&d=identicon&r=PG&f=1","display_name":"Gurpreet Dhanoa","link":"https://stackoverflow.com/users/3595369/gurpreet-dhanoa"},"is_accepted":false,"score":11,"last_activity_date":1407192413,"last_edit_date":1407192413,"creation_date":1399015971,"answer_id":23423046,"question_id":7975093,"content_license":"CC BY-SA 3.0","body":"<p>Try this snippet:</p>\n\n<pre><code>jQuery(function($) {\n  // Your code.\n})\n</code></pre>\n\n<p>It worked for me, maybe it will help you too.</p>\n"},{"owner":{"reputation":11,"user_id":1034149,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/49ab8e412f2ccd0a1b0f9bff89445002?s=128&d=identicon&r=PG","display_name":"Jorge Alejandro Inturias","link":"https://stackoverflow.com/users/1034149/jorge-alejandro-inturias"},"is_accepted":false,"score":1,"last_activity_date":1405032104,"last_edit_date":1405032104,"creation_date":1404440112,"answer_id":24565789,"question_id":7975093,"content_license":"CC BY-SA 3.0","body":"<p>Two things:</p>\n\n<ol>\n<li>Be sure that you have jQuery library added, before your $(document).</li>\n<li>Then just change all \"$\" with: jQuery , as the previous comments.</li>\n</ol>\n"},{"owner":{"reputation":677,"user_id":2359695,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/ca8843a94f4213b262005e547a3cb097?s=128&d=identicon&r=PG","display_name":"user2359695","link":"https://stackoverflow.com/users/2359695/user2359695"},"is_accepted":false,"score":37,"last_activity_date":1403305012,"creation_date":1403305012,"answer_id":24336808,"question_id":9329446,"content_license":"CC BY-SA 3.0","body":"<p>I know this is an old post, and there are so many great answers already. For a little more completeness I figured I'd throw in another one using <a href=\"https://angularjs.org/\" rel=\"noreferrer\">AngularJS</a>. Of course, this only applies if you're using Angular, obviously, nonetheless I'd like to put it anyway.</p>\n\n<p><code>angular.forEach</code> takes 2 arguments and an optional third argument. The first argument is the object (array) to iterate over, the second argument is the iterator function, and the optional third argument is the object context (basically referred to inside the loop as 'this'.</p>\n\n<p>There are different ways to use the forEach loop of angular. The simplest and probably most used is</p>\n\n<pre><code>var temp = [1, 2, 3];\nangular.forEach(temp, function(item) {\n    //item will be each element in the array\n    //do something\n});\n</code></pre>\n\n<p>Another way that is useful for copying items from one array to another is</p>\n\n<pre><code>var temp = [1, 2, 3];\nvar temp2 = [];\nangular.forEach(temp, function(item) {\n    this.push(item); //\"this\" refers to the array passed into the optional third parameter so, in this case, temp2.\n}, temp2);\n</code></pre>\n\n<p>Though, you don't have to do that, you can simply do the following and it's equivalent to the previous example:</p>\n\n<pre><code>angular.forEach(temp, function(item) {\n    temp2.push(item);\n});\n</code></pre>\n\n<p>Now there are pros and cons of using the <code>angular.forEach</code> function as opposed to the built in vanilla-flavored <code>for</code> loop.</p>\n\n<p><strong>Pros</strong></p>\n\n<ul>\n<li>Easy readability</li>\n<li>Easy writability</li>\n<li>If available, <code>angular.forEach</code> will use the ES5 forEach loop. Now, I will get to efficientcy in the cons section, as the forEach loops are <em>much</em> slower than the for loops. I mention this as a pro because it's nice to be consistent and standardized.</li>\n</ul>\n\n<p>Consider the following 2 nested loops, which do exactly the same thing. Let's say that we have 2 arrays of objects and each object contains an array of results, each of which has a Value property that's a string (or whatever). And let's say we need to iterate over each of the results and if they're equal then perform some action: </p>\n\n<pre><code>angular.forEach(obj1.results, function(result1) {\n    angular.forEach(obj2.results, function(result2) {\n        if (result1.Value === result2.Value) {\n            //do something\n        }\n    });\n});\n\n//exact same with a for loop\nfor (var i = 0; i &lt; obj1.results.length; i++) {\n    for (var j = 0; j &lt; obj2.results.length; j++) {\n        if (obj1.results[i].Value === obj2.results[j].Value) {\n            //do something\n        }\n    }\n}\n</code></pre>\n\n<p>Granted this is a very simple hypothetical example, but I've written triple embedded for loops using the second approach and it was <em>very</em> hard to read, and write for that matter.</p>\n\n<p><strong>Cons</strong></p>\n\n<ul>\n<li>Efficiency. <code>angular.forEach</code>, and the native <code>forEach</code>, for that matter, are both <em>so much</em> slower than the normal <code>for</code> loop....about <a href=\"http://jsperf.com/angular-foreach-vs-native-for-loop/3\" rel=\"noreferrer\">90% slower</a>. So for large data sets, best to stick to the native <code>for</code> loop.</li>\n<li>No break, continue, or return support. <code>continue</code> is actually supported by \"<a href=\"https://github.com/angular/angular.js/issues/263\" rel=\"noreferrer\">accident</a>\", to continue in an <code>angular.forEach</code> you simple put a <code>return;</code> statement in the function like <code>angular.forEach(array, function(item) { if (someConditionIsTrue) return; });</code> which will cause it to continue out of the function for that iteration. This is also due to the fact that the native <code>forEach</code> does not support break or continue either.</li>\n</ul>\n\n<p>I'm sure there's various other pros and cons as well, and please feel free to add any that you see fit. I feel that, bottom line, if you need efficiency, stick with just the native <code>for</code> loop for your looping needs. But, if your datasets are smaller and a some efficiency is okay to give up in exchange for readability and writability, then by all means throw an <code>angular.forEach</code> in that bad boy.</p>\n"},{"owner":{"reputation":843,"user_id":932315,"user_type":"registered","profile_image":"https://i.stack.imgur.com/xk3AF.jpg?s=128&g=1","display_name":"Xceno","link":"https://stackoverflow.com/users/932315/xceno"},"is_accepted":false,"score":2,"last_activity_date":1403008997,"creation_date":1403008997,"answer_id":24264145,"question_id":17289236,"content_license":"CC BY-SA 3.0","body":"<p>Уmed's second point was my pitfall but just for the record, maybe it's helping someone somewhere:</p>\n\n<p>I had the same problem and just before I went nuts I discovered that I had forgotten to include my controller script.</p>\n\n<p>As my app is based on ASP.Net MVC I decided to keep myself sane by inserting the following snippet in my <strong>App_Start/BundleConfig.cs</strong></p>\n\n<pre><code>bundles.Add(new ScriptBundle(\"~/app\").Include(\n                \"~/app/app.js\",\n                \"~/app/controllers/*.js\",\n                \"~/app/services/*.js\" ));\n</code></pre>\n\n<p>and in <strong>Layout.cshtml</strong></p>\n\n<pre><code>&lt;head&gt;\n...\n   @Scripts.Render(\"~/app\")\n...\n&lt;/head&gt;\n</code></pre>\n\n<p>Now I won't have to think about including the files manually ever again.\nIn hindsight I really should have done this when setting up the project...</p>\n"},{"owner":{"reputation":813,"user_id":1935219,"user_type":"registered","accept_rate":36,"profile_image":"https://www.gravatar.com/avatar/92fc4a15d24d867c2661a141e06756d1?s=128&d=identicon&r=PG&f=1","display_name":"Suman Biswas","link":"https://stackoverflow.com/users/1935219/suman-biswas"},"is_accepted":false,"score":15,"last_activity_date":1402313656,"last_edit_date":1402313656,"creation_date":1402312487,"answer_id":24119140,"question_id":7975093,"content_license":"CC BY-SA 3.0","body":"<p>Use this:</p>\n\n<pre><code>var $ =jQuery.noConflict();\n</code></pre>\n"},{"owner":{"reputation":3153,"user_id":1331672,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/4d4f081c9bc06954b7cf541834982b93?s=128&d=identicon&r=PG","display_name":"Gerard ONeill","link":"https://stackoverflow.com/users/1331672/gerard-oneill"},"is_accepted":false,"score":17,"last_activity_date":1402074786,"last_edit_date":1402074786,"creation_date":1382661677,"answer_id":19579213,"question_id":500431,"content_license":"CC BY-SA 3.0","body":"<p>1) There is a global scope, a function scope, and the with and catch scopes. There is no 'block' level scope in general for variable's -- the with and the catch statements add names to their blocks.</p>\n\n<p>2) Scopes are nested by functions all the way to the global scope.</p>\n\n<p>3) Properties are resolved by going through the prototype chain.  The with statement brings object property names into the lexical scope defined by the with block.</p>\n\n<p>EDIT: ECMAAScript 6 (Harmony) is spec'ed to support let, and I know chrome allows a 'harmony' flag, so perhaps it does support it..</p>\n\n<p>Let would be a support for block level scoping, but you have to use the keyword to make it happen.</p>\n\n<p>EDIT: Based on Benjamin's pointing out of the with and catch statements in the comments, I've edited the post, and added more.  Both the with and the catch statements introduce variables into their respective blocks, and that <em>is</em> a block scope. These variables are aliased to the properties of the objects passed into them.</p>\n\n<pre><code> //chrome (v8)\n\n var a = { 'test1':'test1val' }\n test1   // error not defined\n with (a) { var test1 = 'replaced' }\n test1   // undefined\n a       // a.test1 = 'replaced'\n</code></pre>\n\n<p>EDIT: Clarifying example:</p>\n\n<p>test1 is scoped to the with block, but is aliased to a.test1.  'Var test1' creates a new variable test1 in the upper lexical context (function, or global), unless it is a property of a -- which it is. </p>\n\n<p>Yikes!  Be careful using 'with' -- just like var is a noop if the variable is already defined in the function, it is also a noop with respect to names imported from the object!  A little heads up on the name already being defined would make this much safer.  I personally will never use with because of this.</p>\n"},{"owner":{"reputation":1135,"user_id":2117400,"user_type":"unregistered","profile_image":"https://www.gravatar.com/avatar/5b09429c0d97379d9aa1fd30c1f60124?s=128&d=identicon&r=PG","display_name":"gaby de wilde","link":"https://stackoverflow.com/users/2117400/gaby-de-wilde"},"is_accepted":false,"score":38,"last_activity_date":1401475052,"last_edit_date":1401475052,"creation_date":1362883071,"answer_id":15318284,"question_id":9329446,"content_license":"CC BY-SA 3.0","body":"<p>If you don't mind emptying the array:</p>\n\n<pre><code>var x;\n\nwhile(x = y.pop()){ \n\n    alert(x); //do something \n\n}\n</code></pre>\n\n<p><code>x</code> will contain the last value of <code>y</code> and it will be removed from the array. You can also use <code>shift()</code> which will give and remove the first item from <code>y</code>.</p>\n"},{"owner":{"reputation":811,"user_id":647728,"user_type":"registered","accept_rate":100,"profile_image":"https://www.gravatar.com/avatar/6e780ee0dc0dd59c93cdcaf45cdef2e4?s=128&d=identicon&r=PG","display_name":"agrath","link":"https://stackoverflow.com/users/647728/agrath"},"is_accepted":false,"score":6,"last_activity_date":1400114052,"creation_date":1400114052,"answer_id":23667384,"question_id":7975093,"content_license":"CC BY-SA 3.0","body":"<p>Also check for including jQuery, followed by some components/other libraries (like jQuery UI) and then accidentially including jQuery again - this will redefine jQuery and drop the component helpers (like .datepicker) off the instance.</p>\n"},{"owner":{"reputation":35218,"user_id":822138,"user_type":"registered","profile_image":"https://i.stack.imgur.com/FhAsF.png?s=128&g=1","display_name":"sam","link":"https://stackoverflow.com/users/822138/sam"},"is_accepted":false,"score":12,"last_activity_date":1399248789,"creation_date":1399248789,"answer_id":23463075,"question_id":27509,"content_license":"CC BY-SA 3.0","body":"<pre><code>\"propertyName\" in obj //-&gt; true | false\n</code></pre>\n"},{"owner":{"reputation":26097,"user_id":1948292,"user_type":"registered","accept_rate":69,"profile_image":"https://i.stack.imgur.com/YNSV2.jpg?s=128&g=1","display_name":"Daniel W.","link":"https://stackoverflow.com/users/1948292/daniel-w"},"is_accepted":false,"score":12,"last_activity_date":1396350926,"creation_date":1396350926,"answer_id":22784194,"question_id":9329446,"content_license":"CC BY-SA 3.0","body":"<p>jQuery way using <code>$.map</code>:</p>\n\n<pre><code>var data = [1, 2, 3, 4, 5, 6, 7];\n\nvar newData = $.map(data, function(element) {\n    if (element % 2 == 0) {\n        return element;\n    }\n});\n\n// newData = [2, 4, 6];\n</code></pre>\n"},{"owner":{"reputation":5914,"user_id":2758467,"user_type":"registered","accept_rate":57,"profile_image":"https://i.stack.imgur.com/Sljaj.jpg?s=128&g=1","display_name":"Rajesh Paul","link":"https://stackoverflow.com/users/2758467/rajesh-paul"},"is_accepted":false,"score":30,"last_activity_date":1394275806,"last_edit_date":1394275806,"creation_date":1387988071,"answer_id":20774655,"question_id":9329446,"content_license":"CC BY-SA 3.0","body":"<p>There are three implementations of <code>foreach</code> in <a href=\"http://en.wikipedia.org/wiki/JQuery\">jQuery</a> as follows.</p>\n\n<pre><code>var a = [3,2];\n\n$(a).each(function(){console.log(this.valueOf())}); //Method 1\n$.each(a, function(){console.log(this.valueOf())}); //Method 2\n$.each($(a), function(){console.log(this.valueOf())}); //Method 3\n</code></pre>\n"},{"owner":{"reputation":637,"user_id":2852100,"user_type":"registered","accept_rate":91,"profile_image":"https://www.gravatar.com/avatar/d546b6848487a95dd338cf0c59fbb9fb?s=128&d=identicon&r=PG&f=1","display_name":"Federico Piragua","link":"https://stackoverflow.com/users/2852100/federico-piragua"},"is_accepted":false,"score":30,"last_activity_date":1394275767,"last_edit_date":1394275767,"creation_date":1383359012,"answer_id":19738311,"question_id":9329446,"content_license":"CC BY-SA 3.0","body":"<p>Probably the <code>for(i = 0; i &lt; array.length; i++)</code> loop is not the best choice. Why? If you have this:</p>\n\n<pre><code>var array = new Array();\narray[1] = \"Hello\";\narray[7] = \"World\";\narray[11] = \"!\";\n</code></pre>\n\n<p>The method will call from <code>array[0]</code> to <code>array[2]</code>. First, this will first reference variables you don't even have, second you would not have the variables in the array, and third this will make the code bolder. Look here, it's what I use:</p>\n\n<pre><code>for(var i in array){\n    var el = array[i];\n    //If you want 'i' to be INT just put parseInt(i)\n    //Do something with el\n}\n</code></pre>\n\n<p>And if you want it to be a function, you can do this:</p>\n\n<pre><code>function foreach(array, call){\n    for(var i in array){\n        call(array[i]);\n    }\n}\n</code></pre>\n\n<p>If you want to break, a little more logic:</p>\n\n<pre><code>function foreach(array, call){\n    for(var i in array){\n        if(call(array[i]) == false){\n            break;\n        }\n    }\n}\n</code></pre>\n\n<p>Example:</p>\n\n<pre><code>foreach(array, function(el){\n    if(el != \"!\"){\n        console.log(el);\n    } else {\n        console.log(el+\"!!\");\n    }\n});\n</code></pre>\n\n<p>It returns:</p>\n\n<pre><code>//Hello\n//World\n//!!!\n</code></pre>\n"},{"owner":{"reputation":33671,"user_id":25700,"user_type":"registered","accept_rate":73,"profile_image":"https://www.gravatar.com/avatar/25d524bf8c1ba77469fe3f3de416335a?s=128&d=identicon&r=PG","display_name":"GetFree","link":"https://stackoverflow.com/users/25700/getfree"},"is_accepted":false,"score":15,"last_activity_date":1393724679,"creation_date":1393724679,"answer_id":22122836,"question_id":38987,"content_license":"CC BY-SA 3.0","body":"<p>It's so silly that <code>.update</code> returns nothing.<br>\nI just use a simple helper function to solve the problem:</p>\n\n<pre><code>def merge(dict1,*dicts):\n    for dict2 in dicts:\n        dict1.update(dict2)\n    return dict1\n</code></pre>\n\n<p>Examples:</p>\n\n<pre><code>merge(dict1,dict2)\nmerge(dict1,dict2,dict3)\nmerge(dict1,dict2,dict3,dict4)\nmerge({},dict1,dict2)  # this one returns a new copy\n</code></pre>\n"},{"owner":{"reputation":1251793,"user_id":22656,"user_type":"registered","accept_rate":86,"profile_image":"https://www.gravatar.com/avatar/6d8ebb117e8d83d74ea95fbdd0f87e13?s=128&d=identicon&r=PG","display_name":"Jon Skeet","link":"https://stackoverflow.com/users/22656/jon-skeet"},"is_accepted":false,"score":112,"last_activity_date":1393351932,"last_edit_date":1393351932,"creation_date":1233477094,"answer_id":500435,"question_id":500431,"content_license":"CC BY-SA 3.0","body":"<p>Variables declared globally have a global scope. Variables declared within a function are scoped to that function, and shadow global variables of the same name.</p>\n\n<p>(I'm sure there are many subtleties that real JavaScript programmers will be able to point out in other answers. In particular I came across <a href=\"http://www.digital-web.com/articles/scope_in_javascript/\" rel=\"noreferrer\">this page</a> about what exactly <code>this</code> means at any time. Hopefully <a href=\"http://bowles.byethost3.com/javascript/section6/lesson6.htm#part4\" rel=\"noreferrer\">this more introductory link</a> is enough to get you started though.)</p>\n"},{"owner":{"reputation":221,"user_id":1919271,"user_type":"registered","profile_image":"https://i.stack.imgur.com/WQ4nc.jpg?s=128&g=1","display_name":"Lilla Eli","link":"https://stackoverflow.com/users/1919271/lilla-eli"},"is_accepted":false,"score":4,"last_activity_date":1392904775,"creation_date":1392904775,"answer_id":21910010,"question_id":17289236,"content_license":"CC BY-SA 3.0","body":"<p>I have encountered the same problem and in my case it was happening as a result of this problem:</p>\n\n<p>I had the controllers defined in a separate module (called 'myApp.controllers') and injected to the main app module (called 'myApp') like this:</p>\n\n<pre><code>angular.module('myApp', ['myApp.controllers'])\n</code></pre>\n\n<p>A colleague pushed another controller module in a separate file but with the exact same name as mine (i.e. 'myApp.controllers' ) which caused this error. I think because Angular got confused between those controller modules. However the error message was not very helpful in discovering what is going wrong.</p>\n"},{"owner":{"reputation":7735,"user_id":91189,"user_type":"registered","accept_rate":64,"profile_image":"https://www.gravatar.com/avatar/a15c69fd2b1ed5480b8e9f74eb63c1c9?s=128&d=identicon&r=PG","display_name":"Joseph Gabriel","link":"https://stackoverflow.com/users/91189/joseph-gabriel"},"is_accepted":false,"score":10,"last_activity_date":1392816054,"creation_date":1392816054,"answer_id":21881750,"question_id":3390396,"content_license":"CC BY-SA 3.0","body":"<p>The most reliable way I know of checking for <code>undefined</code> is to use <code>void 0</code>.</p>\n\n<p>This is compatible with newer and older browsers, alike, and cannot be overwritten like <code>window.undefined</code> can in some cases.</p>\n\n<pre><code>if( myVar === void 0){\n    //yup it's undefined\n}\n</code></pre>\n"},{"owner":{"reputation":60665,"user_id":221955,"user_type":"registered","accept_rate":88,"profile_image":"https://www.gravatar.com/avatar/0bc09e1bd45610fc85274cd7bb002c56?s=128&d=identicon&r=PG","display_name":"Michael Anderson","link":"https://stackoverflow.com/users/221955/michael-anderson"},"is_accepted":false,"score":71,"last_activity_date":1391050159,"last_edit_date":1391050159,"creation_date":1307505889,"answer_id":6274093,"question_id":27509,"content_license":"CC BY-SA 3.0","body":"<p>The issue boils down to three cases:</p>\n\n<ol>\n<li>The object has the property and its value is not <code>undefined</code>.</li>\n<li>The object has the property and its value is <code>undefined</code>.</li>\n<li>The object does not have the property.</li>\n</ol>\n\n<p>This tells us something I consider important:</p>\n\n<p><strong>There is a difference between an undefined member and a defined member with an undefined value.</strong></p>\n\n<p>But unhappily <code>typeof obj.foo</code> does not tell us which of the three cases we have. However we can combine this with <code>\"foo\" in obj</code> to distinguish the cases.</p>\n\n<pre><code>                               |  typeof obj.x === 'undefined' | !(\"x\" in obj)\n1.                     { x:1 } |  false                        | false\n2.    { x : (function(){})() } |  true                         | false\n3.                          {} |  true                         | true\n</code></pre>\n\n<p>Its worth noting that these tests are the same for <code>null</code> entries too</p>\n\n<pre><code>                               |  typeof obj.x === 'undefined' | !(\"x\" in obj)\n                    { x:null } |  false                        | false\n</code></pre>\n\n<p>I'd argue that in some cases it makes more sense (and is clearer) to check whether the property is there, than checking whether it is undefined, and the only case where this check will be different is case 2, the rare case of an actual entry in the object with an undefined value.</p>\n\n<p>For example: I've just been refactoring a bunch of code that had a bunch of checks whether an object had a given property.</p>\n\n<pre><code>if( typeof blob.x != 'undefined' ) {  fn(blob.x); }\n</code></pre>\n\n<p>Which was clearer when written without a check for undefined.</p>\n\n<pre><code>if( \"x\" in blob ) { fn(blob.x); }\n</code></pre>\n\n<p>But as has been mentioned these are not exactly the same (but are more than good enough for my needs). </p>\n"},{"owner":{"reputation":43154,"user_id":389745,"user_type":"registered","accept_rate":94,"profile_image":"https://www.gravatar.com/avatar/550d0153dbeee2fcaede98f906e55d02?s=128&d=identicon&r=PG","display_name":"bevacqua","link":"https://stackoverflow.com/users/389745/bevacqua"},"is_accepted":false,"score":10,"last_activity_date":1388667597,"creation_date":1388667597,"answer_id":20883574,"question_id":27509,"content_license":"CC BY-SA 3.0","body":"<p>Compare with <code>void 0</code>, for terseness.</p>\n\n<pre><code>if (foo !== void 0)\n</code></pre>\n\n<p>It's not as verbose as <code>if (typeof foo !== 'undefined')</code></p>\n"},{"owner":{"reputation":1599,"user_id":924079,"user_type":"registered","profile_image":"https://i.stack.imgur.com/GlcTD.jpg?s=128&g=1","display_name":"nmoliveira","link":"https://stackoverflow.com/users/924079/nmoliveira"},"is_accepted":false,"score":35,"last_activity_date":1387369375,"last_edit_date":1387369375,"creation_date":1365553596,"answer_id":15914908,"question_id":9329446,"content_license":"CC BY-SA 3.0","body":"<p>A <strong>forEach</strong> implementation (<a href=\"http://jsfiddle.net/nmoliveira/zNsyB/\" rel=\"noreferrer\">see in jsFiddle</a>):</p>\n\n<pre><code>function forEach(list,callback) {\n  var length = list.length;\n  for (var n = 0; n &lt; length; n++) {\n    callback.call(list[n]);\n  }\n}\n\nvar myArray = ['hello','world'];\n\nforEach(\n  myArray,\n  function(){\n    alert(this); // do something\n  }\n);\n</code></pre>\n"},{"owner":{"reputation":16135,"user_id":925151,"user_type":"registered","accept_rate":51,"profile_image":"https://www.gravatar.com/avatar/b6b0762574ecd4f3a5ea50b737aa08e9?s=128&d=identicon&r=PG&f=1","display_name":"pleerock","link":"https://stackoverflow.com/users/925151/pleerock"},"is_accepted":false,"score":78,"last_activity_date":1386528262,"last_edit_date":1386528262,"creation_date":1386527502,"answer_id":20457243,"question_id":17289236,"content_license":"CC BY-SA 3.0","body":"<p><strong>FIRST.</strong>\ncheck if you have correct <code>controller</code> in the route definitions, same as the controller names that you are defining </p>\n\n<pre><code>communityMod.config(['$routeProvider',\n  function($routeProvider) {\n    $routeProvider.\n      when('/members', {\n        templateUrl: 'modules/community/views/members.html',\n        controller: 'CommunityMembersCtrl'\n      }).\n      otherwise({\n        redirectTo: '/members'\n      });\n  }]);\n\ncommunityMod.controller('CommunityMembersCtrl', ['$scope',\n    function ($scope) {\n        $scope.name = 'Hello community';\n    }]);\n</code></pre>\n\n<p>different controller names in this example will lead to errors, but this example is correct</p>\n\n<p><strong>SECOND</strong> check if you have imported your javascript file:</p>\n\n<p><code>&lt;script src=\"modules/community/controllers/CommunityMembersCtrl.js\"&gt;&lt;/script&gt;</code></p>\n"},{"owner":{"reputation":367,"user_id":3062691,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/0fdbda250dd4c10f2e0a354bc26db42b?s=128&d=identicon&r=PG&f=1","display_name":"upandacross","link":"https://stackoverflow.com/users/3062691/upandacross"},"is_accepted":false,"score":14,"last_activity_date":1386094314,"creation_date":1386094314,"answer_id":20358548,"question_id":38987,"content_license":"CC BY-SA 3.0","body":"<p>The problem I have with solutions listed to date is that, in the merged dictionary, the value for key \"b\" is 10 but, to my way of thinking, it should be 12.\nIn that light, I present the following:</p>\n\n<pre><code>import timeit\n\nn=100000\nsu = \"\"\"\nx = {'a':1, 'b': 2}\ny = {'b':10, 'c': 11}\n\"\"\"\n\ndef timeMerge(f,su,niter):\n    print \"{:4f} sec for: {:30s}\".format(timeit.Timer(f,setup=su).timeit(n),f)\n\ntimeMerge(\"dict(x, **y)\",su,n)\ntimeMerge(\"x.update(y)\",su,n)\ntimeMerge(\"dict(x.items() + y.items())\",su,n)\ntimeMerge(\"for k in y.keys(): x[k] = k in x and x[k]+y[k] or y[k] \",su,n)\n\n#confirm for loop adds b entries together\nx = {'a':1, 'b': 2}\ny = {'b':10, 'c': 11}\nfor k in y.keys(): x[k] = k in x and x[k]+y[k] or y[k]\nprint \"confirm b elements are added:\",x\n</code></pre>\n\n<h1>Results:</h1>\n\n<pre><code>0.049465 sec for: dict(x, **y)\n0.033729 sec for: x.update(y)                   \n0.150380 sec for: dict(x.items() + y.items())   \n0.083120 sec for: for k in y.keys(): x[k] = k in x and x[k]+y[k] or y[k]\n\nconfirm b elements are added: {'a': 1, 'c': 11, 'b': 12}\n</code></pre>\n"},{"owner":{"reputation":260721,"user_id":174728,"user_type":"registered","accept_rate":100,"profile_image":"https://i.stack.imgur.com/eRO75.jpg?s=128&g=1","display_name":"John La Rooy","link":"https://stackoverflow.com/users/174728/john-la-rooy"},"is_accepted":false,"score":9,"last_activity_date":1384336891,"creation_date":1384336891,"answer_id":19950727,"question_id":38987,"content_license":"CC BY-SA 3.0","body":"<pre><code>&gt;&gt;&gt; x = {'a':1, 'b': 2}\n&gt;&gt;&gt; y = {'b':10, 'c': 11}\n&gt;&gt;&gt; x, z = dict(x), x.update(y) or x\n&gt;&gt;&gt; x\n{'a': 1, 'b': 2}\n&gt;&gt;&gt; y\n{'c': 11, 'b': 10}\n&gt;&gt;&gt; z\n{'a': 1, 'c': 11, 'b': 10}\n</code></pre>\n"},{"owner":{"reputation":4014,"user_id":221315,"user_type":"registered","accept_rate":41,"profile_image":"https://www.gravatar.com/avatar/d326b144d04a086ef07b07fc18484be7?s=128&d=identicon&r=PG","display_name":"Pawel Furmaniak","link":"https://stackoverflow.com/users/221315/pawel-furmaniak"},"is_accepted":false,"score":15,"last_activity_date":1382719102,"creation_date":1382719102,"answer_id":19595198,"question_id":336859,"content_license":"CC BY-SA 3.0","body":"<p>If you would use those functions to create objects, you would get:</p>\n\n<pre><code>var objectOne = new functionOne();\nconsole.log(objectOne.__proto__); // prints \"Object {}\" because constructor is an anonymous function\n\nvar objectTwo = new functionTwo();\nconsole.log(objectTwo.__proto__); // prints \"functionTwo {}\" because constructor is a named function\n</code></pre>\n"},{"owner":{"reputation":16737,"user_id":386279,"user_type":"registered","accept_rate":88,"profile_image":"https://www.gravatar.com/avatar/6fb982d491ab166e594d066a8f241850?s=128&d=identicon&r=PG","display_name":"beardc","link":"https://stackoverflow.com/users/386279/beardc"},"is_accepted":false,"score":38,"last_activity_date":1381757249,"last_edit_date":1495542893,"creation_date":1381342148,"answer_id":19279501,"question_id":38987,"content_license":"CC BY-SA 3.0","body":"<p>In python3, the <code>items</code> method <a href=\"http://docs.python.org/dev/whatsnew/3.0.html#views-and-iterators-instead-of-lists\" rel=\"noreferrer\">no longer returns a list</a>, but rather a <em>view</em>, which acts like a set. In this case you'll need to take the set union since concatenating with <code>+</code> won't work:</p>\n\n<pre><code>dict(x.items() | y.items())\n</code></pre>\n\n<p>For python3-like behavior in version 2.7, the <code>viewitems</code> method should work in place of <code>items</code>:</p>\n\n<pre><code>dict(x.viewitems() | y.viewitems())\n</code></pre>\n\n<p>I prefer this notation anyways since it seems more natural to think of it as a set union operation rather than concatenation (as the title shows).</p>\n\n<p><strong>Edit:</strong></p>\n\n<p>A couple more points for python 3. First, note that the <code>dict(x, **y)</code> trick won't work in python 3 unless the keys in <code>y</code> are strings.</p>\n\n<p>Also, Raymond Hettinger's Chainmap <a href=\"https://stackoverflow.com/a/16259217/386279\">answer</a> is pretty elegant, since it can take an arbitrary number of dicts as arguments, but <a href=\"http://docs.python.org/dev/library/collections\" rel=\"noreferrer\">from the docs</a> it looks like it sequentially looks through a list of all the dicts for each lookup:</p>\n\n<blockquote>\n  <p>Lookups search the underlying mappings successively until a key is found.</p>\n</blockquote>\n\n<p>This can slow you down if you have a lot of lookups in your application:</p>\n\n<pre><code>In [1]: from collections import ChainMap\nIn [2]: from string import ascii_uppercase as up, ascii_lowercase as lo; x = dict(zip(lo, up)); y = dict(zip(up, lo))\nIn [3]: chainmap_dict = ChainMap(y, x)\nIn [4]: union_dict = dict(x.items() | y.items())\nIn [5]: timeit for k in union_dict: union_dict[k]\n100000 loops, best of 3: 2.15 µs per loop\nIn [6]: timeit for k in chainmap_dict: chainmap_dict[k]\n10000 loops, best of 3: 27.1 µs per loop\n</code></pre>\n\n<p>So about an order of magnitude slower for lookups. I'm a fan of Chainmap, but looks less practical where there may be many lookups.</p>\n"},{"owner":{"reputation":821,"user_id":1781133,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/573d846241655f2daee24b5a2ce238c0?s=128&d=identicon&r=PG","display_name":"FrostyL","link":"https://stackoverflow.com/users/1781133/frostyl"},"is_accepted":false,"score":1,"last_activity_date":1380976065,"creation_date":1380976065,"answer_id":19197806,"question_id":7975093,"content_license":"CC BY-SA 3.0","body":"<p>I ran into this problem also when including jQuery in my page header, not realizing the host was already including it in the page automatically. So load your page live and check the source to see if jQuery is being linked in. </p>\n"},{"owner":{"reputation":23684,"user_id":292614,"user_type":"registered","accept_rate":91,"profile_image":"https://www.gravatar.com/avatar/7c9ad2f8559150998839e7aee55fbfb7?s=128&d=identicon&r=PG","display_name":"John Strickler","link":"https://stackoverflow.com/users/292614/john-strickler"},"is_accepted":false,"score":595,"last_activity_date":1380373886,"last_edit_date":1380373886,"creation_date":1339102552,"answer_id":10939737,"question_id":950087,"content_license":"CC BY-SA 3.0","body":"<p>If anyone is looking for something more advanced, try out <a href=\"http://requirejs.org/\" rel=\"noreferrer\">RequireJS</a>. You'll get added benefits such as dependency management, better concurrency, and avoid duplication (that is, retrieving a script more than once).</p>\n\n<p>You can write your JavaScript files in \"modules\" and then reference them as dependencies in other scripts. Or you can use RequireJS as a simple \"go get this script\" solution.</p>\n\n<p>Example:</p>\n\n<p>Define dependencies as modules:</p>\n\n<p><strong>some-dependency.js</strong></p>\n\n<pre><code>define(['lib/dependency1', 'lib/dependency2'], function (d1, d2) {\n\n     //Your actual script goes here.   \n     //The dependent scripts will be fetched if necessary.\n\n     return libraryObject;  //For example, jQuery object\n});\n</code></pre>\n\n<p><strong>implementation.js</strong> is your \"main\" JavaScript file that depends on <strong>some-dependency.js</strong></p>\n\n<pre><code>require(['some-dependency'], function(dependency) {\n\n    //Your script goes here\n    //some-dependency.js is fetched.   \n    //Then your script is executed\n});\n</code></pre>\n\n<p>Excerpt from the <a href=\"https://github.com/jrburke/requirejs\" rel=\"noreferrer\">GitHub</a> README:</p>\n\n<blockquote>\n  <p>RequireJS loads plain JavaScript files as well as more defined\n  modules. It is optimized for in-browser use, including in a Web\n  Worker, but it can be used in other JavaScript environments, like\n  Rhino and Node. It implements the Asynchronous Module API.</p>\n  \n  <p>RequireJS uses plain script tags to load modules/files, so it should\n  allow for easy debugging. It can be used simply to load existing\n  JavaScript files, so <strong>you can add it to your existing project without\n  having to re-write your JavaScript files.</strong></p>\n  \n  <p>... </p>\n</blockquote>\n"},{"owner":{"reputation":4392,"user_id":130434,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/cec902f6bd96d83571981b2084fe2cc6?s=128&d=identicon&r=PG","display_name":"Ariel","link":"https://stackoverflow.com/users/130434/ariel"},"is_accepted":false,"score":167,"last_activity_date":1380372950,"last_edit_date":1380372950,"creation_date":1315506146,"answer_id":7352694,"question_id":950087,"content_license":"CC BY-SA 3.0","body":"<p>Another way, that in my opinion is much cleaner, is to make a synchronous Ajax request instead of using a <code>&lt;script&gt;</code> tag. Which is also how <a href=\"http://en.wikipedia.org/wiki/Node.js\">Node.js</a> handles includes.</p>\n\n<p>Here's an example using jQuery:</p>\n\n<pre><code>function require(script) {\n    $.ajax({\n        url: script,\n        dataType: \"script\",\n        async: false,           // &lt;-- This is the key\n        success: function () {\n            // all good...\n        },\n        error: function () {\n            throw new Error(\"Could not load script \" + script);\n        }\n    });\n}\n</code></pre>\n\n<p>You can then use it in your code as you'd usually use an include:</p>\n\n<pre><code>require(\"/scripts/subscript.js\");\n</code></pre>\n\n<p>And be able to call a function from the required script in the next line:</p>\n\n<pre><code>subscript.doSomethingCool(); \n</code></pre>\n"},{"owner":{"reputation":16053,"user_id":58805,"user_type":"registered","accept_rate":62,"profile_image":"https://www.gravatar.com/avatar/9e65438df95dc28b6024e20e11562dc3?s=128&d=identicon&r=PG","display_name":"Calmarius","link":"https://stackoverflow.com/users/58805/calmarius"},"is_accepted":false,"score":32,"last_activity_date":1380372611,"last_edit_date":1380372611,"creation_date":1293483839,"answer_id":4541830,"question_id":950087,"content_license":"CC BY-SA 3.0","body":"<p>You can also assemble your scripts using <a href=\"http://en.wikipedia.org/wiki/PHP\" rel=\"noreferrer\">PHP</a>:</p>\n\n<p>File <code>main.js.php</code>:</p>\n\n<pre><code>&lt;?php\n    header('Content-type:text/javascript; charset=utf-8');\n    include_once(\"foo.js.php\");\n    include_once(\"bar.js.php\");\n?&gt;\n\n// Main JavaScript code goes here\n</code></pre>\n"},{"owner":{"reputation":3942,"user_id":115160,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/23ff1d67fbaa3a28f464e360a95e2587?s=128&d=identicon&r=PG","display_name":"Svitlana Maksymchuk","link":"https://stackoverflow.com/users/115160/svitlana-maksymchuk"},"is_accepted":false,"score":107,"last_activity_date":1380372270,"last_edit_date":1380372270,"creation_date":1244116953,"answer_id":950098,"question_id":950087,"content_license":"CC BY-SA 3.0","body":"<p>It is possible to dynamically generate a JavaScript tag and append it to HTML document from inside other JavaScript code. This will load targeted JavaScript file.</p>\n\n<pre><code>function includeJs(jsFilePath) {\n    var js = document.createElement(\"script\");\n\n    js.type = \"text/javascript\";\n    js.src = jsFilePath;\n\n    document.body.appendChild(js);\n}\n\nincludeJs(\"/path/to/some/file.js\");\n</code></pre>\n"},{"owner":{"reputation":39,"user_id":2670957,"user_type":"unregistered","profile_image":"https://www.gravatar.com/avatar/39dd311a2e9b9585978ea60b2b1d3a60?s=128&d=identicon&r=PG","display_name":"Mig82","link":"https://stackoverflow.com/users/2670957/mig82"},"is_accepted":false,"score":3,"last_activity_date":1376156234,"creation_date":1376156234,"answer_id":18164607,"question_id":500431,"content_license":"CC BY-SA 3.0","body":"<p>Try this curious example. In the example below if a were a numeric initialized at 0, you'd see 0 and then 1. Except a is an object and javascript will pass f1 a pointer of a rather than a copy of it. The result is that you get the same alert both times.</p>\n\n<pre><code>var a = new Date();\nfunction f1(b)\n{\n    b.setDate(b.getDate()+1);\n    alert(b.getDate());\n}\nf1(a);\nalert(a.getDate());\n</code></pre>\n"},{"owner":{"reputation":360,"user_id":2627564,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/82e8a058fcd22d6c8886c2a38e90fb03?s=128&d=identicon&r=PG","display_name":"bertrand","link":"https://stackoverflow.com/users/2627564/bertrand"},"is_accepted":false,"score":26,"last_activity_date":1375015359,"creation_date":1375015359,"answer_id":17908314,"question_id":17289236,"content_license":"CC BY-SA 3.0","body":"<p>I had the same error message (in my case : \"Argument 'languageSelectorCtrl' is not a function, got undefined\").</p>\n\n<p>After some tedious comparison with Angular seed's code, I found out that I had previously removed a reference to the controllers module in app.js. (spot it at <a href=\"https://github.com/angular/angular-seed/blob/master/app/js/app.js\">https://github.com/angular/angular-seed/blob/master/app/js/app.js</a>)</p>\n\n<p>So I had this:</p>\n\n<p><code>angular.module('MyApp', ['MyApp.filters', 'MyApp.services', 'MyApp.directives'])</code></p>\n\n<p>This failed.</p>\n\n<p>And when I added the missing reference:</p>\n\n<p><code>angular.module('MyApp', ['MyApp.filters', 'MyApp.services', 'MyApp.controllers', 'MyApp.directives'])\n</code></p>\n\n<p>The error message disappeared and Angular could instanciate the controllers again.</p>\n"},{"owner":{"reputation":6590,"user_id":375570,"user_type":"registered","accept_rate":71,"profile_image":"https://www.gravatar.com/avatar/e21580d3238dfce3b9b68d8a87108e12?s=128&d=identicon&r=PG","display_name":"Bijou Trouvaille","link":"https://stackoverflow.com/users/375570/bijou-trouvaille"},"is_accepted":false,"score":14,"last_activity_date":1374212959,"creation_date":1374212959,"answer_id":17738920,"question_id":38987,"content_license":"CC BY-SA 3.0","body":"<p>Drawing on ideas here and elsewhere I've comprehended a function:</p>\n\n<pre><code>def merge(*dicts, **kv): \n      return { k:v for d in list(dicts) + [kv] for k,v in d.items() }\n</code></pre>\n\n<p>Usage (tested in python 3):</p>\n\n<pre><code>assert (merge({1:11,'a':'aaa'},{1:99, 'b':'bbb'},foo='bar')==\\\n    {1: 99, 'foo': 'bar', 'b': 'bbb', 'a': 'aaa'})\n\nassert (merge(foo='bar')=={'foo': 'bar'})\n\nassert (merge({1:11},{1:99},foo='bar',baz='quux')==\\\n    {1: 99, 'foo': 'bar', 'baz':'quux'})\n\nassert (merge({1:11},{1:99})=={1: 99})\n</code></pre>\n\n<p>You could use a lambda instead.</p>\n"},{"owner":{"reputation":156520,"user_id":497418,"user_type":"registered","accept_rate":76,"profile_image":"https://www.gravatar.com/avatar/248d820c4cc1b6eb7924c658c45443b5?s=128&d=identicon&r=PG","display_name":"zzzzBov","link":"https://stackoverflow.com/users/497418/zzzzbov"},"is_accepted":false,"score":91,"last_activity_date":1373678301,"last_edit_date":1373678301,"creation_date":1329487225,"answer_id":9329586,"question_id":9329446,"content_license":"CC BY-SA 3.0","body":"<p>Some <a href=\"http://en.wikipedia.org/wiki/C_%28programming_language%29\" rel=\"noreferrer\">C</a>-style languages use <code>foreach</code> to loop through enumerations. In JavaScript this is done with the <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Statements/for...in\" rel=\"noreferrer\"><code>for..in</code> loop structure</a>:</p>\n\n<pre><code>var index,\n    value;\nfor (index in obj) {\n    value = obj[index];\n}\n</code></pre>\n\n<p>There is a catch. <code>for..in</code> will loop through each of the object's enumerable members, and the members on its prototype. To avoid reading values that are inherited through the object's prototype, simply check if the property belongs to the object:</p>\n\n<pre><code>for (i in obj) {\n    if (obj.hasOwnProperty(i)) {\n        //do stuff\n    }\n}\n</code></pre>\n\n<p>Additionally, <a href=\"https://en.wikipedia.org/wiki/ECMAScript#ECMAScript.2C_5th_Edition\" rel=\"noreferrer\">ECMAScript 5</a> has added a <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/forEach\" rel=\"noreferrer\"><code>forEach</code></a> method to <code>Array.prototype</code> which can be used to enumerate over an array using a calback (the polyfill is in the docs so you can still use it for older browsers):</p>\n\n<pre><code>arr.forEach(function (val, index, theArray) {\n    //do stuff\n});\n</code></pre>\n\n<p>It's important to note that <code>Array.prototype.forEach</code> doesn't break when the callback returns <code>false</code>. <a href=\"http://en.wikipedia.org/wiki/JQuery\" rel=\"noreferrer\">jQuery</a> and <a href=\"http://en.wikipedia.org/wiki/Underscore.js\" rel=\"noreferrer\">Underscore.js</a> provide their own variations on <code>each</code> to provide loops that can be short-circuited.</p>\n"},{"owner":{"reputation":990,"user_id":918264,"user_type":"registered","accept_rate":75,"profile_image":"https://www.gravatar.com/avatar/18951a822df6136dbe65ebf2663f35c6?s=128&d=identicon&r=PG","display_name":"joidegn","link":"https://stackoverflow.com/users/918264/joidegn"},"is_accepted":false,"score":25,"last_activity_date":1373678198,"last_edit_date":1495540056,"creation_date":1329487109,"answer_id":9329551,"question_id":9329446,"content_license":"CC BY-SA 3.0","body":"<p>There isn't any <code>for each</code> loop in native <a href=\"http://en.wikipedia.org/wiki/JavaScript\" rel=\"noreferrer\">JavaScript</a>. You can either use libraries to get this functionality (I recommend <a href=\"http://en.wikipedia.org/wiki/Underscore.js\" rel=\"noreferrer\">Underscore.js</a>), use a simple <code>for</code> in loop.</p>\n\n<pre><code>for (var instance in objects) {\n   ...\n}\n</code></pre>\n\n<p>However, note that there may be reasons to use an even simpler <code>for</code> loop (see Stack Overflow question <em><a href=\"https://stackoverflow.com/questions/500504\">Why is using “for…in” with array iteration such a bad idea?</a></em>)</p>\n\n<pre><code>var instance;\nfor (var i=0; i &lt; objects.length; i++) {\n    var instance = objects[i];\n    ...\n}\n</code></pre>\n"},{"owner":{"reputation":14049,"user_id":217588,"user_type":"registered","accept_rate":88,"profile_image":"https://www.gravatar.com/avatar/99e6460882c120b87a7285bfe9e43e59?s=128&d=identicon&r=PG","display_name":"El Yobo","link":"https://stackoverflow.com/users/217588/el-yobo"},"is_accepted":true,"score":240,"last_activity_date":1369786831,"last_edit_date":1369786831,"creation_date":1320201215,"answer_id":7975203,"question_id":7975093,"content_license":"CC BY-SA 3.0","body":"<p>Wordpress uses jQuery in <a href=\"http://api.jquery.com/jQuery.noConflict/\">noConflict</a> mode by default.  You need to reference it using <code>jQuery</code> as the variable name, not <code>$</code>, e.g. use</p>\n\n<pre><code>jQuery(document);\n</code></pre>\n\n<p>instead of</p>\n\n<pre><code>$(document);\n</code></pre>\n\n<p>You can easily wrap this up in a self executing function so that <code>$</code> refers to jQuery again (and avoids polluting the global namespace as well), e.g.</p>\n\n<pre><code>(function ($) {\n   $(document);\n}(jQuery));\n</code></pre>\n"},{"owner":{"reputation":22286,"user_id":1141493,"user_type":"registered","accept_rate":99,"profile_image":"https://www.gravatar.com/avatar/25452a0e44babf480d85311e5ece4421?s=128&d=identicon&r=PG","display_name":"kiriloff","link":"https://stackoverflow.com/users/1141493/kiriloff"},"is_accepted":false,"score":5,"last_activity_date":1369645460,"creation_date":1369645460,"answer_id":16769722,"question_id":38987,"content_license":"CC BY-SA 3.0","body":"<p>Using  a dict comprehension, you may</p>\n\n<pre><code>x = {'a':1, 'b': 2}\ny = {'b':10, 'c': 11}\n\ndc = {xi:(x[xi] if xi not in list(y.keys()) \n           else y[xi]) for xi in list(x.keys())+(list(y.keys()))}\n</code></pre>\n\n<p>gives</p>\n\n<pre><code>&gt;&gt;&gt; dc\n{'a': 1, 'c': 11, 'b': 10}\n</code></pre>\n\n<p>Note the syntax for <code>if else</code> in comprehension </p>\n\n<pre><code>{ (some_key if condition else default_key):(something_if_true if condition \n          else something_if_false) for key, value in dict_.items() }\n</code></pre>\n"},{"owner":{"reputation":1161,"user_id":1180508,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/6eb24c4fa68c9ea81de1d3400fd1d087?s=128&d=identicon&r=PG","display_name":"austincheney","link":"https://stackoverflow.com/users/1180508/austincheney"},"is_accepted":false,"score":9,"last_activity_date":1363887071,"creation_date":1363887071,"answer_id":15554279,"question_id":500431,"content_license":"CC BY-SA 3.0","body":"<p>I found that many people new to JavaScript have trouble understanding that inheritance is available by default in the language and that function scope is the only scope, so far. I provided an extension to a beautifier I wrote at the end of last year called JSPretty. The feature colors function scope in the code and always associates a color to all variables declared in that scope. Closure is visually demonstrated when a variable with a color from one scope is used in a different scope.</p>\n\n<p>Try the feature at:</p>\n\n<ul>\n<li><a href=\"http://prettydiff.com/jspretty.xhtml?c=white&amp;jsscope\" rel=\"noreferrer\">http://prettydiff.com/jspretty.xhtml?c=white&amp;jsscope</a></li>\n</ul>\n\n<p>See a demo at:</p>\n\n<ul>\n<li><a href=\"http://prettydiff.com/jspretty.xhtml?c=white&amp;jsscope&amp;s=http://prettydiff.com/lib/markup_beauty.js\" rel=\"noreferrer\">http://prettydiff.com/jspretty.xhtml?c=white&amp;jsscope&amp;s=http://prettydiff.com/lib/markup_beauty.js</a></li>\n</ul>\n\n<p>View the code at:</p>\n\n<ul>\n<li><a href=\"http://prettydiff.com/lib/jspretty.js\" rel=\"noreferrer\">http://prettydiff.com/lib/jspretty.js</a></li>\n<li><a href=\"https://github.com/austincheney/Pretty-Diff/blob/master/lib/jspretty.js\" rel=\"noreferrer\">https://github.com/austincheney/Pretty-Diff/blob/master/lib/jspretty.js</a></li>\n</ul>\n\n<p>Currently the feature offers support for a depth of 16 nested functions, but currently does not color global variables.</p>\n"},{"owner":{"reputation":189,"user_id":2153910,"user_type":"registered","profile_image":"https://i.stack.imgur.com/hh9fQ.jpg?s=128&g=1","display_name":"Robert A","link":"https://stackoverflow.com/users/2153910/robert-a"},"is_accepted":false,"score":5,"last_activity_date":1363281990,"last_edit_date":1363281990,"creation_date":1362923726,"answer_id":15322985,"question_id":950087,"content_license":"CC BY-SA 3.0","body":"<pre><code>var s=[\"Hscript.js\",\"checkRobert.js\",\"Hscript.js\"];\nfor(i=0;i&lt;s.length;i++){\n  var script=document.createElement(\"script\");\n  script.type=\"text/javascript\";\n  script.src=s[i];\n  document.getElementsByTagName(\"head\")[0].appendChild(script)\n};\n</code></pre>\n"},{"owner":{"reputation":15890,"user_id":30316,"user_type":"registered","accept_rate":82,"profile_image":"https://www.gravatar.com/avatar/01d79f038deccf8820e98fb2e3b08f9b?s=128&d=identicon&r=PG","display_name":"eljenso","link":"https://stackoverflow.com/users/30316/eljenso"},"is_accepted":false,"score":37,"last_activity_date":1360168160,"creation_date":1360168160,"answer_id":14734001,"question_id":336859,"content_license":"CC BY-SA 3.0","body":"<p>A function declaration and a function expression assigned to a variable behave the same once the binding is established.</p>\n\n<p>There is a difference however at <em>how</em> and <em>when</em> the function object is actually associated with its variable. This difference is due to the mechanism called <em>variable hoisting</em> in JavaScript.</p>\n\n<p>Basically, all function declarations and variable declarations are hoisted to the top of the <em>function</em> in which the declaration occurs (this is why we say that JavaScript has <em>function scope</em>).</p>\n\n<ul>\n<li><p>When a function declaration is hoisted, the function body \"follows\"\nso when the function body is evaluated, the variable will immediately\nbe bound to a function object.</p></li>\n<li><p>When a variable declaration is hoisted, the initialization does <em>not</em>\nfollow, but is \"left behind\". The variable is initialized to\n<code>undefined</code> at the start of the function body, and will be <em>assigned</em>\na value at its original location in the code. (Actually, it will be assigned a value at <em>every</em> location where a declaration of a variable with the same name occurs.)</p></li>\n</ul>\n\n<p>The order of hoisting is also important: function declarations take precedence over variable declarations with the same name, and the last function declaration takes precedence over previous function declarations with the same name.</p>\n\n<p>Some examples...</p>\n\n<pre><code>var foo = 1;\nfunction bar() {\n  if (!foo) {\n    var foo = 10 }\n  return foo; }\nbar() // 10\n</code></pre>\n\n<p>Variable <code>foo</code> is hoisted to the top of the function, initialized to <code>undefined</code>, so that <code>!foo</code> is <code>true</code>, so <code>foo</code> is assigned <code>10</code>. The <code>foo</code> outside of <code>bar</code>'s scope plays no role and is untouched. </p>\n\n<pre><code>function f() {\n  return a; \n  function a() {return 1}; \n  var a = 4;\n  function a() {return 2}}\nf()() // 2\n\nfunction f() {\n  return a;\n  var a = 4;\n  function a() {return 1};\n  function a() {return 2}}\nf()() // 2\n</code></pre>\n\n<p>Function declarations take precedence over variable declarations, and the last function declaration \"sticks\".</p>\n\n<pre><code>function f() {\n  var a = 4;\n  function a() {return 1}; \n  function a() {return 2}; \n  return a; }\nf() // 4\n</code></pre>\n\n<p>In this example <code>a</code> is initialized with the function object resulting from evaluating the second function declaration, and then is assigned <code>4</code>.</p>\n\n<pre><code>var a = 1;\nfunction b() {\n  a = 10;\n  return;\n  function a() {}}\nb();\na // 1\n</code></pre>\n\n<p>Here the function declaration is hoisted first, declaring and initializing variable <code>a</code>. Next, this variable is assigned <code>10</code>. In other words: the assignment does not assign to outer variable <code>a</code>.</p>\n"}],"has_more":true,"quota_max":300,"quota_remaining":268}
