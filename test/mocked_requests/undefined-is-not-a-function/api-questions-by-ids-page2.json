{"items":[{"owner":{"reputation":303,"user_id":9272467,"user_type":"registered","profile_image":"https://lh6.googleusercontent.com/-LtrJ4zjGNCc/AAAAAAAAAAI/AAAAAAAAADc/xLow5DPEOyQ/photo.jpg?sz=128","display_name":"Peko Chan","link":"https://stackoverflow.com/users/9272467/peko-chan"},"is_accepted":false,"score":0,"last_activity_date":1567541671,"last_edit_date":1567541671,"creation_date":1544612789,"answer_id":53741678,"question_id":9329446,"content_license":"CC BY-SA 4.0","body":"<p>I come from Python, and I found this way much clearer.</p>\n\n<p>theArray being the array, and <code>instance</code> being the elements of the array:</p>\n\n<pre><code>for (let instance of theArray)\n{\n    console.log(\"The instance\", instance);\n}\n</code></pre>\n\n<p>or</p>\n\n<pre><code>for (instance in theArray)\n{\n    console.log(\"The instance\", instance);\n}\n</code></pre>\n\n<p>compare to:</p>\n\n<pre><code>theArray.forEach(function(instance) {\n    console.log(instance);\n});\n</code></pre>\n\n<p>But at the end of the day both are doing the same thing.</p>\n"},{"owner":{"reputation":191,"user_id":6871892,"user_type":"registered","profile_image":"https://lh5.googleusercontent.com/-XYRXPe23CQg/AAAAAAAAAAI/AAAAAAAAAD8/8foS-G8TSTI/photo.jpg?sz=128","display_name":"arul prince","link":"https://stackoverflow.com/users/6871892/arul-prince"},"is_accepted":false,"score":3,"last_activity_date":1567541257,"last_edit_date":1567541257,"creation_date":1548076099,"answer_id":54290734,"question_id":9329446,"content_license":"CC BY-SA 4.0","body":"<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>// Looping through arrays using the foreach ECMAScript 6 way\r\n\r\nvar data = new Array(1, 2, 3, 4, 5);\r\ndata.forEach((val,index) =&gt; {\r\n    console.log(\"index: \", index); // Index\r\n    console.log(\"value: \", val); // Value\r\n});</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"owner":{"reputation":478,"user_id":10686697,"user_type":"registered","profile_image":"https://i.stack.imgur.com/SHFbh.jpg?s=128&g=1","display_name":"alejoko","link":"https://stackoverflow.com/users/10686697/alejoko"},"is_accepted":false,"score":2,"last_activity_date":1567541125,"last_edit_date":1567541125,"creation_date":1549120380,"answer_id":54494357,"question_id":9329446,"content_license":"CC BY-SA 4.0","body":"<p>If you want to keep your code in the functional way, use <code>map</code>:</p>\n\n<pre><code>theArray.map(instance =&gt; do_something);\n</code></pre>\n\n<p>In this way you will generate a new array to future operation and will skip any not desirable side effect.</p>\n"},{"owner":{"reputation":156,"user_id":7990167,"user_type":"registered","profile_image":"https://lh4.googleusercontent.com/-V49uhs3L7g4/AAAAAAAAAAI/AAAAAAAAABk/Sw2lqeWX358/photo.jpg?sz=128","display_name":"subhashish negi","link":"https://stackoverflow.com/users/7990167/subhashish-negi"},"is_accepted":false,"score":6,"last_activity_date":1567541047,"last_edit_date":1567541047,"creation_date":1552053849,"answer_id":55064854,"question_id":9329446,"content_license":"CC BY-SA 4.0","body":"<p>If you want to loop through an array of objects with the arrow function:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>let arr = [{name:'john', age:50}, {name:'clark', age:19}, {name:'mohan', age:26}];\r\n\r\narr.forEach((person)=&gt;{\r\n  console.log('I am ' + person.name + ' and I am ' + person.age + ' old');\r\n})</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"owner":{"reputation":341,"user_id":9138047,"user_type":"registered","profile_image":"https://lh5.googleusercontent.com/-MGrbJptryHA/AAAAAAAAAAI/AAAAAAAAABA/F9rD8OwkFMA/photo.jpg?sz=128","display_name":"Ayush Jain","link":"https://stackoverflow.com/users/9138047/ayush-jain"},"is_accepted":false,"score":1,"last_activity_date":1567540835,"last_edit_date":1567540835,"creation_date":1552294575,"answer_id":55098213,"question_id":9329446,"content_license":"CC BY-SA 4.0","body":"<p>You can use the forEach() API (provided by JavaScript) which accepts a function as a callback and runs one time for each element present inside the array.</p>\n\n<p>See <em><a href=\"https://fullstackgeek.blogspot.com/2019/01/arrays-in-javascript-part-2.html\" rel=\"nofollow noreferrer\">Arrays in JavaScript: Part 2</a></em>.</p>\n"},{"owner":{"reputation":43435,"user_id":101811,"user_type":"registered","accept_rate":91,"profile_image":"https://www.gravatar.com/avatar/088051e83a001ef0336038c79a41ac6a?s=128&d=identicon&r=PG","display_name":"PatrikAkerstrand","link":"https://stackoverflow.com/users/101811/patrikakerstrand"},"is_accepted":false,"score":541,"last_activity_date":1567540641,"last_edit_date":1567540641,"creation_date":1329486911,"answer_id":9329496,"question_id":9329446,"content_license":"CC BY-SA 4.0","body":"<p><strong>Note</strong>: This answer is hopelessly out-of-date. For a more modern approach, look at <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" rel=\"noreferrer\">the methods available on an array</a>. Methods of interest might be:</p>\n\n<ul>\n<li>forEach</li>\n<li>map</li>\n<li>filter</li>\n<li>zip</li>\n<li>reduce</li>\n<li>every</li>\n<li>some</li>\n</ul>\n\n<hr>\n\n<p>The standard way to iterate an array in <a href=\"http://en.wikipedia.org/wiki/JavaScript\" rel=\"noreferrer\">JavaScript</a> is a vanilla <code>for</code>-loop:</p>\n\n<pre><code>var length = arr.length,\n    element = null;\nfor (var i = 0; i &lt; length; i++) {\n  element = arr[i];\n  // Do something with element\n}\n</code></pre>\n\n<p>Note, however, that this approach is only good if you have a dense array, and each index is occupied by an element. If the array is sparse, then you can run into performance problems with this approach, since you will iterate over a lot of indices that do not <em>really</em> exist in the array. In this case, a <code>for .. in</code>-loop might be a better idea. <strong>However</strong>, you must use the appropriate safeguards to ensure that only the desired properties of the array (that is, the array elements) are acted upon, since the <code>for..in</code>-loop will also be enumerated in legacy browsers, or if the additional properties are defined as <code>enumerable</code>.</p>\n\n<p>In <a href=\"https://en.wikipedia.org/wiki/ECMAScript#ECMAScript.2C_5th_Edition\" rel=\"noreferrer\">ECMAScript 5</a> there will be a forEach method on the array prototype, but it is not supported in legacy browsers. So to be able to use it consistently you must either have an environment that supports it (for example, <a href=\"http://en.wikipedia.org/wiki/Node.js\" rel=\"noreferrer\">Node.js</a> for server side JavaScript), or use a \"Polyfill\". The Polyfill for this functionality is, however, trivial and since it makes the code easier to read, it is a good polyfill to include.</p>\n"},{"owner":{"reputation":5669,"user_id":4170935,"user_type":"registered","accept_rate":52,"profile_image":"https://i.stack.imgur.com/J9I6b.png?s=128&g=1","display_name":"Yairopro","link":"https://stackoverflow.com/users/4170935/yairopro"},"is_accepted":false,"score":9,"last_activity_date":1562051906,"last_edit_date":1562051906,"creation_date":1493910996,"answer_id":43786851,"question_id":950087,"content_license":"CC BY-SA 4.0","body":"<p>Here's a workaround <strong>for browsers</strong> (not Node.js) using HTML imports.</p>\n\n<p>First, all JavaScript classes and scripts are not in <code>.js</code> files, but in <code>.js.html</code> files (the <strong>.js</strong>.<code>html</code> is just to recognize between HTML pages and complete JavaScript script/classes), inside <code>&lt;script&gt;</code> tags, like this:</p>\n\n<p><code>MyClass.js.html</code>:</p>\n\n<pre><code>&lt;script&gt;\n   class MyClass {\n\n      // Your code here..\n\n   }\n\n&lt;/script&gt;\n</code></pre>\n\n<p>Then if you wish to import your class, you just need to use HTML imports:</p>\n\n<pre><code>&lt;link rel=\"import\" href=\"relative/path/to/MyClass.js.html\"/&gt;\n\n&lt;script&gt;\n   var myClass = new MyClass();\n   // Your code here..\n&lt;/script&gt;\n</code></pre>\n\n<h1>EDIT : HTML imports will be dropped</h1>\n\n<p>HTML imports are dropped, in favor of ES6 modules. \n<strong>You should use ES6 modules.</strong></p>\n"},{"owner":{"reputation":18647,"user_id":8059459,"user_type":"registered","accept_rate":90,"profile_image":"https://www.gravatar.com/avatar/9f0fc0fd607fc44a4597cacb7f034ba6?s=128&d=identicon&r=PG&f=1","display_name":"Willem van der Veen","link":"https://stackoverflow.com/users/8059459/willem-van-der-veen"},"is_accepted":false,"score":1,"last_activity_date":1561025196,"creation_date":1561025196,"answer_id":56683631,"question_id":336859,"content_license":"CC BY-SA 4.0","body":"<h2>Difference function declaration and function expression:</h2>\n\n<p>Javascript has first class functions. This means that they can be treated just like any other variable. Functions can be passed as arguments in a function, be returned from a function, <strong>and can be stored in variables</strong>.</p>\n\n<p>However storing function in a variable (<strong>function expression</strong>) isn't the only way to create a function, this can also be done via a <strong>function declaration</strong>. Here are the key differences:</p>\n\n<ol>\n<li>Function expressions can be anonymous whereas a function declaration must have a name. </li>\n<li>Both have a name property which is used to identify the function. A function expression's name property is the name of the variable which it is bound to, whereas the name of a function declaration is simply the given name.</li>\n<li>Function declarations are hoisted whereas, function expressions are not. Only the variable is hoisted to have the value of <code>undefined</code>.</li>\n</ol>\n\n<p>Here is an example:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>try {\r\n  functionOne();\r\n} catch (e) {\r\n  console.log('i cant run because im not hoisted');\r\n}\r\n\r\nfunctionTwo();\r\n\r\n// function expression, does not get hoisted\r\nlet functionOne = function randomName() {\r\n    // Some code\r\n};\r\n\r\n// function declaration, gets hoisted\r\nfunction functionTwo() {\r\n   console.log('I get hoisted');\r\n}\r\n\r\ntry {\r\n  randomName(); // this isn't the proper name, it is functionOne\r\n} catch (e) {\r\n  console.log('You cant call me with randomName my name is function one');\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>:</p>\n"},{"owner":{"reputation":526,"user_id":4466229,"user_type":"registered","profile_image":"https://i.stack.imgur.com/sBaHr.png?s=128&g=1","display_name":"vikas0713","link":"https://stackoverflow.com/users/4466229/vikas0713"},"is_accepted":false,"score":5,"last_activity_date":1560391849,"last_edit_date":1560391849,"creation_date":1559322627,"answer_id":56399216,"question_id":38987,"content_license":"CC BY-SA 4.0","body":"<p>For Python 3:</p>\n\n<pre><code>from collections import ChainMap\na = {\"a\":1, \"b\":2}\nb = {\"c\":5, \"d\":8}\ndict(ChainMap(a, b))  # {\"a\":1, \"b\":2, \"c\":5, \"d\":8}\n</code></pre>\n\n<p>If you have the same key in both dictionaries, <code>ChainMap</code> will use the first key's value and ignores the second key's value. \nCheers!</p>\n"},{"owner":{"reputation":16163,"user_id":1188377,"user_type":"registered","accept_rate":53,"profile_image":"https://www.gravatar.com/avatar/63f3c02db51b338549e6e7aff4afbb36?s=128&d=identicon&r=PG","display_name":"Zenexer","link":"https://stackoverflow.com/users/1188377/zenexer"},"is_accepted":false,"score":66,"last_activity_date":1557352611,"last_edit_date":1557352611,"creation_date":1383281559,"answer_id":19721006,"question_id":3390396,"content_license":"CC BY-SA 4.0","body":"<h1>Update 2018-07-25</h1>\n\n<p>It's been nearly five years since this post was first made, and JavaScript has come a long way.  In repeating the tests in the original post, I found no consistent difference between the following test methods:</p>\n\n<ul>\n<li><code>abc === undefined</code></li>\n<li><code>abc === void 0</code></li>\n<li><code>typeof abc == 'undefined'</code></li>\n<li><code>typeof abc === 'undefined'</code></li>\n</ul>\n\n<p>Even when I modified the tests to prevent Chrome from optimizing them away, the differences were insignificant.  As such, I'd now recommend <code>abc === undefined</code> for clarity.</p>\n\n<p>Relevant content from <code>chrome://version</code>:</p>\n\n<ul>\n<li>Google Chrome: 67.0.3396.99 (Official Build) (64-bit) (cohort: Stable)</li>\n<li>Revision: a337fbf3c2ab8ebc6b64b0bfdce73a20e2e2252b-refs/branch-heads/3396@{#790}</li>\n<li>OS: Windows</li>\n<li>JavaScript: V8 6.7.288.46</li>\n<li>User Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36</li>\n</ul>\n\n<h1>Original post 2013-11-01</h1>\n\n<p>In Google Chrome, the following was ever so slightly faster than a <code>typeof</code> test:</p>\n\n<pre><code>if (abc === void 0) {\n    // Undefined\n}\n</code></pre>\n\n<p>The difference was negligible.  However, this code is more concise, and clearer at a glance to someone who knows what <code>void 0</code> means. Note, however, that <code>abc</code> <strong>must still be declared</strong>.</p>\n\n<p>Both <code>typeof</code> and <code>void</code> were significantly faster than comparing directly against <code>undefined</code>.  I used the following test format in the Chrome developer console:</p>\n\n<pre><code>var abc;\nstart = +new Date();\nfor (var i = 0; i &lt; 10000000; i++) {\n    if (TEST) {\n        void 1;\n    }\n}\nend = +new Date();\nend - start;\n</code></pre>\n\n<p>The results were as follows:</p>\n\n<pre><code>Test: | abc === undefined      abc === void 0      typeof abc == 'undefined'\n------+---------------------------------------------------------------------\nx10M  |     13678 ms               9854 ms                 9888 ms\n  x1  |    1367.8 ns              985.4 ns                988.8 ns\n</code></pre>\n\n<p>Note that the first row is in <em>milli</em>seconds, while the second row is in <em>nano</em>seconds.  A difference of 3.4 nanoseconds is nothing.  The times were pretty consistent in subsequent tests.</p>\n"},{"owner":{"reputation":583,"user_id":9095122,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/8d362b2b33a8aade6c562abb53958632?s=128&d=identicon&r=PG&f=1","display_name":"Nitesh Ranjan","link":"https://stackoverflow.com/users/9095122/nitesh-ranjan"},"is_accepted":false,"score":1,"last_activity_date":1553787858,"last_edit_date":1553787858,"creation_date":1539889027,"answer_id":52880785,"question_id":336859,"content_license":"CC BY-SA 4.0","body":"<p>One important point to note is :-</p>\n\n<p>let there are two functions :-</p>\n\n<pre><code>sum(1,2);\n\nconst sum = function(first, second) {\n  return first + second;\n}\n</code></pre>\n\n<p>In above case, it will give error that sum is not defined, but</p>\n\n<pre><code>sum(1,2);\n\nfunction sum(first, second) {\n  return first + second;\n}\n</code></pre>\n\n<p>This function will not any error as <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Hoisting\" rel=\"nofollow noreferrer\">Hoisting</a> will take place in this case.</p>\n"},{"owner":{"reputation":1273,"user_id":6798201,"user_type":"registered","profile_image":"https://i.stack.imgur.com/2jruH.jpg?s=128&g=1","display_name":"AlienKevin","link":"https://stackoverflow.com/users/6798201/alienkevin"},"is_accepted":false,"score":3,"last_activity_date":1552606005,"last_edit_date":1552606005,"creation_date":1551714428,"answer_id":54986702,"question_id":950087,"content_license":"CC BY-SA 4.0","body":"<h1>Dynamically Loading Multiple Scripts In Order</h1>\n\n<p>The above function works fine if you are loading only one script or you don't care about the loading order of multiple scripts. If you have some scripts that depends on others, you need to use <a href=\"https://javascript.info/promise-basics\" rel=\"nofollow noreferrer\">Promise</a> to specify the order of loading. The reason behind this is Javascript loads resources like scripts and images asynchronously. The loading sequence does not depends on the sequence of asynchronous calls, meaning script1 will not be guaranteed to load before script2 even if you call <code>dynamicallyLoadScript(\"scrip1\")</code> before calling <code>dynamicallyLoadScript(\"scrip2\")</code></p>\n\n<p>So here's another version of dynamicallyLoadScript that guarantees loading order:</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>// Based on: https://javascript.info/promise-basics#example-loadscript\nfunction dynamicallyLoadScript(url) {\n        return new Promise(function(resolve, reject) {\n        var script = document.createElement(\"script\");\n        script.src = url;\n        script.onload = resolve;\n        script.onerror = () =&gt; reject(new Error(`Error when loading ${url}!`));\n        document.body.appendChild(script);\n    });\n</code></pre>\n\n<p>For more on Promises, see <a href=\"https://javascript.info/promise-basics\" rel=\"nofollow noreferrer\">this excellent page</a>.</p>\n\n<p>The usage of this new dynamicallyLoadScript is very simple:</p>\n\n\n\n<pre><code>dynamicallyLoadScript(\"script1.js\")\n.then(() =&gt; dynamicallyLoadScript(\"script2.js\"))\n.then(() =&gt; dynamicallyLoadScript(\"script3.js\"))\n.then(() =&gt; dynamicallyLoadScript(\"script4.js\"))\n.then(() =&gt; dynamicallyLoadScript(\"script5.js\"))\n//...\n</code></pre>\n\n<p>Now the scripts are loaded in the order of script1.js, script2.js, script3.js, etc. </p>\n\n<h3>Run dependent code after script loads</h3>\n\n<p>In addition, you can immediately run code that uses the scripts after they are loaded. Just add another <code>.then</code> after the loading the script:</p>\n\n\n\n<pre><code>dynamicallyLoadScript(\"script1.js\")\n.then(() =&gt; dynamicallyLoadScript(\"script2.js\"))\n.then(() =&gt; foo()) // foo can be a function defined in either script1, script2\n.then(() =&gt; dynamicallyLoadScript(\"script3.js\"))\n.then(() =&gt; {\n     if (var1){ // var1 can be a global variable defined in either script1, script2, or script3\n          bar(var1); // bar can be a function defined in either script1, script2, or script3\n     } else {\n          foo(var1);\n     }\n})\n//more .then chains...\n</code></pre>\n\n<hr>\n\n<h3>Handle loading errors</h3>\n\n<p>To display unhandled promise rejections (errors loading scripts, etc), put this <code>unhandledrejection</code> event listener at the top of your code:</p>\n\n\n\n<pre><code>// Based on: https://javascript.info/promise-error-handling#unhandled-rejections\nwindow.addEventListener('unhandledrejection', function(event) {\n     // the event object has two special properties:\n     console.error(event.promise);// the promise that generated the error\n     console.error(event.reason); // the unhandled error object\n});\n</code></pre>\n\n<p>Now you will be notified of any script loading errors.</p>\n\n<hr>\n\n<h3>Shortcut Function</h3>\n\n<p>If you are loading a lot of scripts without executing code immediately after loading, this shorthand function may come in handy:</p>\n\n\n\n<pre><code>function dynamicallyLoadScripts(urls){\n        if (urls.length === 0){\n            return;\n        }\n        let promise = dynamicallyLoadScript(urls[0]);\n        urls.slice(1).forEach(url =&gt; {\n            promise = promise.then(() =&gt; dynamicallyLoadScript(url));\n        });\n    }\n</code></pre>\n\n<p>To use it, just pass in an array of script urls like this:</p>\n\n\n\n<pre><code>const scriptURLs = [\"dist/script1.js\", \"dist/script2.js\", \"dist/script3.js\"];\ndynamicallyLoadScripts(scriptURLs);\n</code></pre>\n\n<p>The scripts will be loaded in the order they appear in the array.</p>\n"},{"owner":{"reputation":106516,"user_id":364696,"user_type":"registered","profile_image":"https://i.stack.imgur.com/7eBCp.jpg?s=128&g=1","display_name":"ShadowRanger","link":"https://stackoverflow.com/users/364696/shadowranger"},"is_accepted":false,"score":13,"last_activity_date":1551376162,"last_edit_date":1551376162,"creation_date":1551374182,"answer_id":54930992,"question_id":38987,"content_license":"CC BY-SA 4.0","body":"<p>There will be a new option when Python 3.8 releases (<a href=\"https://www.python.org/dev/peps/pep-0569/#release-schedule\" rel=\"noreferrer\">scheduled for 20 October, 2019</a>), thanks to <a href=\"https://www.python.org/dev/peps/pep-0572/\" rel=\"noreferrer\">PEP 572: Assignment Expressions</a>. The new assignment expression operator <code>:=</code> allows you to assign the result of the <code>copy</code> and still use it to call <code>update</code>, leaving the combined code a single expression, rather than two statements, changing:</p>\n\n<pre><code>newdict = dict1.copy()\nnewdict.update(dict2)\n</code></pre>\n\n<p>to:</p>\n\n<pre><code>(newdict := dict1.copy()).update(dict2)\n</code></pre>\n\n<p>while behaving identically in every way. If you must also return the resulting <code>dict</code> (you asked for an expression returning the <code>dict</code>; the above creates and assigns to <code>newdict</code>, but doesn't return it, so you couldn't use it to pass an argument to a function as is, a la <code>myfunc((newdict := dict1.copy()).update(dict2))</code>), then just add <code>or newdict</code> to the end (since <code>update</code> returns <code>None</code>, which is falsy, it will then evaluate and return <code>newdict</code> as the result of the expression):</p>\n\n<pre><code>(newdict := dict1.copy()).update(dict2) or newdict\n</code></pre>\n\n<p><strong>Important caveat:</strong> In general, I'd discourage this approach in favor of:</p>\n\n<pre><code>newdict = {**dict1, **dict2}\n</code></pre>\n\n<p>The unpacking approach is clearer (to anyone who knows about generalized unpacking in the first place, <a href=\"https://www.python.org/dev/peps/pep-0448/\" rel=\"noreferrer\">which you should</a>), doesn't require a name for the result at all (so it's much more concise when constructing a temporary that is immediately passed to a function or included in a <code>list</code>/<code>tuple</code> literal or the like), and is almost certainly faster as well, being (on CPython) roughly equivalent to:</p>\n\n<pre><code>newdict = {}\nnewdict.update(dict1)\nnewdict.update(dict2)\n</code></pre>\n\n<p>but done at the C layer, using the concrete <code>dict</code> API, so no dynamic method lookup/binding or function call dispatch overhead is involved (where <code>(newdict := dict1.copy()).update(dict2)</code> is unavoidably identical to the original two-liner in behavior, performing the work in discrete steps, with dynamic lookup/binding/invocation of methods.</p>\n\n<p>It's also more extensible, as merging three <code>dict</code>s is obvious:</p>\n\n<pre><code> newdict = {**dict1, **dict2, **dict3}\n</code></pre>\n\n<p>where using assignment expressions won't scale like that; the closest you could get would be:</p>\n\n<pre><code> (newdict := dict1.copy()).update(dict2), newdict.update(dict3)\n</code></pre>\n\n<p>or without the temporary tuple of <code>None</code>s, but with truthiness testing of each <code>None</code> result:</p>\n\n<pre><code> (newdict := dict1.copy()).update(dict2) or newdict.update(dict3)\n</code></pre>\n\n<p>either of which is obviously much uglier, and includes further inefficiencies (either a wasted temporary <code>tuple</code> of <code>None</code>s for comma separation, or pointless truthiness testing of each <code>update</code>'s <code>None</code> return for <code>or</code> separation).</p>\n\n<p><strong>The only real advantage to the assignment expression approach occurs if:</strong></p>\n\n<ol>\n<li><strong>You have generic code that needs handle both <code>set</code>s and <code>dict</code>s</strong> (both of them support <code>copy</code> and <code>update</code>, so the code works roughly as you'd expect it to)</li>\n<li><strong>You expect to receive arbitrary dict-like objects</strong>, not just <code>dict</code> itself, <strong>and must preserve the type and semantics of the left hand side</strong> (rather than ending up with a plain <code>dict</code>). While <code>myspecialdict({**speciala, **specialb})</code> might work, it would involve an extra temporary <code>dict</code>, and if <code>myspecialdict</code> has features plain <code>dict</code> can't preserve (e.g. regular <code>dict</code>s now preserve order based on the first appearance of a key, and value based on the last appearance of a key; you might want one that preserves order based on the <em>last</em> appearance of a key so updating a value also moves it to the end), then the semantics would be wrong. Since the assignment expression version uses the named methods (which are presumably overloaded to behave appropriately), it never creates a <code>dict</code> at all (unless <code>dict1</code> was already a <code>dict</code>), preserving the original type (and original type's semantics), all while avoiding any temporaries.</li>\n</ol>\n"},{"owner":{"reputation":108,"user_id":1793489,"user_type":"registered","profile_image":"https://i.stack.imgur.com/1NASI.jpg?s=128&g=1","display_name":"Milton Ain","link":"https://stackoverflow.com/users/1793489/milton-ain"},"is_accepted":false,"score":5,"last_activity_date":1547722000,"creation_date":1547722000,"answer_id":54234199,"question_id":950087,"content_license":"CC BY-SA 4.0","body":"<p>I tried this problem with another approach,</p>\n\n<p>Ordering of script importing, has no effect in here.</p>\n\n<p><strong>index.html</strong></p>\n\n<pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;Trials&lt;/title&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;script src=\"main.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"scriptA.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n&lt;h3&gt;testing js in js (check console logs)&lt;/h3&gt;\n&lt;button onclick=\"fnClick()\"&gt;TEST&lt;/button&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>\n\n<p><strong>main.js</strong></p>\n\n<pre><code>function fnClick() {\n  console.log('From\\tAAAAA');\n  var pro = myExpo.hello();\n  console.log(pro);\n}\n</code></pre>\n\n<p><strong>scriptA.js</strong></p>\n\n<pre><code>myExpo = {\n    hello: function () {\n        console.log('From\\tBBBBB');\n        return \"Hello\";\n    }\n}\n</code></pre>\n\n<p>and the <strong>result</strong> is</p>\n\n<pre><code>From    AAAAA\nFrom    BBBBB\nHello\n</code></pre>\n"},{"owner":{"reputation":2985,"user_id":999858,"user_type":"registered","accept_rate":92,"profile_image":"https://www.gravatar.com/avatar/f1a8a12d17c9e5a10c343b061fb67e34?s=128&d=identicon&r=PG","display_name":"Tigran Saluev","link":"https://stackoverflow.com/users/999858/tigran-saluev"},"is_accepted":false,"score":1,"last_activity_date":1547459724,"last_edit_date":1547459724,"creation_date":1526032839,"answer_id":50289800,"question_id":38987,"content_license":"CC BY-SA 4.0","body":"<p>I think my ugly one-liners are just necessary here.</p>\n\n<pre><code>z = next(z.update(y) or z for z in [x.copy()])\n# or\nz = (lambda z: z.update(y) or z)(x.copy())\n</code></pre>\n\n<ol>\n<li>Dicts are merged.</li>\n<li>Single expression.</li>\n<li>Don't ever dare to use it.</li>\n</ol>\n\n<p><strong>P.S.</strong> This is a solution working in both versions of Python. I know that Python 3 has this <code>{**x, **y}</code> thing and it is the right thing to use (as well as moving to Python 3 if you still have Python 2 is the right thing to do).</p>\n"},{"owner":{"reputation":868959,"user_id":157247,"user_type":"registered","accept_rate":91,"profile_image":"https://i.stack.imgur.com/4HovX.jpg?s=128&g=1","display_name":"T.J. Crowder","link":"https://stackoverflow.com/users/157247/t-j-crowder"},"is_accepted":false,"score":670,"last_activity_date":1547215137,"last_edit_date":1547215137,"creation_date":1393940148,"answer_id":22173438,"question_id":336859,"content_license":"CC BY-SA 4.0","body":"<p>Here's the rundown on the standard forms that create functions: <em>(Originally written for another question, but adapted after being moved into the canonical question.)</em></p>\n\n<p>Terms:</p>\n\n<ul>\n<li><strong>ES5</strong>: <a href=\"http://ecma-international.org/ecma-262/5.1/\" rel=\"noreferrer\">ECMAScript 5th edition</a>, 2009</li>\n<li><strong>ES2015</strong>: <a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html\" rel=\"noreferrer\">ECMAScript 2015</a> (also known as \"ES6\")</li>\n</ul>\n\n<p>The quick list:</p>\n\n<ul>\n<li><p>Function Declaration</p></li>\n<li><p>\"Anonymous\" <code>function</code> Expression <em>(which despite the term, sometimes create functions with names)</em></p></li>\n<li><p>Named <code>function</code> Expression</p></li>\n<li><p>Accessor Function Initializer (ES5+)</p></li>\n<li><p>Arrow Function Expression (ES2015+) <em>(which, like anonymous function expressions, don't involve an explicit name, and yet can create functions with names)</em></p></li>\n<li><p>Method Declaration in Object Initializer (ES2015+)</p></li>\n<li><p>Constructor and Method Declarations in <code>class</code> (ES2015+)</p></li>\n</ul>\n\n<h3>Function Declaration</h3>\n\n<p>The first form is a <em>function declaration</em>, which looks like this:</p>\n\n<pre><code>function x() {\n    console.log('x');\n}\n</code></pre>\n\n<p>A function declaration is a <em>declaration</em>; it's not a statement or expression. As such, you don't follow it with a <code>;</code> (although doing so is harmless).</p>\n\n<p>A function declaration is processed when execution enters the context in which it appears, <strong>before</strong> any step-by-step code is executed. The function it creates is given a proper name (<code>x</code> in the example above), and that name is put in the scope in which the declaration appears.</p>\n\n<p>Because it's processed before any step-by-step code in the same context, you can do things like this:</p>\n\n<pre><code>x(); // Works even though it's above the declaration\nfunction x() {\n    console.log('x');\n}\n</code></pre>\n\n<p>Until ES2015, the spec didn't cover what a JavaScript engine should do if you put a function declaration inside a control structure like <code>try</code>, <code>if</code>, <code>switch</code>, <code>while</code>, etc., like this:</p>\n\n<pre><code>if (someCondition) {\n    function foo() {    // &lt;===== HERE THERE\n    }                   // &lt;===== BE DRAGONS\n}\n</code></pre>\n\n<p>And since they're processed <em>before</em> step-by-step code is run, it's tricky to know what to do when they're in a control structure.</p>\n\n<p>Although doing this wasn't <em>specified</em> until ES2015, it was an <em>allowable extension</em> to support function declarations in blocks. Unfortunately (and inevitably), different engines did different things.</p>\n\n<p>As of ES2015, the specification says what to do. In fact, it gives three separate things to do:</p>\n\n<ol>\n<li>If in loose mode <em>not</em> on a web browser, the JavaScript engine is supposed to do one thing</li>\n<li>If in loose mode on a web browser, the JavaScript engine is supposed to do something else</li>\n<li>If in <em>strict</em> mode (browser or not), the JavaScript engine is supposed to do yet another thing</li>\n</ol>\n\n<p>The rules for the loose modes are tricky, but in <em>strict</em> mode, function declarations in blocks are easy: They're local to the block (they have <em>block scope</em>, which is also new in ES2015), and they're hoisted to the top of the block. So:</p>\n\n<pre><code>\"use strict\";\nif (someCondition) {\n    foo();               // Works just fine\n    function foo() {\n    }\n}\nconsole.log(typeof foo); // \"undefined\" (`foo` is not in scope here\n                         // because it's not in the same block)\n</code></pre>\n\n<h3>\"Anonymous\" <code>function</code> Expression</h3>\n\n<p>The second common form is called an <em>anonymous function expression</em>:</p>\n\n<pre><code>var y = function () {\n    console.log('y');\n};\n</code></pre>\n\n<p>Like all expressions, it's evaluated when it's reached in the step-by-step execution of the code.</p>\n\n<p>In ES5, the function this creates has no name (it's anonymous). In ES2015, the function is assigned a name if possible by inferring it from context. In the example above, the name would be <code>y</code>. Something similar is done when the function is the value of a property initializer. (For details on when this happens and the rules, search for <code>SetFunctionName</code> in the <a href=\"https://tc39.github.io/ecma262/\" rel=\"noreferrer\">the specification</a>&nbsp;&mdash; it appears <em>all over</em> the place.)</p>\n\n<h3>Named <code>function</code> Expression</h3>\n\n<p>The third form is a <em>named function expression</em> (\"NFE\"):</p>\n\n<pre><code>var z = function w() {\n    console.log('zw')\n};\n</code></pre>\n\n<p>The function this creates has a proper name (<code>w</code> in this case). Like all expressions, this is evaluated when it's reached in the step-by-step execution of the code. The name of the function is <em>not</em> added to the scope in which the expression appears; the name <em>is</em> in scope within the function itself:</p>\n\n<pre><code>var z = function w() {\n    console.log(typeof w); // \"function\"\n};\nconsole.log(typeof w);     // \"undefined\"\n</code></pre>\n\n<p>Note that NFEs have frequently been a source of bugs for JavaScript implementations. IE8 and earlier, for instance, handle NFEs <a href=\"http://blog.niftysnippets.org/2010/09/double-take.html\" rel=\"noreferrer\">completely incorrectly</a>, creating two different functions at two different times. Early versions of Safari had issues as well. The good news is that current versions of browsers (IE9 and up, current Safari) don't have those issues any more. (But as of this writing, sadly, IE8 remains in widespread use, and so using NFEs with code for the web in general is still problematic.)</p>\n\n<h3>Accessor Function Initializer (ES5+)</h3>\n\n<p>Sometimes functions can sneak in largely unnoticed; that's the case with <em>accessor functions</em>. Here's an example:</p>\n\n<pre><code>var obj = {\n    value: 0,\n    get f() {\n        return this.value;\n    },\n    set f(v) {\n        this.value = v;\n    }\n};\nconsole.log(obj.f);         // 0\nconsole.log(typeof obj.f);  // \"number\"\n</code></pre>\n\n<p>Note that when I used the function, I didn't use <code>()</code>! That's because it's an <em>accessor function</em> for a property. We get and set the property in the normal way, but behind the scenes, the function is called.</p>\n\n<p>You can also create accessor functions with <code>Object.defineProperty</code>, <code>Object.defineProperties</code>, and the lesser-known second argument to <code>Object.create</code>.</p>\n\n<h3>Arrow Function Expression (ES2015+)</h3>\n\n<p>ES2015 brings us the <em>arrow function</em>. Here's one example:</p>\n\n<pre><code>var a = [1, 2, 3];\nvar b = a.map(n =&gt; n * 2);\nconsole.log(b.join(\", \")); // 2, 4, 6\n</code></pre>\n\n<p>See that <code>n =&gt; n * 2</code> thing hiding in the <code>map()</code> call? That's a function.</p>\n\n<p>A couple of things about arrow functions:</p>\n\n<ol>\n<li><p>They don't have their own <code>this</code>. Instead, they <em>close over</em> the <code>this</code> of the context where they're defined. (They also close over <code>arguments</code> and, where relevant, <code>super</code>.) This means that the <code>this</code> within them is the same as the <code>this</code> where they're created, and cannot be changed.</p></li>\n<li><p>As you'll have noticed with the above, you don't use the keyword <code>function</code>; instead, you use <code>=&gt;</code>.</p></li>\n</ol>\n\n<p>The <code>n =&gt; n * 2</code> example above is one form of them. If you have multiple arguments to pass the function, you use parens:</p>\n\n<pre><code>var a = [1, 2, 3];\nvar b = a.map((n, i) =&gt; n * i);\nconsole.log(b.join(\", \")); // 0, 2, 6\n</code></pre>\n\n<p>(Remember that <code>Array#map</code> passes the entry as the first argument, and the index as the second.)</p>\n\n<p>In both cases, the body of the function is just an expression; the function's return value will automatically be the result of that expression (you don't use an explicit <code>return</code>).</p>\n\n<p>If you're doing more than just a single expression, use <code>{}</code> and an explicit <code>return</code> (if you need to return a value), as normal:</p>\n\n<pre><code>var a = [\n  {first: \"Joe\", last: \"Bloggs\"},\n  {first: \"Albert\", last: \"Bloggs\"},\n  {first: \"Mary\", last: \"Albright\"}\n];\na = a.sort((a, b) =&gt; {\n  var rv = a.last.localeCompare(b.last);\n  if (rv === 0) {\n    rv = a.first.localeCompare(b.first);\n  }\n  return rv;\n});\nconsole.log(JSON.stringify(a));\n</code></pre>\n\n<p>The version without <code>{ ... }</code> is called an arrow function with an <em>expression body</em> or <em>concise body</em>. (Also: A <em>concise</em> arrow function.) The one with <code>{ ... }</code> defining the body is an arrow function with a <em>function body</em>. (Also: A <em>verbose</em> arrow function.)</p>\n\n<h3>Method Declaration in Object Initializer (ES2015+)</h3>\n\n<p>ES2015 allows a shorter form of declaring a property that references a function called a <em>method definition</em>; it looks like this:</p>\n\n<pre><code>var o = {\n    foo() {\n    }\n};\n</code></pre>\n\n<p>the almost-equivalent in ES5 and earlier would be:</p>\n\n<pre><code>var o = {\n    foo: function foo() {\n    }\n};\n</code></pre>\n\n<p>the difference (other than verbosity) is that a method can use <code>super</code>, but a function cannot. So for instance, if you had an object that defined (say) <code>valueOf</code> using method syntax, it could use <code>super.valueOf()</code> to get the value <code>Object.prototype.valueOf</code> would have returned (before presumably doing something else with it), whereas the ES5 version would have to do <code>Object.prototype.valueOf.call(this)</code> instead.</p>\n\n<p>That also means that the method has a reference to the object it was defined on, so if that object is temporary (for instance, you're passing it into <code>Object.assign</code> as one of the source objects), method syntax <em>could</em> mean that the object is retained in memory when otherwise it could have been garbage collected (if the JavaScript engine doesn't detect that situation and handle it if none of the methods uses <code>super</code>).</p>\n\n<h3>Constructor and Method Declarations in <code>class</code> (ES2015+)</h3>\n\n<p>ES2015 brings us <code>class</code> syntax, including declared constructors and methods:</p>\n\n<pre><code>class Person {\n    constructor(firstName, lastName) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n    }\n\n    getFullName() {\n        return this.firstName + \" \" + this.lastName;\n    }\n}\n</code></pre>\n\n<p>There are two function declarations above: One for the constructor, which gets the name <code>Person</code>, and one for <code>getFullName</code>, which is a function assigned to <code>Person.prototype</code>.</p>\n"},{"owner":{"reputation":3745,"user_id":4724147,"user_type":"registered","profile_image":"https://i.stack.imgur.com/JZDnz.jpg?s=128&g=1","display_name":"Harunur Rashid","link":"https://stackoverflow.com/users/4724147/harunur-rashid"},"is_accepted":false,"score":6,"last_activity_date":1546643902,"last_edit_date":1546643902,"creation_date":1527671130,"answer_id":50600623,"question_id":9329446,"content_license":"CC BY-SA 4.0","body":"<p>If you want to use <code>forEach()</code>, it will look like - </p>\n\n<pre><code>theArray.forEach ( element =&gt; {\n    console.log(element);\n});\n</code></pre>\n\n<p>If you want to use <code>for()</code>, it will look like -   </p>\n\n<pre><code>for(let idx = 0; idx &lt; theArray.length; idx++){\n    let element = theArray[idx];\n    console.log(element);\n}\n</code></pre>\n"},{"owner":{"reputation":155,"user_id":7750626,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/fd8a7691e5fdd46248138903936f8de5?s=128&d=identicon&r=PG&f=1","display_name":"H.Ostwal","link":"https://stackoverflow.com/users/7750626/h-ostwal"},"is_accepted":false,"score":0,"last_activity_date":1546411844,"creation_date":1546411844,"answer_id":54002344,"question_id":336859,"content_license":"CC BY-SA 4.0","body":"<p>Another difference between both function is functionOne can be used as a variable that can hold multiple functions within and functionTwo holds some block of code that gets executed all when called. Please check below :</p>\n\n<pre><code>   var functionOne = (function() {\n      return {\n\n         sayHello: function(){\n                console.log('say hello')\n\n         },\n         redirectPage:function(_url){\n                window.location.href = _url;\n         }\n\n      }\n})();\n</code></pre>\n\n<p>You have a choice which function to be called. e.g functionOne.sayHello or functionOne. redirectPage. And if you call functionTwo then whole block of code will get executed.</p>\n"},{"owner":{"reputation":5992,"user_id":1783588,"user_type":"registered","accept_rate":75,"profile_image":"https://i.stack.imgur.com/mU0bj.png?s=128&g=1","display_name":"jasonleonhard","link":"https://stackoverflow.com/users/1783588/jasonleonhard"},"is_accepted":false,"score":6,"last_activity_date":1532396736,"creation_date":1532396736,"answer_id":51489296,"question_id":950087,"content_license":"CC BY-SA 4.0","body":"<h1>Import and export modules using ES6 that work with Node.js</h1>\n\n<p>Name files with <code>.mjs</code> extension instead of <code>.js</code></p>\n\n<h3>Create files</h3>\n\n<pre><code>touch main.mjs lib.mjs\n</code></pre>\n\n<h3>main.js</h3>\n\n<pre><code>import { add } from './lib.mjs';\nconsole.log(add(40, 2));\n</code></pre>\n\n<h3>lib.mjs</h3>\n\n<pre><code>export let add = (x,y) =&gt; {\n  return x + y\n}\n</code></pre>\n\n<h3>Run</h3>\n\n<pre><code>node --experimental-modules main.js\n</code></pre>\n"},{"owner":{"reputation":3007,"user_id":9531203,"user_type":"registered","profile_image":"https://i.stack.imgur.com/vt1Po.jpg?s=128&g=1","display_name":"Kean Amaral","link":"https://stackoverflow.com/users/9531203/kean-amaral"},"is_accepted":false,"score":4,"last_activity_date":1531608973,"creation_date":1531608973,"answer_id":51344002,"question_id":336859,"content_license":"CC BY-SA 4.0","body":"<p>This is called a Function Expression:</p>\n\n<pre><code>var getRectArea = function(width, height) {\n    return width * height;\n};\n\nconsole.log(\"Area of Rectangle: \" + getRectArea(3,4));\n// This should return the following result in the console: \n// Area of Rectangle: 12\n</code></pre>\n\n<p>This is called a Function Declaration:</p>\n\n<pre><code>var w = 5;\nvar h = 6;\n\nfunction RectArea(width, height) {  //declaring the function\n  return area = width * height;\n}                                   //note you do not need ; after }\n\nRectArea(w,h);                      //calling or executing the function\nconsole.log(\"Area of Rectangle: \" + area);\n// This should return the following result in the console: \n// Area of Rectangle: 30\n</code></pre>\n\n<p>Hope this helps explain what is the difference between Function Expression and Function Declaration and how to use them.  Thanks.</p>\n"},{"owner":{"reputation":8490,"user_id":5349542,"user_type":"registered","accept_rate":83,"profile_image":"https://i.stack.imgur.com/B4LnC.jpg?s=128&g=1","display_name":"BlackBeard","link":"https://stackoverflow.com/users/5349542/blackbeard"},"is_accepted":false,"score":5,"last_activity_date":1530876723,"last_edit_date":1530876723,"creation_date":1530861074,"answer_id":51204865,"question_id":9329446,"content_license":"CC BY-SA 4.0","body":"<p>If you have a massive array you should use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators\" rel=\"noreferrer\"><strong><code>iterators</code></strong></a> to gain some efficiency. Iterators are a property of certain JavaScript collections (like <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\" rel=\"noreferrer\"><code>Map</code></a>, <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Set\" rel=\"noreferrer\"><code>Set</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\" rel=\"noreferrer\"><code>String</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" rel=\"noreferrer\"><code>Array</code></a>). Even, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of\" rel=\"noreferrer\"><strong><code>for..of</code></strong></a> uses <strong><code>iterator</code></strong> under-the-hood.</p>\n\n<p>Iterators improve efficiency by letting you consume the items in a list one at a time as if they were a stream. What makes an iterator special is how it traverses a collection. Other loops need to load the entire collection up front in order to iterate over it, whereas an iterator only needs to know the current position in the collection.             </p>\n\n<p>You access the current item by calling the iterator’s <code>next</code> method. The next method will return the <strong><code>value</code></strong> of the current item and a <strong><code>boolean</code></strong> to indicate when you have reached the end of the collection. The following is an example of creating an iterator from an array.               </p>\n\n<p>Transform your regular array to iterator using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values\" rel=\"noreferrer\"><code>values()</code></a> method like this:               </p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>    const myArr = [2,3,4]\r\n\r\nlet it = myArr.values();\r\n\r\nconsole.log(it.next());\r\nconsole.log(it.next());\r\nconsole.log(it.next());\r\nconsole.log(it.next());</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>You can also transform your regular array to iterator using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator\" rel=\"noreferrer\"><code>Symbol.iterator</code></a> like this:         </p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const myArr = [2,3,4]\r\n\r\nlet it = myArr[Symbol.iterator]();\r\n\r\nconsole.log(it.next());\r\nconsole.log(it.next());\r\nconsole.log(it.next());\r\nconsole.log(it.next());</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>You can also transform your regular <code>array</code> to an <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators\" rel=\"noreferrer\"><code>iterator</code></a> like this:          </p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>let myArr = [8, 10, 12];\r\n\r\nfunction makeIterator(array) {\r\n    var nextIndex = 0;\r\n    \r\n    return {\r\n       next: function() {\r\n           return nextIndex &lt; array.length ?\r\n               {value: array[nextIndex++], done: false} :\r\n               {done: true};\r\n       }\r\n    };\r\n};\r\n\r\nvar it = makeIterator(myArr);\r\n\r\nconsole.log(it.next().value);   // {value: 8, done: false}\r\nconsole.log(it.next().value);   // {value: 10, done: false}\r\nconsole.log(it.next().value);   // {value: 12, done: false}\r\nconsole.log(it.next().value);   // {value: undefined, done: true}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><strong>NOTE</strong>:                </p>\n\n<ul>\n<li>Iterators are exhaustible in nature. </li>\n<li>Objects are not <code>iterable</code> by default. Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in\" rel=\"noreferrer\"><code>for..in</code></a> in that case because instead of values it works with keys.</li>\n</ul>\n\n<p>You can read more about <code>iteration protocol</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\" rel=\"noreferrer\">here</a>.  </p>\n"},{"owner":{"reputation":6073,"user_id":4418897,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/23fff1ff90d8926cf3a82823f66943c5?s=128&d=identicon&r=PG&f=1","display_name":"Santosh Pillai","link":"https://stackoverflow.com/users/4418897/santosh-pillai"},"is_accepted":false,"score":1,"last_activity_date":1526343743,"creation_date":1526343743,"answer_id":50340725,"question_id":336859,"content_license":"CC BY-SA 4.0","body":"<p><strong>Expression in JS</strong>:  Something that returns a value <br>\nExample: Try out following in chrome console:</p>\n\n<pre><code>a = 10\noutput : 10\n\n(1 + 3)\noutput = 4\n</code></pre>\n\n<p><strong>Declaration/Statement</strong>: Something that does not return a value <br>\nExample:</p>\n\n<pre><code>if (1 &gt; 2) {\n // do something. \n}\n</code></pre>\n\n<p>here (1>2) is an expression but the 'if' statament is not. Its not returning anything. </p>\n\n<p><br></p>\n\n<p>Similarly, we have Function Declaration/Statement vs Function Expression <br>\nLets take an example:</p>\n\n<pre><code>// test.js\n\nvar a = 10;\n\n// function expression\nvar fun_expression = function() {\n   console.log(\"Running function Expression\");\n}\n\n// funciton expression\n\nfunction fun_declaration() {\n   console.log(\"Running function Statement\");\n}\n</code></pre>\n\n<p><strong>Important:</strong> \nWhat happens when JavaScript engines runs the above js file.</p>\n\n<ul>\n<li><p>When this js runs following things will happen:</p>\n\n<ol>\n<li>Memory will be created variable 'a' and 'fun_expression'. And memory will be created for function statement 'fun_declaration'</li>\n<li>'a' will be assigned 'undefined'. 'fun_expression' will be assigned 'undefined'. 'fun_declaration' will be in the memory in its entirety. <br> \n<strong>Note: Step 1 and 2 above are called 'Execution Context - Creation Phase'</strong>. </li>\n</ol></li>\n</ul>\n\n<p>Now suppose we update the js to.</p>\n\n<pre><code>// test.js\n\nconsole.log(a)  //output: udefined (No error)\nconsole.log(fun_expression)  // output: undefined (No error)\nconsole.log(fun_expression()) // output: Error. As we trying to invoke undefined. \nconsole.log(fun_declaration()) // output: running function statement  (As fun_declaration is already hoisted in the memory). \n\nvar a = 10;\n\n// function expression\nvar fun_expression = function() {\n   console.log('Running function expression')\n}\n\n// function declaration\n\nfunction fun_declaration() {\n   console.log('running function declaration')\n}\n\nconsole.log(a)   // output: 10\nconsole.log(fun_expression()) //output: Running function expression\nconsole.log(fun_declaration()) //output: running function declaration\n</code></pre>\n\n<p>The output mentioned above in the comments, should be useful to understand the different between function expression and function statement/declaration.</p>\n"},{"owner":{"reputation":2992,"user_id":182469,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/522cd74f8cf03b1799d09cfb0b85b36f?s=128&d=identicon&r=PG","display_name":"Josh Bode","link":"https://stackoverflow.com/users/182469/josh-bode"},"is_accepted":false,"score":4,"last_activity_date":1523833375,"creation_date":1523833375,"answer_id":49847631,"question_id":38987,"content_license":"CC BY-SA 3.0","body":"<p>This is an expression for Python 3.5 or greater that merges dictionaries using <code>reduce</code>:</p>\n\n<pre><code>&gt;&gt;&gt; from functools import reduce\n&gt;&gt;&gt; l = [{'a': 1}, {'b': 2}, {'a': 100, 'c': 3}]\n&gt;&gt;&gt; reduce(lambda x, y: {**x, **y}, l, {})\n{'a': 100, 'b': 2, 'c': 3}\n</code></pre>\n\n<p>Note: this works even if the dictionary list is empty or contains only one element.</p>\n"},{"owner":{"reputation":1740,"user_id":3707806,"user_type":"registered","accept_rate":88,"profile_image":"https://i.stack.imgur.com/Sqi35.png?s=128&g=1","display_name":"KthProg","link":"https://stackoverflow.com/users/3707806/kthprog"},"is_accepted":false,"score":15,"last_activity_date":1523561897,"creation_date":1523561897,"answer_id":49804612,"question_id":950087,"content_license":"CC BY-SA 3.0","body":"<p>Although these answers are great, there is a simple \"solution\" that has been around since script loading existed, and it will cover 99.999% of most people's use cases. Just include the script you need before the script that requires it. For most projects it does not take long to determine which scripts are needed and in what order.</p>\n\n<pre><code>&lt;!DOCTYPE HTML&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;script src=\"script1.js\"&gt;&lt;/script&gt;\n        &lt;script src=\"script2.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>If script2 requires script1, this really is the absolute easiest way to do something like this. I'm very surprised no-one has brought this up, as it's the most obvious and simplest answer that will apply in nearly every single case.</p>\n"},{"owner":{"reputation":634,"user_id":1154453,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/db368ab8be6b7bb9eb159e213bdc58c8?s=128&d=identicon&r=PG","display_name":"curlyhairedgenius","link":"https://stackoverflow.com/users/1154453/curlyhairedgenius"},"is_accepted":false,"score":10,"last_activity_date":1522444937,"last_edit_date":1592644375,"creation_date":1421007587,"answer_id":27891634,"question_id":950087,"content_license":"CC BY-SA 4.0","body":"<p>There are a lot of potential answers for this question. My answer is obviously based on a number of them. This is what I ended up with after reading through all the answers.</p>\n<p>The problem with <code>$.getScript</code> and really any other solution that requires a callback when loading is complete is that if you have multiple files that use it and depend on each other you no longer have a way to know when all scripts have been loaded (once they are nested in multiple files).</p>\n<h3>Example:</h3>\n<p>file3.js</p>\n<pre><code>var f3obj = &quot;file3&quot;;\n\n// Define other stuff\n</code></pre>\n<p>file2.js:</p>\n<pre><code>var f2obj = &quot;file2&quot;;\n$.getScript(&quot;file3.js&quot;, function(){\n\n    alert(f3obj);\n\n    // Use anything defined in file3.\n});\n</code></pre>\n<p>file1.js:</p>\n<pre><code>$.getScript(&quot;file2.js&quot;, function(){\n    alert(f3obj); //This will probably fail because file3 is only guaranteed to have loaded inside the callback in file2.\n    alert(f2obj);\n\n    // Use anything defined in the loaded script...\n});\n</code></pre>\n<p>You are right when you say that you could specify Ajax to run synchronously or use <a href=\"http://en.wikipedia.org/wiki/XMLHttpRequest\" rel=\"nofollow noreferrer\">XMLHttpRequest</a>, but the current trend appears to be to deprecate synchronous requests, so you may not get full browser support now or in the future.</p>\n<p>You could try to use <code>$.when</code> to check an array of deferred objects, but now you are doing this in every file and file2 will be considered loaded as soon as the <code>$.when</code> is executed not when the callback is executed, so file1 still continues execution before file3 is loaded. This really still has the same problem.</p>\n<p>I decided to go backwards instead of forwards. Thank you <code>document.writeln</code>. I know it's taboo, but as long as it is used correctly this works well. You end up with code that can be debugged easily, shows in the DOM correctly and can ensure the order the dependencies are loaded correctly.</p>\n<p>You can of course use $ (&quot;body&quot;).append(), but then you can no longer debug correctly any more.</p>\n<p>NOTE: You must use this only while the page is loading, otherwise you get a blank screen. In other words, <strong>always place this before / outside of document.ready</strong>. I have not tested using this after the page is loaded in a click event or anything like that, but I am pretty sure it'll fail.</p>\n<p>I liked the idea of extending jQuery, but obviously you don't need to.</p>\n<p>Before calling <code>document.writeln</code>, it checks to make sure the script has not already been loading by evaluating all the script elements.</p>\n<p>I assume that a script is not fully executed until its <code>document.ready</code> event has been executed. (I know using <code>document.ready</code> is not required, but many people use it, and handling this is a safeguard.)</p>\n<p>When the additional files are loaded the <code>document.ready</code> callbacks will get executed in the wrong order. To address this when a script is actually loaded, the script that imported it is re-imported itself and execution halted. This causes the originating file to now have its <code>document.ready</code> callback executed after any from any scripts that it imports.</p>\n<p>Instead of this approach you could attempt to modify the jQuery <code>readyList</code>, but this seemed like a worse solution.</p>\n<p>Solution:</p>\n<pre><code>$.extend(true,\n{\n    import_js : function(scriptpath, reAddLast)\n    {\n        if (typeof reAddLast === &quot;undefined&quot; || reAddLast === null)\n        {\n            reAddLast = true; // Default this value to true. It is not used by the end user, only to facilitate recursion correctly.\n        }\n\n        var found = false;\n        if (reAddLast == true) // If we are re-adding the originating script we do not care if it has already been added.\n        {\n            found = $('script').filter(function () {\n                return ($(this).attr('src') == scriptpath);\n            }).length != 0; // jQuery to check if the script already exists. (replace it with straight JavaScript if you don't like jQuery.\n        }\n\n        if (found == false) {\n\n            var callingScriptPath = $('script').last().attr(&quot;src&quot;); // Get the script that is currently loading. Again this creates a limitation where this should not be used in a button, and only before document.ready.\n\n            document.writeln(&quot;&lt;script type='text/javascript' src='&quot; + scriptpath + &quot;'&gt;&lt;/script&gt;&quot;); // Add the script to the document using writeln\n\n            if (reAddLast)\n            {\n                $.import_js(callingScriptPath, false); // Call itself with the originating script to fix the order.\n                throw 'Readding script to correct order: ' + scriptpath + ' &lt; ' + callingScriptPath; // This halts execution of the originating script since it is getting reloaded. If you put a try / catch around the call to $.import_js you results will vary.\n            }\n            return true;\n        }\n        return false;\n    }\n});\n</code></pre>\n<p>Usage:</p>\n<p>File3:</p>\n<pre><code>var f3obj = &quot;file3&quot;;\n\n// Define other stuff\n$(function(){\n    f3obj = &quot;file3docready&quot;;\n});\n</code></pre>\n<p>File2:</p>\n<pre><code>$.import_js('js/file3.js');\nvar f2obj = &quot;file2&quot;;\n$(function(){\n    f2obj = &quot;file2docready&quot;;\n});\n</code></pre>\n<p>File1:</p>\n<pre><code>$.import_js('js/file2.js');\n\n// Use objects from file2 or file3\nalert(f3obj); // &quot;file3&quot;\nalert(f2obj); // &quot;file2&quot;\n\n$(function(){\n    // Use objects from file2 or file3 some more.\n    alert(f3obj); //&quot;file3docready&quot;\n    alert(f2obj); //&quot;file2docready&quot;\n});\n</code></pre>\n"},{"owner":{"reputation":79,"user_id":1328944,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/b749bcac7e7e447664e4f499655c29b8?s=128&d=identicon&r=PG","display_name":"gabriel211","link":"https://stackoverflow.com/users/1328944/gabriel211"},"is_accepted":false,"score":3,"last_activity_date":1521608507,"last_edit_date":1521608507,"creation_date":1479335789,"answer_id":40643616,"question_id":950087,"content_license":"CC BY-SA 3.0","body":"<p>Another approach is to use HTML imports. These can contain script references as well as stylesheet references.</p>\n\n<p>You can just link an HTML file like</p>\n\n<pre><code>&lt;link rel=\"import\" href=\"vendorScripts.html\"/&gt;\n</code></pre>\n\n<p>Within the <code>vendorScripts.html</code> file you can include your script references like:</p>\n\n<pre><code>&lt;script src=\"scripts/vendors/jquery.js\"&gt;&lt;/script&gt;\n&lt;script src=\"scripts/vendors/bootstrap.js\"&gt;&lt;/script&gt;\n&lt;script src=\"scripts/vendors/angular.js\"&gt;&lt;/script&gt;\n&lt;script src=\"scripts/vendors/angular-route.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>Look at <a href=\"https://www.html5rocks.com/en/tutorials/webcomponents/imports/\" rel=\"nofollow noreferrer\">HTML Imports</a> for more details.</p>\n\n<p>Unfortunately this only works in Chrome.</p>\n"},{"owner":{"reputation":2407,"user_id":532201,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/bf151d18940e379c3904abee43fc183e?s=128&d=identicon&r=PG","display_name":"Kipras","link":"https://stackoverflow.com/users/532201/kipras"},"is_accepted":false,"score":214,"last_activity_date":1521606569,"last_edit_date":1521606569,"creation_date":1304004306,"answer_id":5821038,"question_id":950087,"content_license":"CC BY-SA 3.0","body":"<p>There actually <em>is</em> a way to load a JavaScript file <em>not</em> asynchronously, so you could use the functions included in your newly loaded file right after loading it, and I think it works in all browsers.</p>\n\n<p>You need to use <code>jQuery.append()</code> on the <code>&lt;head&gt;</code> element of your page, that is:</p>\n\n<pre><code>$(\"head\").append('&lt;script type=\"text/javascript\" src=\"' + script + '\"&gt;&lt;/script&gt;');\n</code></pre>\n\n<p>However, this method also has a problem: if an error happens in the imported JavaScript file, <a href=\"http://en.wikipedia.org/wiki/Firebug_%28software%29\" rel=\"noreferrer\">Firebug</a> (and also Firefox Error Console and <a href=\"https://developers.google.com/chrome-developer-tools/\" rel=\"noreferrer\">Chrome Developer Tools</a> as well) will report its place incorrectly, which is a big problem if you use Firebug to track JavaScript errors down a lot (I do). Firebug simply doesn't know about the newly loaded file for some reason, so if an error occurs in that file, it reports that it occurred in your main <a href=\"http://en.wikipedia.org/wiki/HTML\" rel=\"noreferrer\">HTML</a> file, and you will have trouble finding out the real reason for the error.</p>\n\n<p>But if that is not a problem for you, then this method should work.</p>\n\n<p>I have actually written a jQuery plugin called <em>$.import_js()</em> which uses this method:</p>\n\n<pre><code>(function($)\n{\n    /*\n     * $.import_js() helper (for JavaScript importing within JavaScript code).\n     */\n    var import_js_imported = [];\n\n    $.extend(true,\n    {\n        import_js : function(script)\n        {\n            var found = false;\n            for (var i = 0; i &lt; import_js_imported.length; i++)\n                if (import_js_imported[i] == script) {\n                    found = true;\n                    break;\n                }\n\n            if (found == false) {\n                $(\"head\").append('&lt;script type=\"text/javascript\" src=\"' + script + '\"&gt;&lt;/script&gt;');\n                import_js_imported.push(script);\n            }\n        }\n    });\n\n})(jQuery);\n</code></pre>\n\n<p>So all you would need to do to import JavaScript is:</p>\n\n<pre><code>$.import_js('/path_to_project/scripts/somefunctions.js');\n</code></pre>\n\n<p>I also made a simple test for this at <a href=\"http://www.kipras.com/dev/import_js_test/\" rel=\"noreferrer\">Example</a>.</p>\n\n<p>It includes a <code>main.js</code> file in the main HTML and then the script in <code>main.js</code> uses <code>$.import_js()</code> to import an additional file called <code>included.js</code>, which defines this function:</p>\n\n<pre><code>function hello()\n{\n    alert(\"Hello world!\");\n}\n</code></pre>\n\n<p>And right after including <code>included.js</code>, the <code>hello()</code> function is called, and you get the alert.</p>\n\n<p>(This answer is in response to e-satis' comment).</p>\n"},{"owner":{"reputation":53,"user_id":8850666,"user_type":"registered","accept_rate":0,"profile_image":"https://www.gravatar.com/avatar/f464749595437cb2ba6c913546efda79?s=128&d=identicon&r=PG&f=1","display_name":"John","link":"https://stackoverflow.com/users/8850666/john"},"is_accepted":false,"score":1,"last_activity_date":1521154113,"last_edit_date":1521154113,"creation_date":1515693817,"answer_id":48213322,"question_id":9329446,"content_license":"CC BY-SA 3.0","body":"<pre><code>var a = [\"car\", \"bus\", \"truck\"]\na.forEach(function(item, index) {\n    console.log(\"Index\" + index);\n    console.log(\"Element\" + item);\n})\n</code></pre>\n"},{"owner":{"reputation":3152,"user_id":2693928,"user_type":"registered","accept_rate":50,"profile_image":"https://www.gravatar.com/avatar/f4c1419246c9c4d03a08f7c5db65303e?s=128&d=identicon&r=PG&f=1","display_name":"user2693928","link":"https://stackoverflow.com/users/2693928/user2693928"},"is_accepted":false,"score":1,"last_activity_date":1520509772,"creation_date":1520509772,"answer_id":49172390,"question_id":336859,"content_license":"CC BY-SA 3.0","body":"<p>I prefer defining function as variable:</p>\n\n<pre><code>let first = function(x){\n   return x[0];\n}\n</code></pre>\n\n<p>Instead of:</p>\n\n<pre><code>function first(){\n    ....\n}\n</code></pre>\n\n<p>Because i can use expressions and decorators when defining the function. For example:</p>\n\n<pre><code>let safe = function(f){\n  try {f()...}\n}\nlet last = safe(function(x){return x[0]}).\n</code></pre>\n\n<p>Also with ES6 its much shorter:</p>\n\n<pre><code> let last = x =&gt; x[0]\n ...........\n function last(x){\n     return x[0];\n }\n......\n\nlet last = safe(x =&gt; x[0]);\n</code></pre>\n"},{"owner":{"reputation":200,"user_id":9142162,"user_type":"registered","profile_image":"https://i.stack.imgur.com/Gt3Sl.jpg?s=128&g=1","display_name":"Davaakhuu Erdenekhuu","link":"https://stackoverflow.com/users/9142162/davaakhuu-erdenekhuu"},"is_accepted":false,"score":0,"last_activity_date":1518190632,"creation_date":1518190632,"answer_id":48709243,"question_id":500431,"content_license":"CC BY-SA 3.0","body":"<p>ECMAScript 6 introduced the let and const keywords. These keywords can be used in place of the var keyword. Contrary to the var keyword, the let and const keywords support the declaration of local scope inside block statements.</p>\n\n<pre><code>var x = 10\nlet y = 10\nconst z = 10\n{\n  x = 20\n  let y = 20\n  const z = 20\n  {\n    x = 30\n    // x is in the global scope because of the 'var' keyword\n    let y = 30\n    // y is in the local scope because of the 'let' keyword\n    const z = 30\n    // z is in the local scope because of the 'const' keyword\n    console.log(x) // 30\n    console.log(y) // 30\n    console.log(z) // 30\n  }\n  console.log(x) // 30\n  console.log(y) // 20\n  console.log(z) // 20\n}\n\nconsole.log(x) // 30\nconsole.log(y) // 10\nconsole.log(z) // 10\n</code></pre>\n"},{"owner":{"reputation":534,"user_id":6285996,"user_type":"registered","profile_image":"https://i.stack.imgur.com/5gacD.jpg?s=128&g=1","display_name":"Vivek Mehta","link":"https://stackoverflow.com/users/6285996/vivek-mehta"},"is_accepted":false,"score":0,"last_activity_date":1513324176,"last_edit_date":1513324176,"creation_date":1513315889,"answer_id":47826320,"question_id":500431,"content_license":"CC BY-SA 3.0","body":"<p>In EcmaScript5, there are mainly two scopes, <strong>local scope</strong> and <strong>global scope</strong> but in EcmaScript6 we have mainly three scopes, local scope, global scope and a new scope called <strong>block scope</strong>. </p>\n\n<p>Example of block scope is :-</p>\n\n<pre><code>for ( let i = 0; i &lt; 10; i++)\n{\n statement1...\nstatement2...// inside this scope we can access the value of i, if we want to access the value of i outside for loop it will give undefined.\n}\n</code></pre>\n"},{"owner":{"reputation":22396,"user_id":974045,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/5ad548cd357d81ab99c5d60e64e02070?s=128&d=identicon&r=PG","display_name":"Gibolt","link":"https://stackoverflow.com/users/974045/gibolt"},"is_accepted":false,"score":5,"last_activity_date":1512759820,"last_edit_date":1592644375,"creation_date":1506457391,"answer_id":46435179,"question_id":500431,"content_license":"CC BY-SA 4.0","body":"<h1>Modern Js, ES6+, '<code>const</code>' and '<code>let</code>'</h1>\n<p>You should be using block scoping for every variable you create, just like most other major languages. <code>var</code> is <em>obsolete</em>. This makes your code safer and more maintainable.</p>\n<p><code>const</code> should be used for <strong>95% of cases</strong>. It makes it so the variable <em>reference</em> can't change. Array, object, and DOM node properties can change and should likely be <code>const</code>.</p>\n<p><code>let</code> should be be used for any variable expecting to be reassigned. This includes within a for loop. If you ever change value beyond initialization, use <code>let</code>.</p>\n<p>Block scope means that the variable will only be available within the brackets in which it is declared. This extends to internal scopes, including anonymous functions created within your scope.</p>\n"},{"owner":{"reputation":649,"user_id":8706989,"user_type":"registered","profile_image":"https://lh3.googleusercontent.com/-EIsReTq9cyg/AAAAAAAAAAI/AAAAAAAAArg/lfh6UNgckpQ/photo.jpg?sz=128","display_name":"Abdur Rahman","link":"https://stackoverflow.com/users/8706989/abdur-rahman"},"is_accepted":false,"score":2,"last_activity_date":1509527778,"creation_date":1509527778,"answer_id":47051560,"question_id":500431,"content_license":"CC BY-SA 3.0","body":"<p>In JavaScript there are two types of scope:</p>\n\n<ul>\n<li>Local scope </li>\n<li>Global scope</li>\n</ul>\n\n<p>The Below function has a local scope variable <code>carName</code>. And this variable is not accessible from outside of the function.</p>\n\n<pre><code>function myFunction() {\n    var carName = \"Volvo\";\n    alert(carName);\n    // code here can use carName\n}\n</code></pre>\n\n<p>The Below Class has a Global scope variable <code>carName</code>. And this variable is accessible from everywhere in the class.</p>\n\n<pre><code>class {\n\n    var carName = \" Volvo\";\n\n    // code here can use carName\n\n    function myFunction() {\n        alert(carName);\n        // code here can use carName \n    }\n}\n</code></pre>\n"},{"owner":{"reputation":7372,"user_id":5081877,"user_type":"registered","accept_rate":92,"profile_image":"https://i.stack.imgur.com/vG3nv.png?s=128&g=1","display_name":"Yash","link":"https://stackoverflow.com/users/5081877/yash"},"is_accepted":false,"score":59,"last_activity_date":1506580518,"last_edit_date":1506580518,"creation_date":1453733213,"answer_id":34995357,"question_id":336859,"content_license":"CC BY-SA 3.0","body":"<p><strong><a href=\"http://www.sitepoint.com/back-to-basics-javascript-hoisting/\" rel=\"noreferrer\">Hoisting</a></strong> <em>is the JavaScript interpreter’s action of moving all variable and function declarations to the top of the current scope.</em> </p>\n\n<p><em>However, only the actual declarations are hoisted. by leaving assignments where they are.</em></p>\n\n<ul>\n<li>variable's/Function's declared inside the page are global can access anywhere in that page.</li>\n<li>variable's/Functions declared inside the function are having local scope. means they are available/accessed inside the function body (scope), they are not available outside the function body.</li>\n</ul>\n\n<p><strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Variables\" rel=\"noreferrer\">Variable</a></strong></p>\n\n<p><em>Javascript is called loosely typed language. Which means Javascript variables can hold value of any <a href=\"https://msdn.microsoft.com/en-us/library/7wkd9z69(v=vs.94).aspx\" rel=\"noreferrer\">Data-Type</a>. Javascript automatically takes care of changing the variable-type based on the value/literal provided during runtime.</em></p>\n\n<pre><code>global_Page = 10;                                               var global_Page;      « undefined\n    « Integer literal, Number Type.   -------------------       global_Page = 10;     « Number         \nglobal_Page = 'Yash';                 |   Interpreted   |       global_Page = 'Yash'; « String\n    « String literal, String Type.    «       AS        «       global_Page = true;   « Boolean \nvar global_Page = true;               |                 |       global_Page = function (){          « function\n    « Boolean Type                    -------------------                 var local_functionblock;  « undefined\nglobal_Page = function (){                                                local_functionblock = 777;« Number\n    var local_functionblock = 777;                              };  \n    // Assigning function as a data.\n};  \n</code></pre>\n\n<hr>\n\n<p><strong>Function</strong></p>\n\n<pre><code>function Identifier_opt ( FormalParameterList_opt ) { \n      FunctionBody | sequence of statements\n\n      « return;  Default undefined\n      « return 'some data';\n}\n</code></pre>\n\n<ul>\n<li>functions declared inside the page are hoisted to top of the page having global access.</li>\n<li>functions declared inside the function-block are hoisted to top of the block.</li>\n<li><p>Default return value of function is '<a href=\"https://javascriptweblog.wordpress.com/2010/08/16/understanding-undefined-and-preventing-referenceerrors/\" rel=\"noreferrer\">undefined</a>', <a href=\"http://javascript.info/tutorial/variables-and-statements\" rel=\"noreferrer\">Variable</a> declaration default value also 'undefined'</p>\n\n<pre><code>Scope with respect to function-block global. \nScope with respect to page undefined | not available.\n</code></pre></li>\n</ul>\n\n<p><strong>Function Declaration</strong></p>\n\n<pre><code>function globalAccess() {                                  function globalAccess() {      \n}                                  -------------------     }\nglobalAccess();                    |                 |     function globalAccess() { « Re-Defined / overridden.\nlocalAccess();                     «   Hoisted  As   «         function localAccess() {\nfunction globalAccess() {          |                 |         }\n     localAccess();                -------------------         localAccess(); « function accessed with in globalAccess() only.\n     function localAccess() {                              }\n     }                                                     globalAccess();\n}                                                          localAccess(); « ReferenceError as the function is not defined\n</code></pre>\n\n<p><strong>Function Expression</strong></p>\n\n<pre><code>        10;                 « literal\n       (10);                « Expression                (10).toString() -&gt; '10'\nvar a;                      \n    a = 10;                 « Expression var              a.toString()  -&gt; '10'\n(function invoke() {        « Expression Function\n console.log('Self Invoking');                      (function () {\n});                                                               }) () -&gt; 'Self Invoking'\n\nvar f; \n    f = function (){        « Expression var Function\n    console.log('var Function');                                   f ()  -&gt; 'var Function'\n    };\n</code></pre>\n\n<p><em>Function assigned to variable Example:</em></p>\n\n<pre><code>(function selfExecuting(){\n    console.log('IIFE - Immediately-Invoked Function Expression');\n}());\n\nvar anonymous = function (){\n    console.log('anonymous function Expression');\n};\n\nvar namedExpression = function for_InternalUSE(fact){\n    if(fact === 1){\n        return 1;\n    }\n\n    var localExpression = function(){\n        console.log('Local to the parent Function Scope');\n    };\n    globalExpression = function(){ \n        console.log('creates a new global variable, then assigned this function.');\n    };\n\n    //return; //undefined.\n    return fact * for_InternalUSE( fact - 1);   \n};\n\nnamedExpression();\nglobalExpression();\n</code></pre>\n\n<p>javascript interpreted as</p>\n\n<pre><code>var anonymous;\nvar namedExpression;\nvar globalExpression;\n\nanonymous = function (){\n    console.log('anonymous function Expression');\n};\n\nnamedExpression = function for_InternalUSE(fact){\n    var localExpression;\n\n    if(fact === 1){\n        return 1;\n    }\n    localExpression = function(){\n        console.log('Local to the parent Function Scope');\n    };\n    globalExpression = function(){ \n        console.log('creates a new global variable, then assigned this function.');\n    };\n\n    return fact * for_InternalUSE( fact - 1);    // DEFAULT UNDEFINED.\n};\n\nnamedExpression(10);\nglobalExpression();\n</code></pre>\n\n<p>You can check function declaration, expression test over different browser's using <a href=\"http://jsperf.com/yashfunctions\" rel=\"noreferrer\"><code>jsperf Test Runner</code></a></p>\n\n<hr>\n\n<p><strong><a href=\"https://stackoverflow.com/a/45759444/5081877\">ES5 Constructor Function Classes</a>: Function objects created using Function.prototype.bind</strong></p>\n\n<p>JavaScript treats functions as first-class objects, so being an object, you can assign properties to a function.</p>\n\n<pre><code>function Shape(id) { // Function Declaration\n    this.id = id;\n};\n    // Adding a prototyped method to a function.\n    Shape.prototype.getID = function () {\n        return this.id;\n    };\n    Shape.prototype.setID = function ( id ) {\n        this.id = id;\n    };\n\nvar expFn = Shape; // Function Expression\n\nvar funObj = new Shape( ); // Function Object\nfunObj.hasOwnProperty('prototype'); // false\nfunObj.setID( 10 );\nconsole.log( funObj.getID() ); // 10\n</code></pre>\n\n<hr>\n\n<p>ES6 introduced <strong>Arrow function</strong>: An arrow function expression has a shorter syntax, they are best suited for non-method functions, and they cannot be used as constructors.</p>\n\n<blockquote>\n  <p><a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html#sec-arrow-function-definitions-static-semantics-early-errors\" rel=\"noreferrer\"><code>ArrowFunction : ArrowParameters =&gt; ConciseBody</code></a>.</p>\n\n<pre><code>const fn = (item) =&gt; { return item &amp; 1 ? 'Odd' : 'Even'; };\nconsole.log( fn(2) ); // Even\nconsole.log( fn(3) ); // Odd\n</code></pre>\n</blockquote>\n"},{"owner":{"reputation":11572,"user_id":266068,"user_type":"registered","accept_rate":93,"profile_image":"https://i.stack.imgur.com/wzczi.png?s=128&g=1","display_name":"Panos Kal.","link":"https://stackoverflow.com/users/266068/panos-kal"},"is_accepted":false,"score":11,"last_activity_date":1506575597,"last_edit_date":1506575597,"creation_date":1506573263,"answer_id":46461041,"question_id":336859,"content_license":"CC BY-SA 3.0","body":"<p><strong><em>About performance:</em></strong></p>\n\n<p>New versions of <code>V8</code> introduced several under-the-hood optimizations and so did <code>SpiderMonkey</code>.</p>\n\n<p>There is almost no difference now between expression and declaration. <br>Function expression <a href=\"https://jsperf.com/fdeclaration-vs-fexpression\" rel=\"noreferrer\">appears to be faster</a> now.</p>\n\n<p><strong><em>Chrome 62.0.3202</em></strong>\n<a href=\"https://i.stack.imgur.com/lW91X.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/lW91X.png\" alt=\"Chrome test\"></a></p>\n\n<p><strong><em>FireFox 55</em></strong>\n<a href=\"https://i.stack.imgur.com/po3gG.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/po3gG.png\" alt=\"Firefox test\"></a></p>\n\n<p><strong><em>Chrome Canary 63.0.3225</em></strong>\n<a href=\"https://i.stack.imgur.com/lcPvN.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/lcPvN.png\" alt=\"Chrome Canary test\"></a></p>\n\n<p><br></p>\n\n<blockquote>\n  <p><code>Anonymous</code> function expressions <a href=\"https://jsperf.com/named-vs-anonymous-expressions\" rel=\"noreferrer\">appear to have better performance</a>\n  against <code>Named</code> function expression.</p>\n</blockquote>\n\n<p><br></p>\n\n<p><strong><em>Firefox</em></strong>\n<a href=\"https://i.stack.imgur.com/npaAl.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/npaAl.png\" alt=\"Firefox named_anonymous\"></a>\n<strong><em>Chrome Canary</em></strong>\n<a href=\"https://i.stack.imgur.com/6YkeY.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/6YkeY.png\" alt=\"Chrome canary named_anonymous\"></a>\n<strong><em>Chrome</em></strong>\n<a href=\"https://i.stack.imgur.com/x9H8J.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/x9H8J.png\" alt=\"Chrome named_anonymous\"></a></p>\n"},{"owner":{"reputation":492,"user_id":8577379,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/d7bcd7c6589dd1b35884cc4c1f978e54?s=128&d=identicon&r=PG&f=1","display_name":"mrmaclean89","link":"https://stackoverflow.com/users/8577379/mrmaclean89"},"is_accepted":false,"score":2,"last_activity_date":1505601307,"creation_date":1505601307,"answer_id":46259038,"question_id":500431,"content_license":"CC BY-SA 3.0","body":"<p>My understanding is that there are 3 scopes: global scope, available globally; local scope, available to an entire function regardless of blocks; and block scope, only available to the block, statement, or expression on which it was used. Global and local scope are indicated with the keyword 'var', either within a function or outside, and block scope is indicated with the keyword 'let'.</p>\n\n<p>For those that believe there is only global and local scope, please explain why Mozilla would have an entire page describing the nuances of block scope in JS. </p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\" rel=\"nofollow noreferrer\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let</a></p>\n"},{"owner":{"reputation":1220,"user_id":2124732,"user_type":"registered","accept_rate":86,"profile_image":"https://www.gravatar.com/avatar/cf9d2998c0d9cb26334028f72185fe38?s=128&d=identicon&r=PG","display_name":"Christopher Dumas","link":"https://stackoverflow.com/users/2124732/christopher-dumas"},"is_accepted":false,"score":13,"last_activity_date":1503766935,"last_edit_date":1503766935,"creation_date":1370028694,"answer_id":16864566,"question_id":950087,"content_license":"CC BY-SA 3.0","body":"<p>My usual method is:</p>\n\n<pre><code>var require = function (src, cb) {\n    cb = cb || function () {};\n\n    var newScriptTag = document.createElement('script'),\n        firstScriptTag = document.getElementsByTagName('script')[0];\n    newScriptTag.src = src;\n    newScriptTag.async = true;\n    newScriptTag.onload = newScriptTag.onreadystatechange = function () {\n        (!this.readyState || this.readyState === 'loaded' || this.readyState === 'complete') &amp;&amp; (cb());\n    };\n    firstScriptTag.parentNode.insertBefore(newScriptTag, firstScriptTag);\n}\n</code></pre>\n\n<p>It works great and uses no page-reloads for me. I've tried the AJAX method (one of the other answers) but it doesn't seem to work as nicely for me.</p>\n\n<p>Here's an explanation of how the code works for those that are curious: essentially, it creates a new script tag (after the first one) of the URL. It sets it to asynchronous mode so it doesn't block the rest of the code, but calls a callback when the readyState (the state of the content to be loaded) changes to 'loaded'.</p>\n"},{"owner":{"reputation":24920,"user_id":190371,"user_type":"registered","accept_rate":82,"profile_image":"https://i.stack.imgur.com/IRQaF.png?s=128&g=1","display_name":"MarkPflug","link":"https://stackoverflow.com/users/190371/markpflug"},"is_accepted":false,"score":939,"last_activity_date":1502830347,"last_edit_date":1502830347,"creation_date":1282586598,"answer_id":3550319,"question_id":27509,"content_license":"CC BY-SA 3.0","body":"<p>I believe there are a number of incorrect answers to this topic. Contrary to common belief, \"undefined\" is <strong>not</strong> a keyword in JavaScript and can in fact have a value assigned to it.</p>\n\n<h1>Correct Code</h1>\n\n<p>The most robust way to perform this test is:</p>\n\n<pre><code>if (typeof myVar === \"undefined\")\n</code></pre>\n\n<p>This will always return the correct result, and even handles the situation where <code>myVar</code> is not declared.</p>\n\n<h1>Degenerate code. DO NOT USE.</h1>\n\n<pre><code>var undefined = false;  // Shockingly, this is completely legal!\nif (myVar === undefined) {\n    alert(\"You have been misled. Run away!\");\n}\n</code></pre>\n\n<p>Additionally, <code>myVar === undefined</code> will raise an error in the situation where myVar is undeclared.</p>\n"},{"owner":{"reputation":82464,"user_id":5423108,"user_type":"registered","profile_image":"https://i.stack.imgur.com/WtfBG.png?s=128&g=1","display_name":"Alireza","link":"https://stackoverflow.com/users/5423108/alireza"},"is_accepted":false,"score":10,"last_activity_date":1501389014,"last_edit_date":1501389014,"creation_date":1494338196,"answer_id":43871841,"question_id":336859,"content_license":"CC BY-SA 3.0","body":"<p>They are pretty similar with some small differences, first one is a variable which assigned to an anonymous function (Function Declaration) and second one is the normal way to create a function in JavaScript(Anonymous function Declaration), both has usage, cons and pros:</p>\n\n<p><strong>1. Function Expression</strong><br></p>\n\n<pre><code>var functionOne = function() {\n    // Some code\n};\n</code></pre>\n\n<blockquote>\n  <p>A Function Expression defines a function as a part of a larger\n  expression syntax (typically a variable assignment ). Functions\n  defined via Functions Expressions can be named or anonymous. Function\n  Expressions must not start with “function” (hence the parentheses\n  around the self invoking example below).</p>\n</blockquote>\n\n<p>Assign a variable to a function, means no Hoisting, as we know functions in JavaScript can Hoist, means they can be called before they get declared, while variables need to be declared before getting access to them, so means in this case we can not access the function before where it's declared, also it could be a way that you write your functions, for the functions which return another function, this kind of declaration could make sense, also in ECMA6 &amp; above you can assign this to an arrow function which can be used to call anonymous functions, also this way of declaring is a better way to create Constructor functions in JavaScript.</p>\n\n<p><strong>2. Function Declaration</strong><br></p>\n\n<pre><code>function functionTwo() {\n    // Some code\n}\n</code></pre>\n\n<blockquote>\n  <p>A Function Declaration defines a named function variable without\n  requiring variable assignment. Function Declarations occur as\n  standalone constructs and cannot be nested within non-function blocks.\n  It’s helpful to think of them as siblings of Variable Declarations.\n  Just as Variable Declarations must start with “var”, Function\n  Declarations must begin with “function”.</p>\n</blockquote>\n\n<p>This is the normal way of calling a function in JavaScript, this function can be called before you even declare it as in JavaScript all functions get Hoisted, but if you have 'use strict' this won't Hoist as expected, it's a good way to call all normal functions which are not big in lines and neither are a  constructor function.</p>\n\n<p>Also, if you need more info about how hoisting works in JavaScript, visit the link below:</p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Hoisting\" rel=\"noreferrer\">https://developer.mozilla.org/en-US/docs/Glossary/Hoisting</a></p>\n"},{"owner":{"reputation":2441,"user_id":4271117,"user_type":"registered","accept_rate":92,"profile_image":"https://i.stack.imgur.com/DhXtA.png?s=128&g=1","display_name":"Weihui Guo","link":"https://stackoverflow.com/users/4271117/weihui-guo"},"is_accepted":false,"score":0,"last_activity_date":1500571324,"creation_date":1500571324,"answer_id":45221326,"question_id":17289236,"content_license":"CC BY-SA 3.0","body":"<p>Turns out it's the Cache of the browser, using Chrome here. Simply check the \"Disable cache\" under Inspect (Element) solved my problem.</p>\n"},{"owner":{"reputation":3635,"user_id":2197555,"user_type":"registered","accept_rate":80,"profile_image":"https://i.stack.imgur.com/UoY2A.png?s=128&g=1","display_name":"gm2008","link":"https://stackoverflow.com/users/2197555/gm2008"},"is_accepted":false,"score":6,"last_activity_date":1500279106,"last_edit_date":1500279106,"creation_date":1492080164,"answer_id":43390114,"question_id":950087,"content_license":"CC BY-SA 3.0","body":"<p>If you use Angular, then a plugin module <a href=\"https://oclazyload.readme.io/docs/getting-started\" rel=\"nofollow noreferrer\">$ocLazyLoad</a> can help you to do that. </p>\n\n<p>Here are some quotes from its documentation:</p>\n\n<blockquote>\n  <p>Load one or more modules &amp; components with multiple files:</p>\n\n<pre><code>$ocLazyLoad.load(['testModule.js', 'testModuleCtrl.js', 'testModuleService.js']);\n</code></pre>\n  \n  <p>Load one or more modules with multiple files and specify a type where necessary:\n  Note: When using the requireJS style formatting (with js! at the beginning for example), do not specify a file extension. Use one or the other.</p>\n\n<pre><code>$ocLazyLoad.load([\n  'testModule.js',\n   {type: 'css', path: 'testModuleCtrl'},\n   {type: 'html', path: 'testModuleCtrl.html'},\n   {type: 'js', path: 'testModuleCtrl'},\n   'js!testModuleService',\n   'less!testModuleLessFile'\n]);\n</code></pre>\n  \n  <p>You can load external libs (not angular):</p>\n\n<pre><code>$ocLazyLoad.load(['testModule.js', \n   'bower_components/bootstrap/dist/js/bootstrap.js', 'anotherModule.js']);\n</code></pre>\n  \n  <p>You can also load css and template files:</p>\n\n<pre><code> $ocLazyLoad.load([\n     'bower_components/bootstrap/dist/js/bootstrap.js',\n     'bower_components/bootstrap/dist/css/bootstrap.css',\n     'partials/template1.html'\n ]);\n</code></pre>\n</blockquote>\n"},{"owner":{"reputation":2665,"user_id":288258,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/84abae19147be58790e36b14fdf086ea?s=128&d=identicon&r=PG","display_name":"Mbengue Assane","link":"https://stackoverflow.com/users/288258/mbengue-assane"},"is_accepted":false,"score":81,"last_activity_date":1498745286,"last_edit_date":1498745286,"creation_date":1364563584,"answer_id":15704206,"question_id":336859,"content_license":"CC BY-SA 3.0","body":"<p>An illustration of when to prefer the first method to the second one is when you need to avoid overriding a function's previous definitions.</p>\n\n<p>With</p>\n\n<pre><code>if (condition){\n    function myfunction(){\n        // Some code\n    }\n}\n</code></pre>\n\n<p>, this definition of <code>myfunction</code> will override any previous definition, since it will be done at parse-time.</p>\n\n<p>While</p>\n\n<pre><code>if (condition){\n    var myfunction = function (){\n        // Some code\n    }\n}\n</code></pre>\n\n<p>does the correct job of defining <code>myfunction</code> only when <code>condition</code> is met.</p>\n"},{"owner":{"reputation":13893,"user_id":216728,"user_type":"registered","accept_rate":75,"profile_image":"https://www.gravatar.com/avatar/13f27199f9bf9c9f1261dc8a49630a6b?s=128&d=identicon&r=PG","display_name":"nornagon","link":"https://stackoverflow.com/users/216728/nornagon"},"is_accepted":false,"score":52,"last_activity_date":1498424680,"last_edit_date":1498424680,"creation_date":1264224045,"answer_id":2122234,"question_id":950087,"content_license":"CC BY-SA 3.0","body":"<p>I just wrote this JavaScript code (using <a href=\"http://en.wikipedia.org/wiki/Prototype_JavaScript_Framework\" rel=\"noreferrer\">Prototype</a> for <a href=\"http://en.wikipedia.org/wiki/Document_Object_Model\" rel=\"noreferrer\">DOM</a> manipulation):</p>\n\n<pre><code>var require = (function() {\n    var _required = {};\n    return (function(url, callback) {\n        if (typeof url == 'object') {\n            // We've (hopefully) got an array: time to chain!\n            if (url.length &gt; 1) {\n                // Load the nth file as soon as everything up to the\n                // n-1th one is done.\n                require(url.slice(0, url.length - 1), function() {\n                    require(url[url.length - 1], callback);\n                });\n            } else if (url.length == 1) {\n                require(url[0], callback);\n            }\n            return;\n        }\n        if (typeof _required[url] == 'undefined') {\n            // Haven't loaded this URL yet; gogogo!\n            _required[url] = [];\n\n            var script = new Element('script', {\n                src: url,\n                type: 'text/javascript'\n            });\n            script.observe('load', function() {\n                console.log(\"script \" + url + \" loaded.\");\n                _required[url].each(function(cb) {\n                    cb.call(); // TODO: does this execute in the right context?\n                });\n                _required[url] = true;\n            });\n\n            $$('head')[0].insert(script);\n        } else if (typeof _required[url] == 'boolean') {\n            // We already loaded the thing, so go ahead.\n            if (callback) {\n                callback.call();\n            }\n            return;\n        }\n\n        if (callback) {\n            _required[url].push(callback);\n        }\n    });\n})();\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>&lt;script src=\"prototype.js\"&gt;&lt;/script&gt;\n&lt;script src=\"require.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n    require(['foo.js','bar.js'], function () {\n        /* Use foo.js and bar.js here */\n    });\n&lt;/script&gt;\n</code></pre>\n\n<p>Gist: <a href=\"http://gist.github.com/284442\" rel=\"noreferrer\">http://gist.github.com/284442</a>.</p>\n"},{"owner":{"reputation":908,"user_id":5326034,"user_type":"registered","accept_rate":60,"profile_image":"https://i.stack.imgur.com/eNNTd.jpg?s=128&g=1","display_name":"Ganesh","link":"https://stackoverflow.com/users/5326034/ganesh"},"is_accepted":false,"score":1,"last_activity_date":1496839909,"creation_date":1496839909,"answer_id":44413195,"question_id":7975093,"content_license":"CC BY-SA 3.0","body":"<p>You can pass $ in function()</p>\n\n<pre><code>jQuery(document).ready(function($){\n\n// jQuery code is in here\n\n});\n</code></pre>\n\n<p>or you can replace <code>$(document);</code> with this <code>jQuery(document);</code></p>\n\n<p>or you can use <code>jQuery.noConflict()</code></p>\n\n<pre><code>var jq=jQuery.noConflict();\njq(document).ready(function(){  \n  jq('selector').show();\n});\n</code></pre>\n"},{"owner":{"reputation":16578,"user_id":2749397,"user_type":"registered","accept_rate":78,"profile_image":"https://i.stack.imgur.com/rcNMz.png?s=128&g=1","display_name":"gboffi","link":"https://stackoverflow.com/users/2749397/gboffi"},"is_accepted":false,"score":1,"last_activity_date":1496147306,"creation_date":1496147306,"answer_id":44262317,"question_id":38987,"content_license":"CC BY-SA 3.0","body":"<p>The question is tagged <code>python-3x</code> but, taking into account that it's a relatively recent addition and that the most voted, accepted answer deals extensively with a Python 2.x solution, I dare add a one liner that draws on an irritating feature of Python 2.x list comprehension, that is <em>name leaking</em>...</p>\n\n<pre><code>$ python2\nPython 2.7.13 (default, Jan 19 2017, 14:48:08) \n[GCC 6.3.0 20170118] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; x = {'a':1, 'b': 2}\n&gt;&gt;&gt; y = {'b':10, 'c': 11}\n&gt;&gt;&gt; [z.update(d) for z in [{}] for d in (x, y)]\n[None, None]\n&gt;&gt;&gt; z\n{'a': 1, 'c': 11, 'b': 10}\n&gt;&gt;&gt; ...\n</code></pre>\n\n<p>I'm happy to say that the above doesn't work any more on any version of Python 3.</p>\n"},{"owner":{"reputation":5819,"user_id":2761641,"user_type":"registered","accept_rate":58,"profile_image":"https://i.stack.imgur.com/JuwBc.jpg?s=128&g=1","display_name":"Akshay Vijay Jain","link":"https://stackoverflow.com/users/2761641/akshay-vijay-jain"},"is_accepted":false,"score":5,"last_activity_date":1495748055,"last_edit_date":1495748055,"creation_date":1494824457,"answer_id":43971846,"question_id":950087,"content_license":"CC BY-SA 3.0","body":"<p>It's very simple. Suppose you want to import file A.js in file B.js.</p>\n\n<p><strong>Now it's sure you have linked B.js in an HTML file, then just link A.js before B.js in that HTML file. Then the public variables of A.js will be available inside the B.js</strong></p>\n\n<p>This does not require a complicated answer.</p>\n"},{"owner":{"reputation":359,"user_id":6698976,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/458a953846aa0f3593d20a4388e1fc4f?s=128&d=identicon&r=PG","display_name":"Anoop Rai","link":"https://stackoverflow.com/users/6698976/anoop-rai"},"is_accepted":false,"score":12,"last_activity_date":1491722036,"last_edit_date":1491722036,"creation_date":1471166035,"answer_id":38940765,"question_id":336859,"content_license":"CC BY-SA 3.0","body":"<p>In JavaScript there are two ways to create functions:</p>\n\n<ol>\n<li><p>Function declaration:</p>\n\n<pre><code>function fn(){\n  console.log(\"Hello\");\n}\nfn();\n</code></pre>\n\n<p>This is very basic, self-explanatory, used in many languages and standard across C family of languages. We declared a function defined it and executed it by calling it.</p>\n\n<p>What you should be knowing is that functions are actually objects in JavaScript; internally we have created an object for above function and given it a name called fn or the reference to the object is stored in fn. Functions are objects in JavaScript; an instance of function is actually an object instance.</p></li>\n<li><p>Function expression:</p>\n\n<pre><code>var fn=function(){\n  console.log(\"Hello\");\n}\nfn();\n</code></pre>\n\n<p>JavaScript has first-class functions, that is, create a function and assign it to a variable just like you create a string or number and assign it to a variable. Here, the fn variable is assigned to a function. The reason for this concept is functions are objects in JavaScript; fn is pointing to the object instance of the above function. We have initialized a function and assigned it to a variable. It's not executing the function and assigning the result.</p></li>\n</ol>\n\n<p>Reference: <em><a href=\"http://jkoder.com/javascript-function-declaration-syntax-var-fn-function-vs-function-fn/\" rel=\"noreferrer\">JavaScript function declaration syntax: var fn = function() {} vs function fn() {}</a></em></p>\n"},{"owner":{"reputation":14647,"user_id":2351696,"user_type":"registered","accept_rate":91,"profile_image":"https://i.stack.imgur.com/MwlR3.jpg?s=128&g=1","display_name":"suhailvs","link":"https://stackoverflow.com/users/2351696/suhailvs"},"is_accepted":false,"score":112,"last_activity_date":1491721751,"last_edit_date":1592644375,"creation_date":1407552338,"answer_id":25214775,"question_id":336859,"content_license":"CC BY-SA 4.0","body":"<p>A better explanation to <a href=\"https://stackoverflow.com/a/336868/2351696\">Greg's answer</a></p>\n<pre><code>functionTwo();\nfunction functionTwo() {\n}\n</code></pre>\n<p><strong>Why no error? We were always taught that expressions are executed from top to bottom(??)</strong></p>\n<h2>Because:</h2>\n<blockquote>\n<p>Function declarations and variable declarations are always moved (<code>hoisted</code>) invisibly to the top of their containing scope by the JavaScript interpreter. Function parameters and language-defined names are, obviously, already there. <a href=\"http://www.adequatelygood.com/2010/2/JavaScript-Scoping-and-Hoisting\" rel=\"noreferrer\">ben cherry</a></p>\n</blockquote>\n<p>This means that code like this:</p>\n<pre><code>functionOne();                  ---------------      var functionOne;\n                                | is actually |      functionOne();\nvar functionOne = function(){   | interpreted |--&gt;\n};                              |    like     |      functionOne = function(){\n                                ---------------      };\n</code></pre>\n<p>Notice that the assignment portion of the declarations were not hoisted. Only the name is hoisted.</p>\n<p><em>But in the case with function declarations, the entire function body will be hoisted as well</em>:</p>\n<pre><code>functionTwo();              ---------------      function functionTwo() {\n                            | is actually |      };\nfunction functionTwo() {    | interpreted |--&gt;\n}                           |    like     |      functionTwo();\n                            ---------------\n</code></pre>\n"},{"owner":{"reputation":68892,"user_id":367138,"user_type":"registered","profile_image":"https://i.stack.imgur.com/L9Q9v.png?s=128&g=1","display_name":"Oleksandr T.","link":"https://stackoverflow.com/users/367138/oleksandr-t"},"is_accepted":true,"score":29,"last_activity_date":1490864427,"last_edit_date":1490864427,"creation_date":1424081830,"answer_id":28539089,"question_id":28539077,"content_license":"CC BY-SA 3.0","body":"<p>You need convert <code>checkbox</code>(which is <code>DOMElement</code>) to <code>jQuery</code> Object </p>\n\n<pre><code>var columnId = $(checkbox).data('column');\n</code></pre>\n\n<p>Change <code>checkbox.prop('checked')</code> to <code>$(checkbox).prop('checked')</code></p>\n\n<p>Also in your example there are three elements with same id (<code>id=\"column-selector\"</code>), I've changed to class (<code>class=\"column-selector\"</code>), because id <strong>must</strong> be unique</p>\n\n<p><a href=\"http://jsfiddle.net/otz8nrxn/1/\" rel=\"noreferrer\"><code>Example</code></a></p>\n"},{"owner":{"reputation":64073,"user_id":192839,"user_type":"registered","accept_rate":71,"profile_image":"https://i.stack.imgur.com/GNPsv.jpg?s=128&g=1","display_name":"Mike Graham","link":"https://stackoverflow.com/users/192839/mike-graham"},"is_accepted":false,"score":4,"last_activity_date":1490758852,"last_edit_date":1490758852,"creation_date":1479473609,"answer_id":40677646,"question_id":38987,"content_license":"CC BY-SA 3.0","body":"<p>You can use <a href=\"http://toolz.readthedocs.io/en/latest/api.html#toolz.dicttoolz.merge\" rel=\"nofollow noreferrer\"><code>toolz.merge([x, y])</code></a> for this.</p>\n"},{"owner":{"reputation":1918,"user_id":1128552,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/e78156981ab1e59487b777032143bedd?s=128&d=identicon&r=PG","display_name":"lebobbi","link":"https://stackoverflow.com/users/1128552/lebobbi"},"is_accepted":false,"score":85,"last_activity_date":1487690936,"last_edit_date":1487690936,"creation_date":1455222753,"answer_id":35349467,"question_id":12694530,"content_license":"CC BY-SA 3.0","body":"<p>TypeScript does something similar to what less or sass does for CSS. They are super sets of it, which means that every JS code you write is valid TypeScript code. Plus you can use the other goodies that it adds to the language, and the transpiled code will be valid js. You can even set the JS version that you want your resulting code on. </p>\n\n<p>Currently TypeScript is a super set of ES2015, so might be a good choice to start learning the new js features and transpile to the needed standard for your project. </p>\n"},{"owner":{"reputation":5295,"user_id":341616,"user_type":"registered","accept_rate":80,"profile_image":"https://www.gravatar.com/avatar/cd595800e7c1a3e391ec6bcc16482f4c?s=128&d=identicon&r=PG","display_name":"Rob","link":"https://stackoverflow.com/users/341616/rob"},"is_accepted":false,"score":66,"last_activity_date":1485671993,"last_edit_date":1495540519,"creation_date":1281296680,"answer_id":3435811,"question_id":336859,"content_license":"CC BY-SA 3.0","body":"<p>An important reason is to add one and only one variable as the \"Root\" of your namespace...</p>\n\n<pre><code>var MyNamespace = {}\nMyNamespace.foo= function() {\n\n}\n</code></pre>\n\n<p>or</p>\n\n<pre><code>var MyNamespace = {\n  foo: function() {\n  },\n  ...\n}\n</code></pre>\n\n<p>There are many techniques for namespacing. It's become more important with the plethora of JavaScript modules available.</p>\n\n<p>Also see <em><a href=\"https://stackoverflow.com/questions/881515/\">How do I declare a namespace in JavaScript?</a></em></p>\n"},{"owner":{"reputation":193,"user_id":620615,"user_type":"registered","accept_rate":40,"profile_image":"https://www.gravatar.com/avatar/2df934dc04496775f613de4c78fded77?s=128&d=identicon&r=PG","display_name":"JoT","link":"https://stackoverflow.com/users/620615/jot"},"is_accepted":false,"score":4,"last_activity_date":1484840104,"last_edit_date":1484840104,"creation_date":1476822148,"answer_id":40117405,"question_id":7975093,"content_license":"CC BY-SA 3.0","body":"<p>I would use this</p>\n\n<pre><code>(function ($) {\n   $(document);\n}(jQuery));\n</code></pre>\n"},{"owner":{"reputation":4023,"user_id":1676444,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/8fee3da2c4144ecefe66420db4de1cce?s=128&d=identicon&r=PG","display_name":"Turnerj","link":"https://stackoverflow.com/users/1676444/turnerj"},"is_accepted":false,"score":17,"last_activity_date":1481450679,"last_edit_date":1495542899,"creation_date":1420102695,"answer_id":27729485,"question_id":950087,"content_license":"CC BY-SA 3.0","body":"<p>In case you are using <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/basic_usage\" rel=\"noreferrer\">Web Workers</a> and want to include additional scripts in the scope of the worker, the other answers provided about adding scripts to the <code>head</code> tag, etc. will not work for you.</p>\n\n<p>Fortunately, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/basic_usage#Importing_scripts_and_libraries\" rel=\"noreferrer\">Web Workers have their own <code>importScripts</code> function</a> which is a global function in the scope of the Web Worker, native to the browser itself as it <a href=\"https://html.spec.whatwg.org/multipage/workers.html#importing-scripts-and-libraries\" rel=\"noreferrer\">is part of the specification</a>.</p>\n\n<p>Alternatively, <a href=\"https://stackoverflow.com/a/10939737/1676444\">as the second highest voted answer to your question highlights</a>, <a href=\"http://www.requirejs.org/\" rel=\"noreferrer\">RequireJS</a> can also handle including scripts inside a Web Worker (likely calling <code>importScripts</code> itself, but with a few other useful features).</p>\n"},{"owner":{"reputation":980,"user_id":1740161,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/e57ead4cfe97b2fc48c63ba236ab5b28?s=128&d=identicon&r=PG","display_name":"draupnie","link":"https://stackoverflow.com/users/1740161/draupnie"},"is_accepted":false,"score":78,"last_activity_date":1481449627,"last_edit_date":1481449627,"creation_date":1429235814,"answer_id":29688912,"question_id":950087,"content_license":"CC BY-SA 3.0","body":"<p>Statement <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import\" rel=\"noreferrer\"><code>import</code></a> is in ECMAScript 6.</p>\n\n<p>Syntax</p>\n\n<pre><code>import name from \"module-name\";\nimport { member } from \"module-name\";\nimport { member as alias } from \"module-name\";\nimport { member1 , member2 } from \"module-name\";\nimport { member1 , member2 as alias2 , [...] } from \"module-name\";\nimport name , { member [ , [...] ] } from \"module-name\";\nimport \"module-name\" as name;\n</code></pre>\n"},{"owner":{"reputation":15754,"user_id":984471,"user_type":"registered","profile_image":"https://i.stack.imgur.com/zAexx.png?s=128&g=1","display_name":"Manohar Reddy Poreddy","link":"https://stackoverflow.com/users/984471/manohar-reddy-poreddy"},"is_accepted":false,"score":21,"last_activity_date":1481449511,"last_edit_date":1481449511,"creation_date":1437531330,"answer_id":31552759,"question_id":950087,"content_license":"CC BY-SA 3.0","body":"<p>I had a simple issue, but I was baffled by responses to this question.</p>\n\n<p>I had to use a variable (myVar1) defined in one JavaScript file (myvariables.js) in another JavaScript file (main.js).</p>\n\n<p>For this I did as below:</p>\n\n<p>Loaded the JavaScript code in the HTML file, in the correct order, myvariables.js first, then main.js:</p>\n\n<pre><code>&lt;html&gt;\n    &lt;body onload=\"bodyReady();\" &gt;\n\n        &lt;script src=\"myvariables.js\" &gt; &lt;/script&gt;\n        &lt;script src=\"main.js\" &gt; &lt;/script&gt;\n\n        &lt;!-- Some other code --&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>File: myvariables.js</p>\n\n<pre><code>var myVar1 = \"I am variable from myvariables.js\";\n</code></pre>\n\n<p>File: main.js</p>\n\n<pre><code>// ...\nfunction bodyReady() {\n    // ...\n    alert (myVar1);    // This shows \"I am variable from myvariables.js\", which I needed\n    // ...\n}\n// ...\n</code></pre>\n\n<p>As you saw, I had use a variable in one JavaScript file in another JavaScript file, but I didn't need to include one in another. I just needed to ensure that the first JavaScript file loaded before the second JavaScript file, and, the first JavaScript file's variables are accessible in the second JavaScript file, automatically.</p>\n\n<p>This saved my day. I hope this helps.</p>\n"},{"owner":{"reputation":1320,"user_id":1507556,"user_type":"registered","accept_rate":16,"profile_image":"https://i.stack.imgur.com/WEiXV.png?s=128&g=1","display_name":"Adem İlhan","link":"https://stackoverflow.com/users/1507556/adem-%c4%b0lhan"},"is_accepted":false,"score":27,"last_activity_date":1481449320,"last_edit_date":1481449320,"creation_date":1437720793,"answer_id":31604044,"question_id":950087,"content_license":"CC BY-SA 3.0","body":"<p>If your intention to load the JavaScript file is <strong>using the functions from the imported/included file</strong>, you can also define a global object and set the functions as object items. For instance:</p>\n\n<h3>global.js</h3>\n\n<pre><code>A = {};\n</code></pre>\n\n<h3>file1.js</h3>\n\n<pre><code>A.func1 = function() {\n  console.log(\"func1\");\n}\n</code></pre>\n\n<h3>file2.js</h3>\n\n<pre><code>A.func2 = function() {\n  console.log(\"func2\");\n}\n</code></pre>\n\n<h3>main.js</h3>\n\n<pre><code>A.func1();\nA.func2();\n</code></pre>\n\n<p>You just need to be careful when you are including scripts in an HTML file. The order should be as in below:</p>\n\n<pre><code>&lt;head&gt;\n  &lt;script type=\"text/javascript\" src=\"global.js\"&gt;&lt;/script&gt;\n  &lt;script type=\"text/javascript\" src=\"file1.js\"&gt;&lt;/script&gt;\n  &lt;script type=\"text/javascript\" src=\"file2.js\"&gt;&lt;/script&gt;\n  &lt;script type=\"text/javascript\" src=\"main.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n</code></pre>\n"},{"owner":{"reputation":150,"user_id":5070482,"user_type":"registered","accept_rate":60,"profile_image":"https://lh3.googleusercontent.com/-iI5ZgjkwvFU/AAAAAAAAAAI/AAAAAAAAABM/uhPzDzbRjdw/photo.jpg?sz=128","display_name":"Rahul Srivastava","link":"https://stackoverflow.com/users/5070482/rahul-srivastava"},"is_accepted":false,"score":8,"last_activity_date":1481449168,"last_edit_date":1481449168,"creation_date":1464134802,"answer_id":37425858,"question_id":950087,"content_license":"CC BY-SA 3.0","body":"<p>I basically do it like the following, creating a new element and attach that to head:</p>\n\n<pre><code>var x = document.createElement('script');\nx.src = 'http://example.com/test.js';\ndocument.getElementsByTagName(\"head\")[0].appendChild(x);\n</code></pre>\n\n<p>In <a href=\"http://en.wikipedia.org/wiki/JQuery\" rel=\"noreferrer\">jQuery</a>:</p>\n\n<pre><code>// jQuery\n$.getScript('/path/to/imported/script.js', function()\n{\n    // Script is now loaded and executed.\n    // Put your dependent JavaScript code here.\n});\n</code></pre>\n"},{"owner":{"reputation":1463,"user_id":582614,"user_type":"registered","accept_rate":96,"profile_image":"https://www.gravatar.com/avatar/4b894af061d334aa8e475c5ba77f0b9c?s=128&d=identicon&r=PG","display_name":"MiBol","link":"https://stackoverflow.com/users/582614/mibol"},"is_accepted":false,"score":6,"last_activity_date":1481449056,"last_edit_date":1481449056,"creation_date":1470597248,"answer_id":38817619,"question_id":950087,"content_license":"CC BY-SA 3.0","body":"<p>I have the requirement to asynchronously load an array of JavaScript files and at the final make a callback. Basically my best approach is the following:</p>\n\n<pre><code>// Load a JavaScript file from other JavaScript file\nfunction loadScript(urlPack, callback) {\n    var url = urlPack.shift();\n    var subCallback;\n\n    if (urlPack.length == 0) subCallback = callback;\n    else subCallback = function () {\n        console.log(\"Log script: \" + new Date().getTime());\n        loadScript(urlPack, callback);\n    }\n\n    // Adding the script tag to the head as suggested before\n    var head = document.getElementsByTagName('head')[0];\n    var script = document.createElement('script');\n    script.type = 'text/javascript';\n    script.src = url;\n\n    // Then bind the event to the callback function.\n    // There are several events for cross browser compatibility.\n    script.onreadystatechange = subCallback;\n    script.onload = subCallback;\n\n    // Fire the loading\n    head.appendChild(script);\n}\n</code></pre>\n\n<p>Example:</p>\n\n<pre><code>loadScript(\n[\n    \"js/DataTable/jquery.dataTables.js\",\n    \"js/DataTable/dataTables.bootstrap.js\",\n    \"js/DataTable/dataTables.buttons.min.js\",\n    \"js/DataTable/dataTables.colReorder.min.js\",\n    \"js/DataTable/dataTables.fixedHeader.min.js\",\n    \"js/DataTable/buttons.bootstrap.min.js\",\n    \"js/DataTable/buttons.colVis.min.js\",\n    \"js/DataTable/buttons.html5.min.js\"\n], function() { gpLoad(params); });\n</code></pre>\n\n<p>The second script will not load until the first is completely loaded, and so...</p>\n\n<p>Results:</p>\n\n<p><a href=\"https://i.stack.imgur.com/6Y3vU.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/6Y3vU.png\" alt=\"Result\"></a></p>\n"},{"owner":{"reputation":1348,"user_id":5235380,"user_type":"registered","accept_rate":64,"profile_image":"https://i.stack.imgur.com/G88kW.jpg?s=128&g=1","display_name":"Evgeniy Miroshnichenko","link":"https://stackoverflow.com/users/5235380/evgeniy-miroshnichenko"},"is_accepted":false,"score":3,"last_activity_date":1481448868,"last_edit_date":1481448868,"creation_date":1471000709,"answer_id":38916704,"question_id":950087,"content_license":"CC BY-SA 3.0","body":"<p>You can't import, but you can reference.</p>\n\n<p><a href=\"https://en.wikipedia.org/wiki/PhpStorm\" rel=\"nofollow noreferrer\">PhpShtorm</a> IDE. To reference, in one <code>.js</code> file to another <code>.js</code>, just add this to the top of the file:</p>\n\n<pre><code>&lt;reference path=\"../js/file.js\" /&gt;\n</code></pre>\n\n<p>Of course, you should use your own PATH to the JavaScript file.</p>\n\n<p>I don't know if it will work in other IDEs. Probably yes, just try. It should work in Visual Studio too.</p>\n"},{"owner":{"reputation":609,"user_id":5646198,"user_type":"registered","accept_rate":17,"profile_image":"https://lh5.googleusercontent.com/-Qog9KBIh5lA/AAAAAAAAAAI/AAAAAAAAAUc/lgVUmUZ_WEM/photo.jpg?sz=128","display_name":"Mesut Yiğit","link":"https://stackoverflow.com/users/5646198/mesut-yi%c4%9fit"},"is_accepted":false,"score":1,"last_activity_date":1476865134,"creation_date":1476865134,"answer_id":40125812,"question_id":950087,"content_license":"CC BY-SA 3.0","body":"<pre><code>var xxx = require(\"../lib/your-library.js\")\n</code></pre>\n\n<p>or</p>\n\n<pre><code>import xxx from \"../lib/your-library.js\" //get default export\nimport {specificPart} from '../lib/your-library.js' //get named export\nimport * as _name from '../lib/your-library.js'  //get full export to alias _name\n</code></pre>\n"},{"owner":{"reputation":41928,"user_id":26394,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/ed7cea8d8806b73c95f26169c1f6dd43?s=128&d=identicon&r=PG","display_name":"Eugene Lazutkin","link":"https://stackoverflow.com/users/26394/eugene-lazutkin"},"is_accepted":false,"score":1994,"last_activity_date":1476131935,"last_edit_date":1476131935,"creation_date":1228326215,"answer_id":338053,"question_id":336859,"content_license":"CC BY-SA 3.0","body":"<p>First I want to correct Greg: <code>function abc(){}</code> is scoped too &mdash; the name <code>abc</code> is defined in the scope where this definition is encountered. Example:</p>\n\n<pre><code>function xyz(){\n  function abc(){};\n  // abc is defined here...\n}\n// ...but not here\n</code></pre>\n\n<p>Secondly, it is possible to combine both styles:</p>\n\n<pre><code>var xyz = function abc(){};\n</code></pre>\n\n<p><code>xyz</code> is going to be defined as usual, <code>abc</code> is undefined in all browsers but Internet&nbsp;Explorer &mdash; do not rely on it being defined. But it will be defined inside its body:</p>\n\n<pre><code>var xyz = function abc(){\n  // xyz is visible here\n  // abc is visible here\n}\n// xyz is visible here\n// abc is undefined here\n</code></pre>\n\n<p>If you want to alias functions on all browsers, use this kind of declaration:</p>\n\n<pre><code>function abc(){};\nvar xyz = abc;\n</code></pre>\n\n<p>In this case, both <code>xyz</code> and <code>abc</code> are aliases of the same object:</p>\n\n<pre><code>console.log(xyz === abc); // prints \"true\"\n</code></pre>\n\n<p>One compelling reason to use the combined style is the \"name\" attribute of function objects (<strong>not supported by Internet&nbsp;Explorer</strong>). Basically when you define a function like</p>\n\n<pre><code>function abc(){};\nconsole.log(abc.name); // prints \"abc\"\n</code></pre>\n\n<p>its name is automatically assigned. But when you define it like</p>\n\n<pre><code>var abc = function(){};\nconsole.log(abc.name); // prints \"\"\n</code></pre>\n\n<p>its name is empty &mdash; we created an anonymous function and assigned it to some variable.</p>\n\n<p>Another good reason to use the combined style is to use a short internal name to refer to itself, while providing a long non-conflicting name for external users:</p>\n\n<pre><code>// Assume really.long.external.scoped is {}\nreally.long.external.scoped.name = function shortcut(n){\n  // Let it call itself recursively:\n  shortcut(n - 1);\n  // ...\n  // Let it pass itself as a callback:\n  someFunction(shortcut);\n  // ...\n}\n</code></pre>\n\n<p>In the example above we can do the same with an external name, but it'll be too unwieldy (and slower).</p>\n\n<p><em>(Another way to refer to itself is to use <code>arguments.callee</code>, which is still relatively long, and not supported in the strict mode.)</em></p>\n\n<p>Deep down, JavaScript treats both statements differently. This is a function declaration:</p>\n\n<pre><code>function abc(){}\n</code></pre>\n\n<p><code>abc</code> here is defined everywhere in the current scope:</p>\n\n<pre><code>// We can call it here\nabc(); // Works\n\n// Yet, it is defined down there.\nfunction abc(){}\n\n// We can call it again\nabc(); // Works\n</code></pre>\n\n<p>Also, it hoisted through a <code>return</code> statement:</p>\n\n<pre><code>// We can call it here\nabc(); // Works\nreturn;\nfunction abc(){}\n</code></pre>\n\n<p>This is a function expression:</p>\n\n<pre><code>var xyz = function(){};\n</code></pre>\n\n<p><code>xyz</code> here is defined from the point of assignment:</p>\n\n<pre><code>// We can't call it here\nxyz(); // UNDEFINED!!!\n\n// Now it is defined\nxyz = function(){}\n\n// We can call it here\nxyz(); // works\n</code></pre>\n\n<p>Function declaration vs. function expression is the real reason why there is a difference demonstrated by Greg.</p>\n\n<p>Fun fact:</p>\n\n<pre><code>var xyz = function abc(){};\nconsole.log(xyz.name); // Prints \"abc\"\n</code></pre>\n\n<p>Personally, I prefer the \"function expression\" declaration because this way I can control the visibility. When I define the function like</p>\n\n<pre><code>var abc = function(){};\n</code></pre>\n\n<p>I know that I defined the function locally. When I define the function like</p>\n\n<pre><code>abc = function(){};\n</code></pre>\n\n<p>I know that I defined it globally providing that I didn't define <code>abc</code> anywhere in the chain of scopes. This style of definition is resilient even when used inside <code>eval()</code>. While the definition</p>\n\n<pre><code>function abc(){};\n</code></pre>\n\n<p>depends on the context and may leave you guessing where it is actually defined, especially in the case of <code>eval()</code> &mdash; the answer is: It depends on the browser.</p>\n"},{"owner":{"reputation":1090,"user_id":122894,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/a84beda8be2bea9e2e052c72b52114de?s=128&d=identicon&r=PG","display_name":"Mathieu Larose","link":"https://stackoverflow.com/users/122894/mathieu-larose"},"is_accepted":false,"score":29,"last_activity_date":1475432177,"last_edit_date":1475432177,"creation_date":1350439785,"answer_id":12926103,"question_id":38987,"content_license":"CC BY-SA 3.0","body":"<p><strong>Two dictionaries</strong></p>\n\n<pre><code>def union2(dict1, dict2):\n    return dict(list(dict1.items()) + list(dict2.items()))\n</code></pre>\n\n<p><strong><em>n</em> dictionaries</strong></p>\n\n<pre><code>def union(*dicts):\n    return dict(itertools.chain.from_iterable(dct.items() for dct in dicts))\n</code></pre>\n\n<p><code>sum</code> has bad performance. See <a href=\"https://mathieularose.com/how-not-to-flatten-a-list-of-lists-in-python/\" rel=\"noreferrer\">https://mathieularose.com/how-not-to-flatten-a-list-of-lists-in-python/</a></p>\n"},{"owner":{"reputation":4343,"user_id":1549191,"user_type":"registered","accept_rate":80,"profile_image":"https://i.stack.imgur.com/9t2Vn.jpg?s=128&g=1","display_name":"Priyanshu Chauhan","link":"https://stackoverflow.com/users/1549191/priyanshu-chauhan"},"is_accepted":false,"score":18,"last_activity_date":1475206697,"last_edit_date":1495542899,"creation_date":1437980847,"answer_id":31646880,"question_id":9329446,"content_license":"CC BY-SA 3.0","body":"<p>There's no inbuilt ability to break in <code>forEach</code>. To interrupt execution use the <code>Array#some</code> like below:</p>\n\n<pre><code>[1,2,3].some(function(number) {\n    return number === 1;\n});\n</code></pre>\n\n<p>This works because <code>some</code> returns true as soon as any of the callbacks, executed in array order, returns true, short-circuiting the execution of the rest. \n<a href=\"https://stackoverflow.com/questions/2641347/how-to-short-circuit-array-foreach-like-calling-break\">Original Answer</a>\nsee Array prototype for <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.17\" rel=\"noreferrer\">some</a></p>\n"},{"owner":{"reputation":429,"user_id":2740306,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/0451b1c8b20f4fac1d8318a63d722686?s=128&d=identicon&r=PG&f=1","display_name":"Tim","link":"https://stackoverflow.com/users/2740306/tim"},"is_accepted":false,"score":23,"last_activity_date":1475152100,"last_edit_date":1475152100,"creation_date":1391095553,"answer_id":21460530,"question_id":9329446,"content_license":"CC BY-SA 3.0","body":"<p>This is an iterator for NON-sparse list where the index starts at 0, which is the typical scenario when dealing with document.getElementsByTagName or document.querySelectorAll)</p>\n\n<pre><code>function each( fn, data ) {\n\n    if(typeof fn == 'string')\n        eval('fn = function(data, i){' + fn + '}');\n\n    for(var i=0, L=this.length; i &lt; L; i++) \n        fn.call( this[i], data, i );   \n\n    return this;\n}\n\nArray.prototype.each = each;  \n</code></pre>\n\n<p><strong>Examples of usage:</strong></p>\n\n<p><strong>Example #1</strong></p>\n\n<pre><code>var arr = [];\n[1, 2, 3].each( function(a){ a.push( this * this}, arr);\narr = [1, 4, 9]\n</code></pre>\n\n<p><strong>Example #2</strong></p>\n\n<pre><code>each.call(document.getElementsByTagName('p'), \"this.className = data;\",'blue');\n</code></pre>\n\n<p>Each p tag gets <code>class=\"blue\"</code></p>\n\n<p><strong>Example #3</strong></p>\n\n<pre><code>each.call(document.getElementsByTagName('p'), \n    \"if( i % 2 == 0) this.className = data;\",\n    'red'\n);\n</code></pre>\n\n<p>Every other p tag gets <code>class=\"red\"</code>></p>\n\n<p><strong>Example #4</strong></p>\n\n<pre><code>each.call(document.querySelectorAll('p.blue'), \n    function(newClass, i) {\n        if( i &lt; 20 )\n            this.className = newClass;\n    }, 'green'\n);\n</code></pre>\n\n<p>And finally the first 20 blue p tags are changed to green</p>\n\n<p>Caution when using string as function: the function is created out-of-context and ought to be used only where you are certain of variable scoping.  Otherwise, better to pass functions where scoping is more intuitive.</p>\n"},{"owner":{"reputation":3385,"user_id":833208,"user_type":"registered","accept_rate":77,"profile_image":"https://www.gravatar.com/avatar/39c8c34132fc397875f30a1ee2b2997c?s=128&d=identicon&r=PG","display_name":"Robino","link":"https://stackoverflow.com/users/833208/robino"},"is_accepted":false,"score":43,"last_activity_date":1475145925,"last_edit_date":1475145925,"creation_date":1453290382,"answer_id":34899183,"question_id":38987,"content_license":"CC BY-SA 3.0","body":"<p>Be pythonic. Use a <a href=\"https://docs.python.org/2/tutorial/datastructures.html#dictionaries\" rel=\"noreferrer\">comprehension</a>:</p>\n\n<pre><code>z={i:d[i] for d in [x,y] for i in d}\n\n&gt;&gt;&gt; print z\n{'a': 1, 'c': 11, 'b': 10}\n</code></pre>\n"},{"owner":{"reputation":3045,"user_id":373386,"user_type":"registered","accept_rate":49,"profile_image":"https://www.gravatar.com/avatar/8f7924b069f96fb83ce170111a9a86a5?s=128&d=identicon&r=PG","display_name":"Eddy","link":"https://stackoverflow.com/users/373386/eddy"},"is_accepted":false,"score":0,"last_activity_date":1469707477,"creation_date":1469707477,"answer_id":38635859,"question_id":17289236,"content_license":"CC BY-SA 3.0","body":"<p>In my case it was a simple typo in <code>index.html</code>: </p>\n\n<pre><code>&lt;script src=\"assets/javascript/controllers/questionssIndexController.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>that should have been</p>\n\n<pre><code>&lt;script src=\"assets/javascript/controllers/questionsIndexController.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>without the extra <code>s</code> in the controller's name. </p>\n"},{"owner":{"reputation":4060,"user_id":5969463,"user_type":"registered","accept_rate":32,"profile_image":"https://www.gravatar.com/avatar/a2db8122df98ef95142e91602706ceff?s=128&d=identicon&r=PG&f=1","display_name":"MadPhysicist","link":"https://stackoverflow.com/users/5969463/madphysicist"},"is_accepted":false,"score":0,"last_activity_date":1468807402,"creation_date":1468807402,"answer_id":38427659,"question_id":17289236,"content_license":"CC BY-SA 3.0","body":"<p>To fix this problem, I had to discover that I misspelled the name of the controller in the declaration of Angular routes:</p>\n\n<pre><code>.when('/todo',{\n            templateUrl: 'partials/todo.html',\n            controller: 'TodoCtrl'\n        })\n</code></pre>\n"},{"owner":{"reputation":178,"user_id":2440698,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/124c64a16ea8a8d929873794360922c9?s=128&d=identicon&r=PG","display_name":"syjust","link":"https://stackoverflow.com/users/2440698/syjust"},"is_accepted":false,"score":3,"last_activity_date":1467821063,"creation_date":1467821063,"answer_id":38228592,"question_id":17289236,"content_license":"CC BY-SA 3.0","body":"<p>If you are in a submodule, don't forget to declare the module in main app.\nie : </p>\n\n<pre><code>&lt;scrip&gt;\nangular.module('mainApp', ['subModule1', 'subModule2']);\n\nangular.module('subModule1')\n   .controller('MyController', ['$scope', function($scope) {\n      $scope.moduleName = 'subModule1';\n   }]);\n&lt;/script&gt;\n...\n&lt;div ng-app=\"mainApp\"&gt;\n   &lt;div ng-controller=\"MyController\"&gt;\n   &lt;span ng-bind=\"moduleName\"&gt;&lt;/span&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>If you don't declare subModule1 in mainApp, you will got a \"[ng:areq] Argument \"MyController\" is not a function, got undefined.</p>\n"},{"owner":{"reputation":1407,"user_id":5788789,"user_type":"registered","profile_image":"https://i.stack.imgur.com/fjz7g.jpg?s=128&g=1","display_name":"Partha Roy","link":"https://stackoverflow.com/users/5788789/partha-roy"},"is_accepted":false,"score":2,"last_activity_date":1466428937,"creation_date":1466428937,"answer_id":37923717,"question_id":28539077,"content_license":"CC BY-SA 3.0","body":"<p>Some days ago I was getting a similar kind of problem , \nso what was happening whenever i wanted to get a data-id of a html element by this :- </p>\n\n<pre><code>$(document).find(\".tile\")[0].data(\"id\")\n</code></pre>\n\n<p>it was throwing this error :- </p>\n\n<blockquote>\n  <p>Uncaught TypeError: $(...).find(...)[0].data is not a function(…)</p>\n</blockquote>\n\n<p>Actually the problem is find()[] is not returning a javascript DOM object so you have to convert it to a DOM element for having these operation  , So I did this -> </p>\n\n<pre><code>$($(document).find(\".tile\")[0]).data(\"id\")\n</code></pre>\n\n<p>just added put that entire thing in <strong>$()</strong> that casts these into a DOM object on which you can perform Javascript DOM element related methods.</p>\n"},{"owner":{"reputation":21,"user_id":6037636,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/591c5d1bf4dadb61a652443f4e846d0b?s=128&d=identicon&r=PG","display_name":"Rajan Lama","link":"https://stackoverflow.com/users/6037636/rajan-lama"},"is_accepted":false,"score":2,"last_activity_date":1466267801,"creation_date":1466267801,"answer_id":37899274,"question_id":7975093,"content_license":"CC BY-SA 3.0","body":"<p>I have also faced such problems many time in web develoment carrier. Actually its not JS conflict, When we load html website to the browser we face no such error, but when we load these type of website through localhost we face such problem. That's because of localhost. When we load scripts through the localhost it scans the script and renders the output. But when we didn't use localhost. It just scan the output. Example, when we write php code putside the localhost and run without host we get error. But if the code is correct and is run through host we get actual output, and when we use inspect element we get the output code in HTMl format but not in PHP format this is because of rendering of the code.   </p>\n\n<p>This is rendering error. So to fix these jquery code error one of the solution may be using this method.</p>\n\n<pre><code>jQuery(document).ready(function($){\n/******** Body of Jquery Code*****/\n});\n</code></pre>\n\n<p>What this code does is register '$' as the varible to the function by applying jquery. Else by default the .js file is only read as javascript.</p>\n"},{"owner":{"reputation":6093,"user_id":565244,"user_type":"registered","accept_rate":70,"profile_image":"https://i.stack.imgur.com/WnmbD.png?s=128&g=1","display_name":"Codebeat","link":"https://stackoverflow.com/users/565244/codebeat"},"is_accepted":false,"score":21,"last_activity_date":1463767919,"last_edit_date":1463767919,"creation_date":1313160024,"answer_id":7041744,"question_id":27509,"content_license":"CC BY-SA 3.0","body":"<p>If you do</p>\n\n<pre><code>if (myvar == undefined )\n{ \n    alert('var does not exists or is not initialized');\n}\n</code></pre>\n\n<p>it will fail when the variable <code>myvar</code> does not exists, because myvar is not defined, so the script is broken and the test has no effect.</p>\n\n<p>Because the window object has a global scope (default object) outside a function, a declaration will be 'attached' to the window object.</p>\n\n<p>For example:</p>\n\n<pre><code>var myvar = 'test';\n</code></pre>\n\n<p>The global variable <em>myvar</em> is the same as <em>window.myvar</em> or <em>window['myvar']</em></p>\n\n<p>To avoid errors to test when a global variable exists, you better use:</p>\n\n<pre><code>if(window.myvar == undefined )\n{ \n    alert('var does not exists or is not initialized');\n}\n</code></pre>\n\n<p>The question if a variable really exists doesn't matter, its value is incorrect. Otherwise, it is silly to initialize variables with undefined, and it is better use the value false to initialize. When you know that all variables that you declare are initialized with false, you can simply check its type or rely on <code>!window.myvar</code> to check if it has a proper/valid value. So even when the variable is not defined then <code>!window.myvar</code> is the same for <code>myvar = undefined</code> or <code>myvar = false</code> or <code>myvar = 0</code>.</p>\n\n<p>When you expect a specific type, test the type of the variable. To speed up testing a condition you better do:</p>\n\n<pre><code>if( !window.myvar || typeof window.myvar != 'string' )\n{\n    alert('var does not exists or is not type of string');\n}\n</code></pre>\n\n<p>When the first and simple condition is true, the interpreter skips the next tests. </p>\n\n<p>It is always better to use the instance/object of the variable to check if it got a valid value. It is more stable and is a better way of programming.  </p>\n\n<p>(y)</p>\n"},{"owner":{"reputation":46968,"user_id":1281485,"user_type":"registered","accept_rate":64,"profile_image":"https://i.stack.imgur.com/G4LdD.jpg?s=128&g=1","display_name":"Alfe","link":"https://stackoverflow.com/users/1281485/alfe"},"is_accepted":false,"score":8,"last_activity_date":1463587052,"creation_date":1463587052,"answer_id":37304637,"question_id":38987,"content_license":"CC BY-SA 3.0","body":"<p>I know this does not really fit the specifics of the questions (\"one liner\"), but since <em>none</em> of the answers above went into this direction while lots and lots of answers addressed the performance issue, I felt I should contribute my thoughts.</p>\n\n<p>Depending on the use case it might not be necessary to create a \"real\" merged dictionary of the given input dictionaries.  A <em>view</em> which does this might be sufficient in many cases, i. e. an object which acts <em>like</em> the merged dictionary would without computing it completely.  A lazy version of the merged dictionary, so to speak.</p>\n\n<p>In Python, this is rather simple and can be done with the code shown at the end of my post.  This given, the answer to the original question would be:</p>\n\n<pre><code>z = MergeDict(x, y)\n</code></pre>\n\n<p>When using this new object, it will behave like a merged dictionary but it will have constant creation time and constant memory footprint while leaving the original dictionaries untouched.  Creating it is way cheaper than in the other solutions proposed.</p>\n\n<p>Of course, if you use the result a lot, then you will at some point reach the limit where creating a real merged dictionary would have been the faster solution.  As I said, it depends on your use case.</p>\n\n<p>If you ever felt you would prefer to have a real merged <code>dict</code>, then calling <code>dict(z)</code> would produce it (but way more costly than the other solutions of course, so this is just worth mentioning).</p>\n\n<p>You can also use this class to make a kind of copy-on-write dictionary:</p>\n\n<pre><code>a = { 'x': 3, 'y': 4 }\nb = MergeDict(a)  # we merge just one dict\nb['x'] = 5\nprint b  # will print {'x': 5, 'y': 4}\nprint a  # will print {'y': 4, 'x': 3}\n</code></pre>\n\n<p>Here's the straight-forward code of <code>MergeDict</code>:</p>\n\n<pre><code>class MergeDict(object):\n  def __init__(self, *originals):\n    self.originals = ({},) + originals[::-1]  # reversed\n\n  def __getitem__(self, key):\n    for original in self.originals:\n      try:\n        return original[key]\n      except KeyError:\n        pass\n    raise KeyError(key)\n\n  def __setitem__(self, key, value):\n    self.originals[0][key] = value\n\n  def __iter__(self):\n    return iter(self.keys())\n\n  def __repr__(self):\n    return '%s(%s)' % (\n      self.__class__.__name__,\n      ', '.join(repr(original)\n          for original in reversed(self.originals)))\n\n  def __str__(self):\n    return '{%s}' % ', '.join(\n        '%r: %r' % i for i in self.iteritems())\n\n  def iteritems(self):\n    found = set()\n    for original in self.originals:\n      for k, v in original.iteritems():\n        if k not in found:\n          yield k, v\n          found.add(k)\n\n  def items(self):\n    return list(self.iteritems())\n\n  def keys(self):\n    return list(k for k, _ in self.iteritems())\n\n  def values(self):\n    return list(v for _, v in self.iteritems())\n</code></pre>\n"},{"owner":{"reputation":14463,"user_id":3464971,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/071f93545008c62cb68f2b55b9d851ea?s=128&d=identicon&r=PG&f=1","display_name":"SuperNova","link":"https://stackoverflow.com/users/3464971/supernova"},"is_accepted":false,"score":7,"last_activity_date":1462863946,"creation_date":1462863946,"answer_id":37131496,"question_id":336859,"content_license":"CC BY-SA 3.0","body":"<p><code>new Function()</code> can be used to pass the function's body in a string. And hence this can be used to create dynamic functions. Also passing the script without executing the script.</p>\n\n<pre><code>var func = new Function(\"x\", \"y\", \"return x*y;\");\nfunction secondFunction(){\n   var result;\n   result = func(10,20);\n   console.log ( result );\n}\n\nsecondFunction()\n</code></pre>\n"},{"owner":{"reputation":229423,"user_id":36305,"user_type":"registered","accept_rate":100,"profile_image":"https://i.stack.imgur.com/DIwx6.jpg?s=128&g=1","display_name":"Dimitre Novatchev","link":"https://stackoverflow.com/users/36305/dimitre-novatchev"},"is_accepted":false,"score":45,"last_activity_date":1462402450,"last_edit_date":1462402450,"creation_date":1451189909,"answer_id":34477523,"question_id":12694530,"content_license":"CC BY-SA 3.0","body":"<p>\"<strong><a href=\"https://www.pluralsight.com/courses/typescript\">TypeScript Fundamentals</a></strong>\"  -- a Pluralsight video-course by <strong><a href=\"https://www.pluralsight.com/authors/dan-wahlin\">Dan Wahlin</a></strong> and <strong><a href=\"https://www.pluralsight.com/authors/john-papa\">John Papa</a></strong> is a really good, presently (March 25, 2016) updated to reflect TypeScript 1.8, introduction to Typescript. </p>\n\n<p>For me the really good features, beside the nice possibilities for intellisense, are the <em>classes</em>, <em>interfaces</em>, <em>modules</em>, the ease of implementing AMD, and the possibility to use the Visual Studio Typescript debugger when invoked with IE.</p>\n\n<p><strong>To summarize</strong>: If used as intended, Typescript can make JavaScript programming more reliable, and easier. It can increase the productivity of the JavaScript programmer significantly over the full SDLC.</p>\n"},{"owner":{"reputation":1358,"user_id":1771063,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/f180e30e86b1d303e3333f410c2a5027?s=128&d=identicon&r=PG","display_name":"Santosh","link":"https://stackoverflow.com/users/1771063/santosh"},"is_accepted":false,"score":0,"last_activity_date":1459426680,"creation_date":1459426680,"answer_id":36333278,"question_id":28804334,"content_license":"CC BY-SA 3.0","body":"<p>I got the same error. Include can.ejs.js and the error will be resolved.\nDownload can.ejs.js from  <a href=\"https://canjs.com/download.html\" rel=\"nofollow\">here</a></p>\n"},{"owner":{"reputation":13526,"user_id":543572,"user_type":"registered","accept_rate":100,"profile_image":"https://i.stack.imgur.com/cEl37.jpg?s=128&g=1","display_name":"James Drinkard","link":"https://stackoverflow.com/users/543572/james-drinkard"},"is_accepted":false,"score":9,"last_activity_date":1459344784,"creation_date":1459344784,"answer_id":36310432,"question_id":500431,"content_license":"CC BY-SA 3.0","body":"<p>Just to add to the other answers, scope is a look-up list of all the declared identifiers (variables), and enforces a strict set of rules as to how these are accessible to currently executing code.  This look-up may be for the purposes of assigning to the variable, which is an LHS (lefthand-side) reference, or it may be for the purposes of retrieving its value, which is an RHS (righthand-side) reference. These look-ups are what the JavaScript engine is doing internally when it's compiling and executing the code.</p>\n\n<p>So from this perspective, I think that a picture would help that I found in the Scopes and Closures ebook by Kyle Simpson:</p>\n\n<p><a href=\"https://i.stack.imgur.com/0kqpZ.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/0kqpZ.png\" alt=\"image\"></a></p>\n\n<p>Quoting from his ebook:</p>\n\n<blockquote>\n  <p>The building represents our program’s nested scope ruleset. The first\n  floor of the building represents your currently executing scope,\n  wherever you are. The top level of the building is the global scope.\n  You resolve LHS and RHS references by looking on your current floor,\n  and if you don’t find it, taking the elevator to the next floor,\n  looking there, then the next, and so on. Once you get to the top floor\n  (the global scope), you either find what you’re looking for, or you\n  don’t. But you have to stop regardless.</p>\n</blockquote>\n\n<p>One thing of note that is worth mentioning, \"Scope look-up stops once it finds the first match\".</p>\n\n<p>This idea of \"scope levels\" explains why \"this\" can be changed with a newly created scope, if it's being looked up in a nested function.\nHere is a link that goes into all these details, <a href=\"https://toddmotto.com/everything-you-wanted-to-know-about-javascript-scope/\" rel=\"noreferrer\">Everything you wanted to know about javascript scope</a> </p>\n"},{"owner":{"reputation":27221,"user_id":559827,"user_type":"registered","accept_rate":72,"profile_image":"https://www.gravatar.com/avatar/4aa6db921795b84b986eb4aac8ffd569?s=128&d=identicon&r=PG","display_name":"kjo","link":"https://stackoverflow.com/users/559827/kjo"},"is_accepted":false,"score":15,"last_activity_date":1459170807,"creation_date":1459170807,"answer_id":36263150,"question_id":38987,"content_license":"CC BY-SA 3.0","body":"<p>(For Python2.7* only; there are simpler solutions for Python3*.)</p>\n\n<p>If you're not averse to importing a standard library module, you can do</p>\n\n<pre><code>from functools import reduce\n\ndef merge_dicts(*dicts):\n    return reduce(lambda a, d: a.update(d) or a, dicts, {})\n</code></pre>\n\n<p>(The <code>or a</code> bit in the <code>lambda</code> is necessary because <code>dict.update</code> always returns <code>None</code> on success.)</p>\n"},{"owner":{"reputation":9134,"user_id":1535443,"user_type":"registered","accept_rate":50,"profile_image":"https://i.stack.imgur.com/BvaFC.jpg?s=128&g=1","display_name":"Jhankar Mahbub","link":"https://stackoverflow.com/users/1535443/jhankar-mahbub"},"is_accepted":false,"score":8,"last_activity_date":1456253764,"last_edit_date":1456253764,"creation_date":1403619178,"answer_id":24388896,"question_id":500431,"content_license":"CC BY-SA 3.0","body":"<h2>Global Scope :</h2>\n\n<p>Global variables are exactly like global stars (Jackie Chan, Nelson Mandela). You can access them (get or set the value), from any part of your application. Global functions are like global events (New Year, Christmas). You can execute (call) them from any part of your application.</p>\n\n<pre><code>//global variable\nvar a = 2;\n\n//global function\nfunction b(){\n   console.log(a);  //access global variable\n}\n</code></pre>\n\n<h2>Local Scope :</h2>\n\n<p>If you are in the USA, you may know Kim Kardashian, infamous celebrity ( she somehow manages to make the tabloids). But people outside of the USA will not recognize her. She is a local star, bound to her territory.</p>\n\n<p>Local variables are like local stars. You can only access them (get or set the value) inside the scope. A local function is like local events - you can execute only (celebrate) inside that scope. If you want to access them from outside of the scope, you will get a reference error</p>\n\n<pre><code>function b(){\n   var d = 21; //local variable\n   console.log(d);\n\n   function dog(){  console.log(a); }\n     dog(); //execute local function\n}\n\n console.log(d); //ReferenceError: dddddd is not defined    \n</code></pre>\n\n<hr>\n\n<p><a href=\"http://www.thatjsdude.com/jsConcepts/concepts/scope.html\" rel=\"noreferrer\">Check this article for in-depth understanding of scope</a> </p>\n"},{"owner":{"reputation":1764,"user_id":4261022,"user_type":"registered","accept_rate":40,"profile_image":"https://i.stack.imgur.com/FPuC8.jpg?s=128&g=1","display_name":"Mike Clark","link":"https://stackoverflow.com/users/4261022/mike-clark"},"is_accepted":false,"score":2,"last_activity_date":1454934646,"last_edit_date":1454934646,"creation_date":1439552042,"answer_id":32009076,"question_id":27509,"content_license":"CC BY-SA 3.0","body":"<p>Use:</p>\n\n<p><strong>To check if property is undefined:</strong></p>\n\n<pre><code>if (typeof something === \"undefined\") {\n    alert(\"undefined\");\n}\n</code></pre>\n\n<p><strong>To check if property is not undefined:</strong></p>\n\n<pre><code>if (typeof something !== \"undefined\") {\n    alert(\"not undefined\");\n}\n</code></pre>\n"},{"owner":{"reputation":1,"user_id":5837460,"user_type":"unregistered","profile_image":"https://www.gravatar.com/avatar/0c570da839eedb2c8269627412b3cc9e?s=128&d=identicon&r=PG","display_name":"Jay Tom","link":"https://stackoverflow.com/users/5837460/jay-tom"},"is_accepted":false,"score":0,"last_activity_date":1453731551,"creation_date":1453731551,"answer_id":34994810,"question_id":17289236,"content_license":"CC BY-SA 3.0","body":"<p>Could it be as simple as enclosing your asset in \" \" and whatever needs quotes on the inside with ' '?</p>\n\n<pre><code>&lt;link rel=\"stylesheet\" media=\"screen\" href=\"@routes.Assets.at(\"stylesheets/main.css\")\"&gt;\n</code></pre>\n\n<p>becomes</p>\n\n<pre><code>&lt;link rel=\"stylesheet\" media=\"screen\" href=\"@routes.Assets.at('stylesheets/main.css')\"&gt;\n</code></pre>\n\n<p>That could be causing some problems with parsing</p>\n"},{"owner":{"reputation":104128,"user_id":3207,"user_type":"registered","accept_rate":100,"profile_image":"https://www.gravatar.com/avatar/b1f36e554be0e1ae19f9a74d6ece9107?s=128&d=identicon&r=PG","display_name":"Carl Meyer","link":"https://stackoverflow.com/users/3207/carl-meyer"},"is_accepted":false,"score":377,"last_activity_date":1453358604,"last_edit_date":1453358604,"creation_date":1220370727,"answer_id":39858,"question_id":38987,"content_license":"CC BY-SA 3.0","body":"<p>Another, more concise, option:</p>\n\n<pre><code>z = dict(x, **y)\n</code></pre>\n\n<p><strong>Note</strong>: this has become a popular answer, but it is important to point out that if <code>y</code> has any non-string keys, the fact that this works at all is an abuse of a CPython implementation detail, and it does not work in Python 3, or in PyPy, IronPython, or Jython. Also, <a href=\"http://mail.python.org/pipermail/python-dev/2010-April/099459.html\" rel=\"noreferrer\">Guido is not a fan</a>. So I can't recommend this technique for forward-compatible or cross-implementation portable code, which really means it should be avoided entirely.</p>\n"},{"owner":{"reputation":51,"user_id":5274679,"user_type":"registered","profile_image":"https://i.stack.imgur.com/hA3v2.jpg?s=128&g=1","display_name":"A. Randhawa","link":"https://stackoverflow.com/users/5274679/a-randhawa"},"is_accepted":false,"score":-3,"last_activity_date":1452490322,"last_edit_date":1452490322,"creation_date":1443646005,"answer_id":32875339,"question_id":500431,"content_license":"CC BY-SA 3.0","body":"<p>There are two types of scopes in JavaScript. </p>\n\n<ol>\n<li><p><strong>Global scope</strong>: variable which is announced in global scope can be used anywhere in the program very smoothly. For example: </p>\n\n<pre><code>var carName = \" BMW\";\n\n// code here can use carName\n\nfunction myFunction() {\n     // code here can use carName \n}\n</code></pre></li>\n<li><p><strong>Functional scope or Local scope</strong>: variable declared in this scope can be used in its own function only. For example:</p>\n\n<pre><code>// code here can not use carName\nfunction myFunction() {\n   var carName = \"BMW\";\n   // code here can use carName\n}\n</code></pre></li>\n</ol>\n"},{"owner":{"reputation":934,"user_id":2873883,"user_type":"registered","accept_rate":77,"profile_image":"https://i.stack.imgur.com/SCO9n.jpg?s=128&g=1","display_name":"Nitin9791","link":"https://stackoverflow.com/users/2873883/nitin9791"},"is_accepted":false,"score":11,"last_activity_date":1451335340,"last_edit_date":1451335340,"creation_date":1451333883,"answer_id":34500152,"question_id":336859,"content_license":"CC BY-SA 3.0","body":"<p>Both are different ways of defining a function. The difference is how the browser interprets and loads them into an execution context. </p>\n\n<p>The first case is of function expressions which loads only when the interpreter reaches that line of code. So if you do it like the following, you will get an error that the <strong>functionOne is not a function</strong>.</p>\n\n<pre><code>functionOne();\nvar functionOne = function() {\n    // Some code\n};\n</code></pre>\n\n<p>The reason is that on the first line no value is assigned to functionOne, and hence it is undefined. We are trying to call it as a function, and hence we are getting an error.</p>\n\n<p>On the second line we are assigning the reference of an anonymous function to functionOne.</p>\n\n<p>The second case is of function declarations that loads before any code is executed. So if you do like the following you won't get any error as the declaration loads before code execution.</p>\n\n<pre><code>functionOne();\nfunction functionOne() {\n   // Some code\n}\n</code></pre>\n"},{"owner":{"reputation":891,"user_id":1625434,"user_type":"registered","profile_image":"https://i.stack.imgur.com/KHs4G.png?s=128&g=1","display_name":"varna","link":"https://stackoverflow.com/users/1625434/varna"},"is_accepted":false,"score":16,"last_activity_date":1451334928,"last_edit_date":1451334928,"creation_date":1441794653,"answer_id":32477146,"question_id":336859,"content_license":"CC BY-SA 3.0","body":"<p>I'm listing out the differences below:</p>\n\n<ol>\n<li><p>A function declaration can be placed anywhere in the code. Even if it is invoked before the definition appears in code, it gets executed as function declaration is committed to memory or in a way it is hoisted up, before any other code in the page starts execution.</p>\n\n<p>Take a look at the function below:</p>\n\n<pre><code>function outerFunction() {\n    function foo() {\n       return 1;\n    }\n    return foo();\n    function foo() {\n       return 2;\n    }\n}\nalert(outerFunction()); // Displays 2\n</code></pre>\n\n<p>This is because, during execution, it looks like:-</p>\n\n<pre><code>function foo() {  // The first function declaration is moved to top\n    return 1;\n}\nfunction foo() {  // The second function declaration is moved to top\n    return 2;\n}\nfunction outerFunction() {\n    return foo();\n}\nalert(outerFunction()); //So executing from top to bottom,\n                        //the last foo() returns 2 which gets displayed\n</code></pre>\n\n<p>A function expression, if not defined before calling it, will result in an error. Also, here the function definition itself is not moved to the top or committed to memory like in the function declarations. But the variable to which we assign the function gets hoisted up and <strong>undefined</strong> gets assigned to it.</p>\n\n<p>Same function using function expressions:</p>\n\n<pre><code>function outerFunction() {\n    var foo = function() {\n       return 1;\n    }\n    return foo();\n    var foo = function() {\n       return 2;\n    }\n}\nalert(outerFunction()); // Displays 1\n</code></pre>\n\n<p>This is because during execution, it looks like:</p>\n\n<pre><code>function outerFunction() {\n   var foo = undefined;\n   var foo = undefined;\n\n   foo = function() {\n      return 1;\n   };\n   return foo ();\n   foo = function() {   // This function expression is not reachable\n      return 2;\n   };\n}\nalert(outerFunction()); // Displays 1\n</code></pre></li>\n<li><p>It is not safe to write function declarations in non-function blocks like <strong>if</strong> because they won't be accessible.</p>\n\n<pre><code>if (test) {\n    function x() { doSomething(); }\n}\n</code></pre></li>\n<li><p>Named function expression like the one below, may not work in Internet&nbsp;Explorer browsers prior to version 9.</p>\n\n<pre><code>var today = function today() {return new Date()}\n</code></pre></li>\n</ol>\n"},{"owner":{"reputation":10929,"user_id":2730064,"user_type":"registered","accept_rate":80,"profile_image":"https://i.stack.imgur.com/L4T9w.jpg?s=128&g=1","display_name":"Rohan","link":"https://stackoverflow.com/users/2730064/rohan"},"is_accepted":false,"score":27,"last_activity_date":1451334891,"last_edit_date":1495541916,"creation_date":1437464737,"answer_id":31533124,"question_id":336859,"content_license":"CC BY-SA 3.0","body":"<p><a href=\"https://stackoverflow.com/a/336868/2730064\">Greg's Answer</a> is good enough, but I still would like to add something to it that I learned just now watching <a href=\"https://en.wikipedia.org/wiki/Douglas_Crockford\" rel=\"noreferrer\">Douglas Crockford's</a> videos.</p>\n\n<p><strong>Function expression:</strong></p>\n\n<pre><code>var foo = function foo() {};\n</code></pre>\n\n<p><strong>Function statement:</strong></p>\n\n<pre><code>function foo() {};\n</code></pre>\n\n<p>The function statement is just a shorthand for <code>var</code> statement with a <code>function</code> value.</p>\n\n<p>So</p>\n\n<pre><code>function foo() {};\n</code></pre>\n\n<p>expands to</p>\n\n<pre><code>var foo = function foo() {};\n</code></pre>\n\n<p>Which expands further to:</p>\n\n<pre><code>var foo = undefined;\nfoo = function foo() {};\n</code></pre>\n\n<p>And they are both hoisted to the top of the code.</p>\n\n<p><img src=\"https://i.stack.imgur.com/6TVZL.jpg\" alt=\"Screenshot from video\"></p>\n"},{"owner":{"reputation":511,"user_id":4860625,"user_type":"registered","profile_image":"https://i.stack.imgur.com/lVLlK.jpg?s=128&g=1","display_name":"Tao","link":"https://stackoverflow.com/users/4860625/tao"},"is_accepted":false,"score":8,"last_activity_date":1451334765,"last_edit_date":1451334765,"creation_date":1435140487,"answer_id":31023725,"question_id":336859,"content_license":"CC BY-SA 3.0","body":"<p>This is just two possible ways of declaring functions, and in the second way, you can use the function before declaration.</p>\n"},{"owner":{"reputation":53209,"user_id":1723893,"user_type":"registered","accept_rate":100,"profile_image":"https://i.stack.imgur.com/dpcFl.jpg?s=128&g=1","display_name":"NullPoiиteя","link":"https://stackoverflow.com/users/1723893/nullpoi%d0%b8te%d1%8f"},"is_accepted":false,"score":16,"last_activity_date":1451334580,"last_edit_date":1451334580,"creation_date":1357411072,"answer_id":14175010,"question_id":336859,"content_license":"CC BY-SA 3.0","body":"<p>The first one (function doSomething(x)) should be part of an object notation.</p>\n\n<p>The second one (<code>var doSomething = function(x){ alert(x);}</code>) is simply creating an anonymous function and assigning it to a variable, <code>doSomething</code>. So doSomething() will call the function.</p>\n\n<p>You may want to know what a <em>function declaration</em> and <em>function expression</em> is.</p>\n\n<p>A function declaration defines a named function variable without requiring variable assignment. Function declarations occur as standalone constructs and cannot be nested within non-function blocks.</p>\n\n<pre><code>function foo() {\n    return 3;\n}\n</code></pre>\n\n<blockquote>\n  <p>ECMA 5 (13.0) defines the syntax as <br/>\n  function Identifier ( FormalParameterList<sub>opt</sub> ) { FunctionBody }</p>\n</blockquote>\n\n<p>In above condition the function name is visible within its scope and the scope of its parent (otherwise it would be unreachable).</p>\n\n<p>And in a function expression</p>\n\n<p>A function expression defines a function as a part of a larger expression syntax (typically a variable assignment ). Functions defined via functions expressions can be named or anonymous. Function expressions should not start with “function”.</p>\n\n<pre><code>// Anonymous function expression\nvar a = function() {\n    return 3;\n}\n\n// Named function expression\nvar a = function foo() {\n    return 3;\n}\n\n// Self-invoking function expression\n(function foo() {\n    alert(\"hello!\");\n})();\n</code></pre>\n\n<blockquote>\n  <p>ECMA 5 (13.0) defines the syntax as <br/>\n  function Identifier<sub>opt</sub> ( FormalParameterList<sub>opt</sub> ) { FunctionBody }</p>\n</blockquote>\n"},{"owner":{"reputation":477,"user_id":1863024,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/62231d4244a592f77dd9c024bf948b09?s=128&d=identicon&r=PG","display_name":"Herc","link":"https://stackoverflow.com/users/1863024/herc"},"is_accepted":false,"score":27,"last_activity_date":1451334401,"last_edit_date":1451334401,"creation_date":1354188529,"answer_id":13624783,"question_id":336859,"content_license":"CC BY-SA 3.0","body":"<p>I use the variable approach in my code for a very specific reason, the theory of which has been covered in an abstract way above, but an example might help some people like me, with limited JavaScript expertise.</p>\n\n<p>I have code that I need to run with 160 independently-designed brandings. Most of the code is in shared files, but branding-specific stuff is in a separate file, one for each branding.</p>\n\n<p>Some brandings require specific functions, and some do not. Sometimes I have to add new functions to do new branding-specific things. I am happy to change the shared coded, but I don't want to have to change all 160 sets of branding files.</p>\n\n<p>By using the variable syntax, I can declare the variable (a function pointer essentially) in the shared code and either assign a trivial stub function, or set to null.</p>\n\n<p>The one or two brandings that need a specific implementation of the function can then define their version of the function and assign this to the variable if they want, and the rest do nothing. I can test for a null function before I execute it in the shared code.</p>\n\n<p>From people's comments above, I gather it may be possible to redefine a static function too, but I think the variable solution is nice and clear.</p>\n"},{"owner":{"reputation":104303,"user_id":53212,"user_type":"registered","accept_rate":100,"profile_image":"https://www.gravatar.com/avatar/e0fbce15f81d6308656931250db267a1?s=128&d=identicon&r=PG","display_name":"thomasrutter","link":"https://stackoverflow.com/users/53212/thomasrutter"},"is_accepted":false,"score":133,"last_activity_date":1451332028,"last_edit_date":1451332028,"creation_date":1271739289,"answer_id":2672637,"question_id":336859,"content_license":"CC BY-SA 3.0","body":"<p>The two code snippets you've posted there will, for almost all purposes, behave the same way.</p>\n\n<p>However, the difference in behaviour is that with the first variant (<code>var functionOne = function() {}</code>), that function can only be called after that point in the code.</p>\n\n<p>With the second variant (<code>function functionTwo()</code>), the function is available to code that runs above where the function is declared.</p>\n\n<p>This is because with the first variant, the function is assigned to the variable <code>foo</code> at run time. In the second, the function is assigned to that identifier, <code>foo</code>, at parse time.</p>\n\n<p><strong>More technical information</strong></p>\n\n<p>JavaScript has three ways of defining functions.</p>\n\n<ol>\n<li>Your first snippet shows a <strong>function expression</strong>. This involves using the <em>\"function\" operator</em> to create a function - the result of that operator can be stored in any variable or object property. The function expression is powerful that way. The function expression is often called an \"anonymous function\", because it does not have to have a name,</li>\n<li>Your second example is a <strong>function declaration</strong>. This uses the <em>\"function\" statement</em> to create a function. The function is made available at parse time and can be called anywhere in that scope. You can still store it in a variable or object property later.</li>\n<li>The third way of defining a function is the <strong>\"Function()\" constructor</strong>, which is not shown in your original post. It's not recommended to use this as it works the same way as <code>eval()</code>, which has its problems.</li>\n</ol>\n"},{"owner":{"reputation":631,"user_id":257553,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/e0b5dd1b8a8dc7d1d636071d36890974?s=128&d=identicon&r=PG","display_name":"Sasha Firsov","link":"https://stackoverflow.com/users/257553/sasha-firsov"},"is_accepted":false,"score":33,"last_activity_date":1451331855,"last_edit_date":1451331855,"creation_date":1264278774,"answer_id":2124597,"question_id":336859,"content_license":"CC BY-SA 3.0","body":"<p>In terms of code maintenance cost, named functions are more preferable:</p>\n\n<ul>\n<li>Independent from the place where they are declared (but still limited by scope).</li>\n<li>More resistant to mistakes like conditional initialization (you are still able to override if wanted to).</li>\n<li>The code becomes more readable by allocating local functions separately of scope functionality. Usually in the scope the functionality goes first, followed by declarations of local functions.</li>\n<li>In a debugger you will clearly see the function name on the call stack instead of an \"anonymous/evaluated\" function.</li>\n</ul>\n\n<p>I suspect more PROS for named functions are follow. And what is listed as an advantage of named functions is a disadvantage for anonymous ones.</p>\n\n<p>Historically, anonymous functions appeared from the inability of JavaScript as a language to list members with named functions:</p>\n\n<pre><code>{\n    member:function() { /* How do I make \"this.member\" a named function? */\n    }\n}\n</code></pre>\n"},{"owner":{"reputation":3729,"user_id":471393,"user_type":"registered","accept_rate":62,"profile_image":"https://i.stack.imgur.com/k2Jn8.png?s=128&g=1","display_name":"Stan","link":"https://stackoverflow.com/users/471393/stan"},"is_accepted":false,"score":106,"last_activity_date":1450437555,"last_edit_date":1450437555,"creation_date":1322567535,"answer_id":8310229,"question_id":38987,"content_license":"CC BY-SA 3.0","body":"<h1>Recursively/deep update a dict</h1>\n\n<pre><code>def deepupdate(original, update):\n    \"\"\"\n    Recursively update a dict.\n    Subdict's won't be overwritten but also updated.\n    \"\"\"\n    for key, value in original.iteritems(): \n        if key not in update:\n            update[key] = value\n        elif isinstance(value, dict):\n            deepupdate(value, update[key]) \n    return update</code></pre>\n\n<p>Demonstration:</p>\n\n<pre><code>pluto_original = {\n    'name': 'Pluto',\n    'details': {\n        'tail': True,\n        'color': 'orange'\n    }\n}\n\npluto_update = {\n    'name': 'Pluutoo',\n    'details': {\n        'color': 'blue'\n    }\n}\n\nprint deepupdate(pluto_original, pluto_update)</code></pre>\n\n<p>Outputs:</p>\n\n<pre><code>{\n    'name': 'Pluutoo',\n    'details': {\n        'color': 'blue',\n        'tail': True\n    }\n}</code></pre>\n\n<p>Thanks rednaw for edits.</p>\n"},{"owner":{"reputation":553,"user_id":3145137,"user_type":"registered","accept_rate":50,"profile_image":"https://i.stack.imgur.com/Wn5vq.jpg?s=128&g=1","display_name":"reetesh11","link":"https://stackoverflow.com/users/3145137/reetesh11"},"is_accepted":false,"score":13,"last_activity_date":1448888640,"creation_date":1448888640,"answer_id":33999337,"question_id":38987,"content_license":"CC BY-SA 3.0","body":"<pre><code>from collections import Counter\ndict1 = {'a':1, 'b': 2}\ndict2 = {'b':10, 'c': 11}\nresult = dict(Counter(dict1) + Counter(dict2))\n</code></pre>\n\n<p>This should solve your problem.</p>\n"},{"owner":{"reputation":1724,"user_id":846060,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/573ac69a7840213ea66229492828e4e8?s=128&d=identicon&r=PG","display_name":"Bikram Shrestha","link":"https://stackoverflow.com/users/846060/bikram-shrestha"},"is_accepted":false,"score":4,"last_activity_date":1447929665,"creation_date":1447929665,"answer_id":33801567,"question_id":7975093,"content_license":"CC BY-SA 3.0","body":"<pre><code> ;(function($){\n        // your code\n    })(jQuery);\n</code></pre>\n\n<p>Place your js code inside the closure above , it should solve the problem.</p>\n"},{"owner":{"reputation":4368,"user_id":627770,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/1ab255bb1ea06efa77c17c725c0b62f6?s=128&d=identicon&r=PG","display_name":"Poonam","link":"https://stackoverflow.com/users/627770/poonam"},"is_accepted":false,"score":257,"last_activity_date":1447305460,"last_edit_date":1447305460,"creation_date":1329487267,"answer_id":9329601,"question_id":9329446,"content_license":"CC BY-SA 3.0","body":"<p>If you’re using the <a href=\"http://jquery.com/\" rel=\"noreferrer\"><strong>jQuery</strong></a> library, you can use <a href=\"http://api.jquery.com/jQuery.each/\" rel=\"noreferrer\"><strong>jQuery.each</strong></a>:</p>\n\n\n\n<pre class=\"lang-js prettyprint-override\"><code>$.each(yourArray, function(index, value) {\n  // do your stuff here\n});\n</code></pre>\n\n<p><strong>EDIT :</strong> </p>\n\n<p>As per question, user want code in javascript instead of jquery so the edit is</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var length = yourArray.length;   \nfor (var i = 0; i &lt; length; i++) {\n  // Do something with yourArray[i].\n}\n</code></pre>\n"},{"owner":{"reputation":157,"user_id":1229135,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/a03a6cceffa5333f338fa79f69ffb219?s=128&d=identicon&r=PG","display_name":"jackbean818","link":"https://stackoverflow.com/users/1229135/jackbean818"},"is_accepted":false,"score":6,"last_activity_date":1446135139,"creation_date":1446135139,"answer_id":33419378,"question_id":500431,"content_license":"CC BY-SA 3.0","body":"<p>There are ALMOST only two types of JavaScript scopes:</p>\n\n<ul>\n<li>the scope of each var declaration is associated with the most immediately enclosing function</li>\n<li>if there is no enclosing function for a var declaration, it is global scope</li>\n</ul>\n\n<p>So, any blocks other than functions do not create a new scope. That explains why for-loops overwrite outer scoped variables:</p>\n\n<pre><code>var i = 10, v = 10;\nfor (var i = 0; i &lt; 5; i++) { var v = 5; }\nconsole.log(i, v);\n// output 5 5\n</code></pre>\n\n<p>Using functions instead:</p>\n\n<pre><code>var i = 10, v = 10;\n$.each([0, 1, 2, 3, 4], function(i) { var v = 5; });\nconsole.log(i,v);\n// output 10 10\n</code></pre>\n\n<p>In the first example, there was no block scope, so the initially declared variables were overwritten. In the second example, there was a new scope due to the function, so the initially declared variables were SHADOWED, and not overwritten.</p>\n\n<p>That's almost all you need to know in terms of JavaScript scoping, except:</p>\n\n<ul>\n<li>try/catch introduce new scope ONLY for the exception variable itself, other variables do not have new scope</li>\n<li>with-clause apparently is another exception, but using with-clause it highly discouraged (<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with\" rel=\"noreferrer\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with</a>)</li>\n</ul>\n\n<p>So you can see JavaScript scoping is actually extremely simple, albeit not always intuitive. A few things to be aware of:</p>\n\n<ul>\n<li>var declarations are hoisted to the top of the scope. This means no matter where the var declaration happens, to the compiler it is as if the var itself happens at the top</li>\n<li>multiple var declarations within the same scope are combined</li>\n</ul>\n\n<p>So this code:</p>\n\n<pre><code>var i = 1;\nfunction abc() {\n  i = 2;\n  var i = 3;\n}\nconsole.log(i);     // outputs 1\n</code></pre>\n\n<p>is equivalent to:</p>\n\n<pre><code>var i = 1;\nfunction abc() {\n  var i;     // var declaration moved to the top of the scope\n  i = 2;\n  i = 3;     // the assignment stays where it is\n}\nconsole.log(i);\n</code></pre>\n\n<p>This may seem counter intuitive, but it makes sense from the perspective of a imperative language designer.</p>\n"},{"owner":{"reputation":14775,"user_id":1823469,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/85e6cb72977ba3a7abc28d5ee541d9c1?s=128&d=identicon&r=PG","display_name":"Konstantin Smolyanin","link":"https://stackoverflow.com/users/1823469/konstantin-smolyanin"},"is_accepted":false,"score":127,"last_activity_date":1443294066,"last_edit_date":1443294066,"creation_date":1375993702,"answer_id":18135509,"question_id":27509,"content_license":"CC BY-SA 3.0","body":"<p>What does this mean: <strong>\"undefined object property\"</strong>?</p>\n\n<p>Actually it can mean two quite different things! First, it can mean <em>the property that has never been defined</em> in the object and, second, it can mean the <em>property that has an undefined value</em>. Let's look at this code:</p>\n\n<pre><code>var o = { a: undefined }\n</code></pre>\n\n<p>Is <code>o.a</code> undefined? Yes! Its value is undefined. Is <code>o.b</code> undefined? Sure! There is no property 'b' at all! OK, see now how different approaches behave in both situations:</p>\n\n<pre><code>typeof o.a == 'undefined' // true\ntypeof o.b == 'undefined' // true\no.a === undefined // true\no.b === undefined // true\n'a' in o // true\n'b' in o // false\n</code></pre>\n\n<p>We can clearly see that <code>typeof obj.prop == 'undefined'</code> and <code>obj.prop === undefined</code> are equivalent, and they do not distinguish those different situations. And <code>'prop' in obj</code> can detect the situation when a property hasn't been defined at all and doesn't pay attention to the property value which may be undefined.</p>\n\n<h2>So what to do?</h2>\n\n<p>1) You want to know if a property is undefined by either the first or second meaning (the most typical situation).</p>\n\n<pre><code>obj.prop === undefined // IMHO, see \"final fight\" below\n</code></pre>\n\n<p>2) You want to just know if object has some property and don't care about its value.</p>\n\n<pre><code>'prop' in obj\n</code></pre>\n\n<h2>Notes:</h2>\n\n<ul>\n<li>You can't check an object and its property at the same time. For example, this <code>x.a === undefined</code> or this <code>typeof x.a == 'undefined'</code> raises <code>ReferenceError: x is not defined</code> if x is not defined.</li>\n<li>Variable <code>undefined</code> is a global variable (so actually it is <code>window.undefined</code> in browsers). It has been supported since ECMAScript 1st Edition and since ECMAScript 5 it is <strong>read only</strong>. So in modern browsers it can't be <em>redefined to true</em> as many authors love to frighten us with, but this is still a true for older browsers.</li>\n</ul>\n\n<h2>Final fight: <code>obj.prop === undefined</code> vs <code>typeof obj.prop == 'undefined'</code></h2>\n\n<p>Pluses of <code>obj.prop === undefined</code>:</p>\n\n<ul>\n<li>It's a bit shorter and looks a bit prettier</li>\n<li>The JavaScript engine will give you an error if you have misspelled <code>undefined</code></li>\n</ul>\n\n<p>Minuses of <code>obj.prop === undefined</code>:</p>\n\n<ul>\n<li><code>undefined</code> can be overridden in old browsers</li>\n</ul>\n\n<p>Pluses of <code>typeof obj.prop == 'undefined'</code>:</p>\n\n<ul>\n<li>It is really universal! It works in new and old browsers.</li>\n</ul>\n\n<p>Minuses of <code>typeof obj.prop == 'undefined'</code>:</p>\n\n<ul>\n<li><code>'undefned'</code> (<em>misspelled</em>) here is just a string constant, so the JavaScript engine can't help you if you have misspelled it like I just did.</li>\n</ul>\n\n<h2>Update (for server-side JavaScript):</h2>\n\n<p>Node.js supports the global variable <code>undefined</code> as <code>global.undefined</code> (it can also be used without the 'global' prefix). I don't know about other implementations of server-side JavaScript.</p>\n"},{"owner":{"reputation":76683,"user_id":1026459,"user_type":"registered","accept_rate":92,"profile_image":"https://i.stack.imgur.com/pv5mS.png?s=128&g=1","display_name":"Travis J","link":"https://stackoverflow.com/users/1026459/travis-j"},"is_accepted":false,"score":25,"last_activity_date":1442262593,"creation_date":1442262593,"answer_id":32573386,"question_id":500431,"content_license":"CC BY-SA 3.0","body":"<p>The idea of scoping in JavaScript when originally designed by <a href=\"https://en.wikipedia.org/wiki/Brendan_Eich\">Brendan Eich</a> came from the <a href=\"https://en.wikipedia.org/wiki/HyperCard\">HyperCard</a> scripting language <a href=\"https://en.wikipedia.org/wiki/HyperTalk\">HyperTalk</a>. </p>\n\n<p>In this language, the displays were done similar to a stack of index cards. There was a master card referred to as the background. It was transparent and can be seen as the bottom card. Any content on this base card was shared with cards placed on top of it. Each card placed on top had its own content which took precedence over the previous card, but still had access to the prior cards if desired.</p>\n\n<p>This is exactly how the JavaScript scoping system is designed. It just has different names. The cards in JavaScript are known as <strong><a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-10.3\">Execution Contexts<sup>ECMA</sup></a></strong>. Each one of these contexts contains three main parts. A variable environment, a lexical environment, and a this binding. Going back to the cards reference, the lexical environment contains all of the content from prior cards lower in the stack. The current context is at the top of the stack and any content declared there will be stored in the variable environment. The variable environment will take precedence in the case of naming collisions.</p>\n\n<p>The this binding will point to the containing object. Sometimes scopes or execution contexts change without the containing object changing, such as in a declared function where the containing object may be <code>window</code> or a constructor function.</p>\n\n<p>These execution contexts are created any time control is transferred. Control is transferred when code begins to execute, and this is primarily done from function execution. </p>\n\n<p>So that is the technical explanation. In practice, it is important to remember that in JavaScript</p>\n\n<ul>\n<li>Scopes are technically \"Execution Contexts\"</li>\n<li>Contexts form a stack of environments where variables are stored</li>\n<li>The top of the stack takes precedence (the bottom being the global context)</li>\n<li>Each function creates an execution context (but not always a new this binding)</li>\n</ul>\n\n<p>Applying this to one of the previous examples (5. \"Closure\") on this page, it is possible to follow the stack of execution contexts. In this example there are three contexts in the stack. They are defined by the outer context, the context in the immediately invoked function called by var six, and the context in the returned function inside of var six's immediately invoked function.</p>\n\n<p><em>i</em>) The outer context. It has a variable environment of a = 1<br>\n <em>ii</em>) The IIFE context, it has a lexical environment of a = 1, but a variable environment of a = 6 which takes precedence in the stack<br>\n <em>iii</em>) The returned function context, it has a lexical environment of a = 6 and that is the value referenced in the alert when called.</p>\n\n<p><a href=\"https://i.stack.imgur.com/v45hL.png\"><img src=\"https://i.stack.imgur.com/v45hL.png\" alt=\"enter image description here\"></a></p>\n"},{"owner":{"reputation":271,"user_id":1123567,"user_type":"registered","profile_image":"https://graph.facebook.com/100000690888279/picture?type=large","display_name":"Leno Britto","link":"https://stackoverflow.com/users/1123567/leno-britto"},"is_accepted":false,"score":27,"last_activity_date":1439413172,"last_edit_date":1439413172,"creation_date":1341962451,"answer_id":11423410,"question_id":7975093,"content_license":"CC BY-SA 3.0","body":"<p>Use jQuery's <a href=\"http://api.jquery.com/jQuery.noConflict/\" rel=\"noreferrer\"><code>noConflict</code></a>. It did wonders for me</p>\n\n<pre><code>var example=jQuery.noConflict();\nexample(function(){\nexample('div#rift_connect').click(function(){\n    example('span#resultado').text(\"Hello, dude!\");\n    });\n});\n</code></pre>\n\n<p>That is, assuming you included jQuery on your HTML</p>\n\n<pre><code>&lt;script language=\"javascript\" type=\"text/javascript\" src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js\"&gt;&lt;/script&gt;\n</code></pre>\n"},{"owner":{"reputation":1655,"user_id":2338960,"user_type":"registered","accept_rate":75,"profile_image":"https://www.gravatar.com/avatar/accb5f3b6a20050c3b99880530cf61db?s=128&d=identicon&r=PG","display_name":"Kalpesh Prajapati","link":"https://stackoverflow.com/users/2338960/kalpesh-prajapati"},"is_accepted":false,"score":1,"last_activity_date":1437391267,"creation_date":1437391267,"answer_id":31515180,"question_id":7975093,"content_license":"CC BY-SA 3.0","body":"<p>You can use both jQuery and $ in below snippet. it worked for me</p>\n\n<pre><code>jQuery( document ).ready(function( $ ) {\n  // jQuery(document)\n  // $(document)\n});\n</code></pre>\n"}],"has_more":true,"quota_max":300,"quota_remaining":276}
