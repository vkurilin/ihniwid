{"items":[{"owner":{"reputation":1707,"user_id":836474,"user_type":"registered","profile_image":"https://i.stack.imgur.com/LgSNj.jpg?s=128&g=1","display_name":"Joe Johnson","link":"https://stackoverflow.com/users/836474/joe-johnson"},"is_accepted":false,"score":20,"last_activity_date":1360089565,"last_edit_date":1360089565,"creation_date":1348598494,"answer_id":12589152,"question_id":27509,"content_license":"CC BY-SA 3.0","body":"<p>I didn't see (hope I didn't miss it) anyone checking the object before the property. So, this is the shortest and most effective (though not necessarily the most clear):</p>\n\n<pre><code>if (obj &amp;&amp; obj.prop) {\n  // Do something;\n}\n</code></pre>\n\n<p>If the obj or obj.prop is undefined, null, or \"falsy\", the if statement will not execute the code block. This is <em>usually</em> the desired behavior in most code block statements (in JavaScript).</p>\n"},{"owner":{"reputation":42399,"user_id":936832,"user_type":"registered","accept_rate":75,"profile_image":"https://www.gravatar.com/avatar/cc1da0368f0874a66bd771c4d57f94b0?s=128&d=identicon&r=PG","display_name":"Ingo Kegel","link":"https://stackoverflow.com/users/936832/ingo-kegel"},"is_accepted":false,"score":17,"last_activity_date":1358412522,"last_edit_date":1358412522,"creation_date":1350297767,"answer_id":12893927,"question_id":336859,"content_license":"CC BY-SA 3.0","body":"<p>Another difference that is not mentioned in the other answers is that if you use the anonymous function</p>\n\n<pre><code>var functionOne = function() {\n    // Some code\n};\n</code></pre>\n\n<p>and use that as a constructor as in</p>\n\n<pre><code>var one = new functionOne();\n</code></pre>\n\n<p>then <code>one.constructor.name</code> will not be defined. <code>Function.name</code> is non-standard but is supported by Firefox, Chrome, other Webkit-derived browsers and IE 9+.</p>\n\n<p>With </p>\n\n<pre><code>function functionTwo() {\n    // Some code\n}\ntwo = new functionTwo();\n</code></pre>\n\n<p>it is possible to retrieve the name of the constructor as a string with <code>two.constructor.name</code>.</p>\n"},{"owner":{"reputation":569,"user_id":476711,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/e3404a4726b33e38f0c34d4bdc8245fd?s=128&d=identicon&r=PG","display_name":"emolaus","link":"https://stackoverflow.com/users/476711/emolaus"},"is_accepted":false,"score":5,"last_activity_date":1358345073,"creation_date":1358345073,"answer_id":14360209,"question_id":950087,"content_license":"CC BY-SA 3.0","body":"<p>Don't forget to check out <a href=\"http://labjs.com\" rel=\"noreferrer\">LAB.js</a>!</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n       $LAB\n       .script(\"jquery-1.8.3.js\").wait()\n       .script(\"scripts/clientscript.js\");      \n&lt;/script&gt;\n</code></pre>\n"},{"owner":{"reputation":21326,"user_id":1037948,"user_type":"registered","accept_rate":80,"profile_image":"https://www.gravatar.com/avatar/e9fdb26b1c2ef88470505cc4c7267244?s=128&d=identicon&r=PG","display_name":"drzaus","link":"https://stackoverflow.com/users/1037948/drzaus"},"is_accepted":false,"score":17,"last_activity_date":1358097503,"last_edit_date":1358097503,"creation_date":1358091566,"answer_id":14305002,"question_id":3390396,"content_license":"CC BY-SA 3.0","body":"<p>Some scenarios illustrating the results of the various answers:\n<a href=\"http://jsfiddle.net/drzaus/UVjM4/\">http://jsfiddle.net/drzaus/UVjM4/</a></p>\n\n<p><em>(Note that the use of <code>var</code> for <code>in</code> tests make a difference when in a scoped wrapper)</em></p>\n\n<p>Code for reference:</p>\n\n<pre><code>(function(undefined) {\n    var definedButNotInitialized;\n    definedAndInitialized = 3;\n    someObject = {\n        firstProp: \"1\"\n        , secondProp: false\n        // , undefinedProp not defined\n    }\n    // var notDefined;\n\n    var tests = [\n        'definedButNotInitialized in window',\n        'definedAndInitialized in window',\n        'someObject.firstProp in window',\n        'someObject.secondProp in window',\n        'someObject.undefinedProp in window',\n        'notDefined in window',\n\n        '\"definedButNotInitialized\" in window',\n        '\"definedAndInitialized\" in window',\n        '\"someObject.firstProp\" in window',\n        '\"someObject.secondProp\" in window',\n        '\"someObject.undefinedProp\" in window',\n        '\"notDefined\" in window',\n\n        'typeof definedButNotInitialized == \"undefined\"',\n        'typeof definedButNotInitialized === typeof undefined',\n        'definedButNotInitialized === undefined',\n        '! definedButNotInitialized',\n        '!! definedButNotInitialized',\n\n        'typeof definedAndInitialized == \"undefined\"',\n        'typeof definedAndInitialized === typeof undefined',\n        'definedAndInitialized === undefined',\n        '! definedAndInitialized',\n        '!! definedAndInitialized',\n\n        'typeof someObject.firstProp == \"undefined\"',\n        'typeof someObject.firstProp === typeof undefined',\n        'someObject.firstProp === undefined',\n        '! someObject.firstProp',\n        '!! someObject.firstProp',\n\n        'typeof someObject.secondProp == \"undefined\"',\n        'typeof someObject.secondProp === typeof undefined',\n        'someObject.secondProp === undefined',\n        '! someObject.secondProp',\n        '!! someObject.secondProp',\n\n        'typeof someObject.undefinedProp == \"undefined\"',\n        'typeof someObject.undefinedProp === typeof undefined',\n        'someObject.undefinedProp === undefined',\n        '! someObject.undefinedProp',\n        '!! someObject.undefinedProp',\n\n        'typeof notDefined == \"undefined\"',\n        'typeof notDefined === typeof undefined',\n        'notDefined === undefined',\n        '! notDefined',\n        '!! notDefined'\n    ];\n\n    var output = document.getElementById('results');\n    var result = '';\n    for(var t in tests) {\n        if( !tests.hasOwnProperty(t) ) continue; // bleh\n\n        try {\n            result = eval(tests[t]);\n        } catch(ex) {\n            result = 'Exception--' + ex;\n        }\n        console.log(tests[t], result);\n        output.innerHTML += \"\\n\" + tests[t] + \": \" + result;\n    }\n})();\n</code></pre>\n\n<p>And results:</p>\n\n<pre><code>definedButNotInitialized in window: true\ndefinedAndInitialized in window: false\nsomeObject.firstProp in window: false\nsomeObject.secondProp in window: false\nsomeObject.undefinedProp in window: true\nnotDefined in window: Exception--ReferenceError: notDefined is not defined\n\"definedButNotInitialized\" in window: false\n\"definedAndInitialized\" in window: true\n\"someObject.firstProp\" in window: false\n\"someObject.secondProp\" in window: false\n\"someObject.undefinedProp\" in window: false\n\"notDefined\" in window: false\ntypeof definedButNotInitialized == \"undefined\": true\ntypeof definedButNotInitialized === typeof undefined: true\ndefinedButNotInitialized === undefined: true\n! definedButNotInitialized: true\n!! definedButNotInitialized: false\ntypeof definedAndInitialized == \"undefined\": false\ntypeof definedAndInitialized === typeof undefined: false\ndefinedAndInitialized === undefined: false\n! definedAndInitialized: false\n!! definedAndInitialized: true\ntypeof someObject.firstProp == \"undefined\": false\ntypeof someObject.firstProp === typeof undefined: false\nsomeObject.firstProp === undefined: false\n! someObject.firstProp: false\n!! someObject.firstProp: true\ntypeof someObject.secondProp == \"undefined\": false\ntypeof someObject.secondProp === typeof undefined: false\nsomeObject.secondProp === undefined: false\n! someObject.secondProp: true\n!! someObject.secondProp: false\ntypeof someObject.undefinedProp == \"undefined\": true\ntypeof someObject.undefinedProp === typeof undefined: true\nsomeObject.undefinedProp === undefined: true\n! someObject.undefinedProp: true\n!! someObject.undefinedProp: false\ntypeof notDefined == \"undefined\": true\ntypeof notDefined === typeof undefined: true\nnotDefined === undefined: Exception--ReferenceError: notDefined is not defined\n! notDefined: Exception--ReferenceError: notDefined is not defined\n!! notDefined: Exception--ReferenceError: notDefined is not defined\n</code></pre>\n"},{"owner":{"reputation":491,"user_id":1169253,"user_type":"registered","accept_rate":75,"profile_image":"https://www.gravatar.com/avatar/0e35904efca203a43df1c4f24613b947?s=128&d=identicon&r=PG","display_name":"Sam4Code","link":"https://stackoverflow.com/users/1169253/sam4code"},"is_accepted":false,"score":14,"last_activity_date":1345617872,"last_edit_date":1345617872,"creation_date":1345610014,"answer_id":12066351,"question_id":950087,"content_license":"CC BY-SA 3.0","body":"<pre><code>var js = document.createElement(\"script\");\n\njs.type = \"text/javascript\";\njs.src = jsFilePath;\n\ndocument.body.appendChild(js);\n</code></pre>\n"},{"owner":{"reputation":70031,"user_id":23691,"user_type":"registered","accept_rate":71,"profile_image":"https://www.gravatar.com/avatar/ffd58f2ec488a7160c4e7bbfdf179493?s=128&d=identicon&r=PG","display_name":"krosenvold","link":"https://stackoverflow.com/users/23691/krosenvold"},"is_accepted":false,"score":237,"last_activity_date":1344930846,"last_edit_date":1344930846,"creation_date":1233477334,"answer_id":500438,"question_id":500431,"content_license":"CC BY-SA 3.0","body":"<p>Javascript uses scope chains to establish the scope for a given function. There is typically one global scope, and each function defined has its own nested scope. Any function defined within another function has a local scope which is linked to the outer function. It's always the position in the source that defines the scope.</p>\n\n<p>An element in the scope chain is basically a Map with a pointer to its parent scope.</p>\n\n<p>When resolving a variable, javascript starts at the innermost scope and searches outwards.</p>\n"},{"owner":{"reputation":6373,"user_id":218294,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/6ecbae898b5088d092feea0f82ae5ffb?s=128&d=identicon&r=PG","display_name":"Sam Watkins","link":"https://stackoverflow.com/users/218294/sam-watkins"},"is_accepted":false,"score":54,"last_activity_date":1344245407,"last_edit_date":1344245407,"creation_date":1344245084,"answer_id":11825563,"question_id":38987,"content_license":"CC BY-SA 3.0","body":"<pre><code>def dict_merge(a, b):\n  c = a.copy()\n  c.update(b)\n  return c\n\nnew = dict_merge(old, extras)\n</code></pre>\n\n<p>Among such shady and dubious answers, this shining example is the one and only good way to merge dicts in Python, endorsed by dictator for life <em>Guido van Rossum</em> himself!  Someone else suggested half of this, but did not put it in a function.</p>\n\n<pre><code>print dict_merge(\n      {'color':'red', 'model':'Mini'},\n      {'model':'Ferrari', 'owner':'Carl'})\n</code></pre>\n\n<p>gives:</p>\n\n<pre><code>{'color': 'red', 'owner': 'Carl', 'model': 'Ferrari'}\n</code></pre>\n"},{"owner":{"reputation":20770,"user_id":907779,"user_type":"registered","profile_image":"https://i.stack.imgur.com/AUTVc.jpg?s=128&g=1","display_name":"Joel Purra","link":"https://stackoverflow.com/users/907779/joel-purra"},"is_accepted":false,"score":19,"last_activity_date":1344095254,"last_edit_date":1495542899,"creation_date":1344093871,"answer_id":11809755,"question_id":336859,"content_license":"CC BY-SA 3.0","body":"<p><a href=\"https://stackoverflow.com/users/26394/eugene-lazutkin\">@EugeneLazutkin</a> gives an example where he <a href=\"https://stackoverflow.com/a/338053/\">names an assigned function to be able to use <code>shortcut()</code></a> as an internal reference to itself. <a href=\"http://ejohn.org/\" rel=\"nofollow noreferrer\">John Resig</a> gives another example - <em>copying a recursive function assigned to another object</em> in his <a href=\"http://ejohn.org/apps/learn/\" rel=\"nofollow noreferrer\">Learning Advanced Javascript</a> tutorial. While assigning functions to properties isn't strictly the question here, I recommend actively trying the tutorial out - run the code by clicking the button in the upper right corner, and double click the code to edit to your liking.</p>\n\n<p>Examples from the tutorial: recursive calls in <code>yell()</code>:</p>\n\n<p><a href=\"http://ejohn.org/apps/learn/#13\" rel=\"nofollow noreferrer\">Tests fail when the original ninja object is removed.</a> (page 13)</p>\n\n<pre><code>var ninja = { \n  yell: function(n){ \n    return n &gt; 0 ? ninja.yell(n-1) + \"a\" : \"hiy\"; \n  } \n}; \nassert( ninja.yell(4) == \"hiyaaaa\", \"A single object isn't too bad, either.\" ); \n\nvar samurai = { yell: ninja.yell }; \nvar ninja = null; \n\ntry { \n  samurai.yell(4); \n} catch(e){ \n  assert( false, \"Uh, this isn't good! Where'd ninja.yell go?\" ); \n}\n</code></pre>\n\n<p><a href=\"http://ejohn.org/apps/learn/#14\" rel=\"nofollow noreferrer\">If you name the function that will be called recursively, the tests will pass.</a> (page 14)</p>\n\n<pre><code>var ninja = { \n  yell: function yell(n){ \n    return n &gt; 0 ? yell(n-1) + \"a\" : \"hiy\"; \n  } \n}; \nassert( ninja.yell(4) == \"hiyaaaa\", \"Works as we would expect it to!\" ); \n\nvar samurai = { yell: ninja.yell }; \nvar ninja = {}; \nassert( samurai.yell(4) == \"hiyaaaa\", \"The method correctly calls itself.\" );\n</code></pre>\n"},{"owner":{"reputation":245,"user_id":1575349,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/beaad49077b11a2cee897dd81a3115d1?s=128&d=identicon&r=PG","display_name":"Thanh Lim","link":"https://stackoverflow.com/users/1575349/thanh-lim"},"is_accepted":false,"score":22,"last_activity_date":1344037010,"creation_date":1344037010,"answer_id":11804613,"question_id":38987,"content_license":"CC BY-SA 3.0","body":"<p>Even though the answers were good for this <em>shallow</em> dictionary, none of the methods defined here actually do a deep dictionary merge.</p>\n\n<p>Examples follow:</p>\n\n<pre><code>a = { 'one': { 'depth_2': True }, 'two': True }\nb = { 'one': { 'extra': False } }\nprint dict(a.items() + b.items())\n</code></pre>\n\n<p>One would expect a result of something like this:</p>\n\n<pre><code>{ 'one': { 'extra': False', 'depth_2': True }, 'two': True }\n</code></pre>\n\n<p>Instead, we get this:</p>\n\n<pre><code>{'two': True, 'one': {'extra': False}}\n</code></pre>\n\n<p>The 'one' entry should have had 'depth_2' and 'extra' as items inside its dictionary if it truly was a merge.</p>\n\n<p>Using chain also, does not work:</p>\n\n<pre><code>from itertools import chain\nprint dict(chain(a.iteritems(), b.iteritems()))\n</code></pre>\n\n<p>Results in:</p>\n\n<pre><code>{'two': True, 'one': {'extra': False}}\n</code></pre>\n\n<p>The deep merge that rcwesick gave also creates the same result.</p>\n\n<p>Yes, it will work to merge the sample dictionaries, but none of them are a generic mechanism to merge.  I'll update this later once I write a method that does a true merge.</p>\n"},{"owner":{"reputation":44926,"user_id":20774,"user_type":"registered","accept_rate":92,"profile_image":"https://www.gravatar.com/avatar/3e32e31d4c24c1558abd6567f2ab60ba?s=128&d=identicon&r=PG","display_name":"James McMahon","link":"https://stackoverflow.com/users/20774/james-mcmahon"},"is_accepted":false,"score":31,"last_activity_date":1337103510,"creation_date":1337103510,"answer_id":10605984,"question_id":500431,"content_license":"CC BY-SA 3.0","body":"<p>The key, as I understand it, is that Javascript has function level scoping vs the more common C block scoping.</p>\n\n<p><a href=\"http://www.adequatelygood.com/2010/2/JavaScript-Scoping-and-Hoisting\">Here is a good article on the subject.</a></p>\n"},{"owner":{"reputation":13546,"user_id":83658,"user_type":"registered","accept_rate":42,"profile_image":"https://www.gravatar.com/avatar/f2b8ccc227f3ae306206b1882458c8c1?s=128&d=identicon&r=PG","display_name":"jpierson","link":"https://stackoverflow.com/users/83658/jpierson"},"is_accepted":false,"score":6,"last_activity_date":1330834752,"creation_date":1330834752,"answer_id":9552278,"question_id":950087,"content_license":"CC BY-SA 3.0","body":"<p>In a past project I had quite a bit of success using <a href=\"http://ajile.net/\" rel=\"noreferrer\">ajile</a> to do imports of reusable JavaScript files. I always wished there was a feature for this built into JavaScript itself.</p>\n"},{"owner":{"reputation":2687,"user_id":1419479,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/f012fce9f997ceefa53283631d45de0d?s=128&d=identicon&r=PG","display_name":"Corey Richardson","link":"https://stackoverflow.com/users/1419479/corey-richardson"},"is_accepted":false,"score":-2,"last_activity_date":1329582404,"creation_date":1329582404,"answer_id":9342877,"question_id":27509,"content_license":"CC BY-SA 3.0","body":"<p><code>Object.hasOwnProperty(o, 'propertyname');</code></p>\n\n<p>This doesn't look up through the prototype chain, however.</p>\n"},{"owner":{"reputation":791668,"user_id":19068,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/1d2d3229ed1961d2bd81853242493247?s=128&d=identicon&r=PG","display_name":"Quentin","link":"https://stackoverflow.com/users/19068/quentin"},"is_accepted":false,"score":50,"last_activity_date":1329486946,"creation_date":1329486946,"answer_id":9329504,"question_id":9329446,"content_license":"CC BY-SA 3.0","body":"<p>If you want to loop over an array, use the standard three-part <code>for</code> loop.</p>\n\n<pre><code>for (var i = 0; i &lt; myArray.length; i++) {\n    var arrayItem = myArray[i];\n}\n</code></pre>\n\n<p>You can get some performance optimisations by caching <code>myArray.length</code> or iterating over it backwards.</p>\n"},{"owner":{"reputation":717349,"user_id":5445,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/932fb89b9d4049cec5cba357bf0ae388?s=128&d=identicon&r=PG","display_name":"Christian C. Salvad&#243;","link":"https://stackoverflow.com/users/5445/christian-c-salvad%c3%b3"},"is_accepted":false,"score":155,"last_activity_date":1322580068,"last_edit_date":1495541454,"creation_date":1281295931,"answer_id":3435763,"question_id":336859,"content_license":"CC BY-SA 3.0","body":"<p>Speaking about the global context, both, the <code>var</code> statement and a <code>FunctionDeclaration</code> at the end will create a <em>non-deleteable</em> property on the global object, but the value of both <em>can be overwritten</em>.</p>\n\n<p>The subtle difference between the two ways is that when the <a href=\"http://bclary.com/2004/11/07/#a-10.1.3\" rel=\"noreferrer\">Variable Instantiation</a> process runs (before the actual code execution) all identifiers declared with <code>var</code> will be initialized with <code>undefined</code>, and the ones used by the <code>FunctionDeclaration</code>'s will be available since that moment, for example:</p>\n\n<pre><code> alert(typeof foo); // 'function', it's already available\n alert(typeof bar); // 'undefined'\n function foo () {}\n var bar = function () {};\n alert(typeof bar); // 'function'\n</code></pre>\n\n<p>The assignment of the <code>bar</code> <code>FunctionExpression</code> takes place until runtime.</p>\n\n<p>A global property created by a <code>FunctionDeclaration</code> can be overwritten without any problems just like a variable value, e.g.:</p>\n\n<pre><code> function test () {}\n test = null;\n</code></pre>\n\n<p>Another obvious difference between your two examples is that the first function doesn't have a name, but the second has it, which can be really useful when debugging (i.e. inspecting a call stack).</p>\n\n<p>About your edited first example (<code>foo = function() { alert('hello!'); };</code>), it is an undeclared assignment, I would highly encourage you to always use the <code>var</code> keyword.</p>\n\n<p>With an assignment, without the <code>var</code> statement, if the referenced identifier is not found in the scope chain, it will become a <em>deleteable</em> property of the global object.</p>\n\n<p>Also, undeclared assignments throw a <code>ReferenceError</code> on ECMAScript 5 under <a href=\"http://dmitrysoshnikov.com/ecmascript/es5-chapter-2-strict-mode/\" rel=\"noreferrer\">Strict Mode</a>.</p>\n\n<p>A must read:</p>\n\n<ul>\n<li><a href=\"http://kangax.github.com/nfe/\" rel=\"noreferrer\">Named function expressions demystified</a></li>\n</ul>\n\n<p><strong>Note</strong>: This answer has been merged from <a href=\"https://stackoverflow.com/questions/3435709/why-are-functions-in-javascript-set-to-global-variables-instead-of-plain-function\">another question</a>, in which the major doubt and misconception from the OP was that identifiers declared with a <code>FunctionDeclaration</code>, couldn't be overwritten which is not the case.</p>\n"},{"owner":{"reputation":883,"user_id":364984,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/a529fd1ad1f897ff720065bd6de1738e?s=128&d=identicon&r=PG","display_name":"EMS","link":"https://stackoverflow.com/users/364984/ems"},"is_accepted":false,"score":49,"last_activity_date":1322072448,"last_edit_date":1322072448,"creation_date":1322071703,"answer_id":8247023,"question_id":38987,"content_license":"CC BY-SA 3.0","body":"<p>If you think lambdas are evil then read no further.\nAs requested, you can write the fast and memory-efficient solution with one expression:</p>\n\n<pre><code>x = {'a':1, 'b':2}\ny = {'b':10, 'c':11}\nz = (lambda a, b: (lambda a_copy: a_copy.update(b) or a_copy)(a.copy()))(x, y)\nprint z\n{'a': 1, 'c': 11, 'b': 10}\nprint x\n{'a': 1, 'b': 2}\n</code></pre>\n\n<p>As suggested above, using two lines or writing a function is probably a better way to go.</p>\n"},{"owner":{"reputation":2136,"user_id":509648,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/9e12d88aff59b3cb0d8269ad7218e1b0?s=128&d=identicon&r=PG","display_name":"phobie","link":"https://stackoverflow.com/users/509648/phobie"},"is_accepted":false,"score":59,"last_activity_date":1318608753,"creation_date":1318608753,"answer_id":7770473,"question_id":38987,"content_license":"CC BY-SA 3.0","body":"<p>While the question has already been answered several times,\nthis simple solution to the problem has not been listed yet.</p>\n\n<pre><code>x = {'a':1, 'b': 2}\ny = {'b':10, 'c': 11}\nz4 = {}\nz4.update(x)\nz4.update(y)\n</code></pre>\n\n<p>It is as fast as z0 and the evil z2 mentioned above, but easy to understand and change.</p>\n"},{"owner":{"reputation":453,"user_id":455129,"user_type":"unregistered","profile_image":"https://www.gravatar.com/avatar/f7d8b432f7e7bb049a41bca9bb2c4722?s=128&d=identicon&r=PG","display_name":"Eric","link":"https://stackoverflow.com/users/455129/eric"},"is_accepted":false,"score":42,"last_activity_date":1309332072,"last_edit_date":1309332072,"creation_date":1285165218,"answer_id":3770178,"question_id":27509,"content_license":"CC BY-SA 3.0","body":"<p>I'm not sure where the origin of using <code>===</code> with <code>typeof</code> came from, and as a convention I see it used in many libraries, but the typeof operator returns a string literal, and we know that up front, so why would you also want to type check it too?</p>\n\n<pre><code>typeof x;                      // some string literal \"string\", \"object\", \"undefined\"\nif (typeof x === \"string\") {   // === is redundant because we already know typeof returns a string literal\nif (typeof x == \"string\") {    // sufficient\n</code></pre>\n"},{"owner":{"reputation":23056,"user_id":70261,"user_type":"registered","profile_image":"https://i.stack.imgur.com/jUqFc.jpg?s=128&g=1","display_name":"chuckj","link":"https://stackoverflow.com/users/70261/chuckj"},"is_accepted":false,"score":2,"last_activity_date":1308283086,"creation_date":1308283086,"answer_id":6381172,"question_id":6381136,"content_license":"CC BY-SA 3.0","body":"<p>My guess is you don't have right.js included before right-autocompleter.js because it is complaining that RightJS.Class is not a function which it is true if Class is not defined in the RightJS object.</p>\n"},{"owner":{"reputation":1965,"user_id":212307,"user_type":"registered","accept_rate":96,"profile_image":"https://www.gravatar.com/avatar/37f4d3bf437fea4708bd5c9411033694?s=128&d=identicon&r=PG","display_name":"Rixius","link":"https://stackoverflow.com/users/212307/rixius"},"is_accepted":false,"score":4,"last_activity_date":1308102209,"last_edit_date":1308102209,"creation_date":1278968063,"answer_id":3232194,"question_id":27509,"content_license":"CC BY-SA 3.0","body":"<pre><code>function isUnset(inp) {\n  return (typeof inp === 'undefined')\n}\n</code></pre>\n\n<p>Returns false if variable is set, and true if is undefined.</p>\n\n<p>Then use:</p>\n\n<pre><code>if (isUnset(var)) {\n  // initialize variable here\n}\n</code></pre>\n"},{"owner":{"reputation":2171,"user_id":72476,"user_type":"registered","accept_rate":75,"profile_image":"https://www.gravatar.com/avatar/21ee2bfa3032b1db6cce0e0b6a9fc143?s=128&d=identicon&r=PG","display_name":"driax","link":"https://stackoverflow.com/users/72476/driax"},"is_accepted":false,"score":84,"last_activity_date":1287082515,"creation_date":1287082515,"answer_id":3936548,"question_id":38987,"content_license":"CC BY-SA 2.5","body":"<p>The best version I could think while not using copy would be:</p>\n\n<pre><code>from itertools import chain\nx = {'a':1, 'b': 2}\ny = {'b':10, 'c': 11}\ndict(chain(x.iteritems(), y.iteritems()))\n</code></pre>\n\n<p>It's faster than <code>dict(x.items() + y.items())</code> but not as fast as <code>n = copy(a); n.update(b)</code>, at least on CPython. This version also works in Python 3 if you change <code>iteritems()</code> to <code>items()</code>, which is automatically done by the 2to3 tool.</p>\n\n<p>Personally I like this version best because it describes fairly good what I want in a single  functional syntax. The only minor problem is that it doesn't make completely obvious that values from y takes precedence over values from x, but I don't believe it's difficult to figure that out.</p>\n"},{"owner":{"reputation":469,"user_id":403606,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/eb5af17e70c56c5128702db6f669f319?s=128&d=identicon&r=PG&f=1","display_name":"Kevin","link":"https://stackoverflow.com/users/403606/kevin"},"is_accepted":false,"score":46,"last_activity_date":1283377768,"last_edit_date":1283377768,"creation_date":1280246632,"answer_id":3345556,"question_id":27509,"content_license":"CC BY-SA 2.5","body":"<pre><code>if ( typeof( something ) == \"undefined\") \n</code></pre>\n\n<p>This worked for me while the others didn't.</p>\n"},{"owner":{"reputation":26949,"user_id":3659,"user_type":"registered","accept_rate":60,"profile_image":"https://www.gravatar.com/avatar/4cd8f5ce84d7d1a1f24c265f1e21b70e?s=128&d=identicon&r=PG","display_name":"Cristian Sanchez","link":"https://stackoverflow.com/users/3659/cristian-sanchez"},"is_accepted":false,"score":0,"last_activity_date":1280772141,"creation_date":1280772141,"answer_id":3390453,"question_id":3390396,"content_license":"CC BY-SA 2.5","body":"<p>I use it as a function parameter and exclude it on function execution that way I get the \"real\" undefined. Although it does require you to put your code inside a function. I found this while reading the jQuery source.</p>\n\n<pre><code>undefined = 2;\n\n(function (undefined) {\n   console.log(undefined); // prints out undefined\n   // and for comparison:\n   if (undeclaredvar === undefined) console.log(\"it works!\")\n})()\n</code></pre>\n\n<p>Of course you could just use <code>typeof</code> though. But all my code is usually inside a containing function anyways, so using this method probably saves me a few bytes here and there.</p>\n"},{"owner":{"reputation":636388,"user_id":69083,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/1db0cdfd3fe268e270ec481a73046c2f?s=128&d=identicon&r=PG","display_name":"Guffa","link":"https://stackoverflow.com/users/69083/guffa"},"is_accepted":false,"score":25,"last_activity_date":1275856381,"last_edit_date":1275856381,"creation_date":1275855796,"answer_id":2985776,"question_id":3390396,"content_license":"CC BY-SA 2.5","body":"<p>If it is undefined, it will not be equal to a string that contains the characters \"undefined\", as the string is not undefined.</p>\n\n<p>You can check the type of the variable:</p>\n\n<pre><code>if (typeof(something) != \"undefined\") ...\n</code></pre>\n\n<p>Sometimes you don't even have to check the type. If the value of the variable can't evaluate to false when it's set (for example if it's a function), then you can just evalue the variable. Example:</p>\n\n<pre><code>if (something) {\n  something(param);\n}\n</code></pre>\n"},{"owner":{"reputation":129015,"user_id":96656,"user_type":"registered","accept_rate":96,"profile_image":"https://www.gravatar.com/avatar/24e08a9ea84deb17ae121074d0f17125?s=128&d=identicon&r=PG","display_name":"Mathias Bynens","link":"https://stackoverflow.com/users/96656/mathias-bynens"},"is_accepted":false,"score":18,"last_activity_date":1275855997,"creation_date":1275855997,"answer_id":2985784,"question_id":3390396,"content_license":"CC BY-SA 2.5","body":"<pre><code>if (typeof foo == 'undefined') {\n // Do something\n};\n</code></pre>\n\n<p>Note that strict comparison (<code>!==</code>) is not necessary in this case, since <code>typeof</code> will always return a string.</p>\n"},{"owner":{"reputation":465732,"user_id":224671,"user_type":"registered","accept_rate":67,"profile_image":"https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG","display_name":"kennytm","link":"https://stackoverflow.com/users/224671/kennytm"},"is_accepted":false,"score":26,"last_activity_date":1270552779,"creation_date":1270552779,"answer_id":2584356,"question_id":500431,"content_license":"CC BY-SA 2.5","body":"<p>In \"Javascript 1.7\" (Mozilla's extension to Javascript) one can also declare block-scope variables with <a href=\"https://developer.mozilla.org/en/New_in_JavaScript_1.7#section_11\" rel=\"noreferrer\"><code>let</code> statement</a>:</p>\n\n<pre><code> var a = 4;\n let (a = 3) {\n   alert(a); // 3\n }\n alert(a);   // 4\n</code></pre>\n"},{"owner":{"reputation":36306,"user_id":50214,"user_type":"registered","accept_rate":97,"profile_image":"https://www.gravatar.com/avatar/443f71885827eac7afa2a87bb70be610?s=128&d=identicon&r=PG","display_name":"geowa4","link":"https://stackoverflow.com/users/50214/geowa4"},"is_accepted":false,"score":41,"last_activity_date":1233478089,"creation_date":1233478089,"answer_id":500446,"question_id":500431,"content_license":"CC BY-SA 2.5","body":"<p>Here's an example:</p>\n\n<pre><code>&lt;script&gt;\n\nvar globalVariable = 7; //==window.globalVariable\n\nfunction aGlobal( param ) { //==window.aGlobal(); \n                            //param is only accessible in this function\n  var scopedToFunction = {\n    //can't be accessed outside of this function\n\n    nested : 3 //accessible by: scopedToFunction.nested\n  };\n\n  anotherGlobal = {\n    //global because there's no `var`\n  }; \n\n}\n\n&lt;/script&gt;\n</code></pre>\n\n<p>You'll want to investigate closures, and how to use them to make <a href=\"http://www.crockford.com/javascript/private.html\" rel=\"noreferrer\">private members</a>.</p>\n"},{"owner":{"reputation":32134,"user_id":188,"user_type":"registered","accept_rate":100,"profile_image":"https://www.gravatar.com/avatar/833bfbcc9940cfcf0af6def751c23b05?s=128&d=identicon&r=PG","display_name":"Matthew Schinckel","link":"https://stackoverflow.com/users/188/matthew-schinckel"},"is_accepted":false,"score":671,"last_activity_date":1220360446,"creation_date":1220360446,"answer_id":39437,"question_id":38987,"content_license":"CC BY-SA 2.5","body":"<p>An alternative:</p>\n\n<pre><code>z = x.copy()\nz.update(y)\n</code></pre>\n"},{"owner":{"reputation":819788,"user_id":893,"user_type":"registered","accept_rate":84,"profile_image":"https://www.gravatar.com/avatar/747ffa5da3538e66840ebc0548b8fd58?s=128&d=identicon&r=PG","display_name":"Greg Hewgill","link":"https://stackoverflow.com/users/893/greg-hewgill"},"is_accepted":false,"score":72,"last_activity_date":1220341767,"creation_date":1220341767,"answer_id":38989,"question_id":38987,"content_license":"CC BY-SA 2.5","body":"<pre><code>x = {'a':1, 'b': 2}\ny = {'b':10, 'c': 11}\nz = dict(x.items() + y.items())\nprint z\n</code></pre>\n\n<p>For items with keys in both dictionaries ('b'), you can control which one ends up in the output by putting that one last.</p>\n"},{"owner":{"reputation":3412,"user_id":1662,"user_type":"registered","accept_rate":83,"profile_image":"https://www.gravatar.com/avatar/73839ca7096e77b6df215bb3e440633a?s=128&d=identicon&r=PG","display_name":"tslocum","link":"https://stackoverflow.com/users/1662/tslocum"},"is_accepted":false,"score":-20,"last_activity_date":1219735677,"creation_date":1219735677,"answer_id":27510,"question_id":27509,"content_license":"CC BY-SA 2.5","body":"<pre><code>if (somevariable == undefined) {\n  alert('the variable is not defined!');\n}\n</code></pre>\n\n<p>You can also make it into a function, as shown <a href=\"http://verens.com/archives/2005/07/25/isset-for-javascript/\" rel=\"nofollow noreferrer\">here</a>:</p>\n\n<pre><code>function isset(varname){\n  return(typeof(window[varname]) != 'undefined');\n}\n</code></pre>\n"}],"has_more":false,"quota_max":300,"quota_remaining":267}
