{"items":[{"owner":{"reputation":868959,"user_id":157247,"user_type":"registered","accept_rate":91,"profile_image":"https://i.stack.imgur.com/4HovX.jpg?s=128&g=1","display_name":"T.J. Crowder","link":"https://stackoverflow.com/users/157247/t-j-crowder"},"is_accepted":true,"score":7396,"last_activity_date":1612886690,"last_edit_date":1612886690,"creation_date":1329486824,"answer_id":9329476,"question_id":9329446,"content_license":"CC BY-SA 4.0","body":"\n<p><strong>TL;DR</strong></p>\n<ul>\n<li><p><strong>Your best bets</strong> are usually</p>\n<ul>\n<li>a <code>for-of</code> loop (ES2015+ only)</li>\n<li><code>forEach</code> (<a href=\"https://tc39.github.io/ecma262/#sec-array.prototype.foreach\" rel=\"noreferrer\"><code>spec</code></a> | <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\" rel=\"noreferrer\"><code>MDN</code></a>) (or its relatives <code>some</code> and such) (ES5+ only)</li>\n<li>a simple old-fashioned <code>for</code> loop</li>\n<li><em>(rarely)</em> <code>for-in</code> <em>with safeguards</em></li>\n</ul>\n</li>\n<li><p><strong>Don't use <code>for-in</code></strong> unless you use it with safeguards or are at least aware of why it might bite you.</p>\n</li>\n<li><p><strong>Don't use <code>map</code></strong> (<a href=\"https://tc39.es/ecma262/#sec-array.prototype.map\" rel=\"noreferrer\"><code>spec</code></a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\" rel=\"noreferrer\"><code>MDN</code></a>) if you're not using the return value of <code>map</code>.<br><em>(there's sadly someone out there teaching <code>map</code> as though it were <code>forEach</code> — <code>map</code>'s job is to create a new array from the values of the original passed through your mapping function, don't use it just for iteration)</em></p>\n</li>\n</ul>\n<p>But there's <strong>lots</strong> more to explore, read on...</p>\n<hr />\n<p>JavaScript has powerful semantics for looping through arrays and array-like objects. I've split the answer into two parts: Options for genuine arrays, and options for things that are just array-<em>like</em>, such as the <code>arguments</code> object, other iterable objects (ES2015+), DOM collections, and so on.</p>\n<p>I'll quickly note that you can use the ES2015 options <em>now</em>, even on ES5 engines, by <em>transpiling</em> ES2015 to ES5. Search for &quot;ES2015 transpiling&quot; / &quot;ES6 transpiling&quot; for more...</p>\n<p>Okay, let's look at our options:</p>\n<h2>For Actual Arrays</h2>\n<p>You have three options in <a href=\"http://ecma-international.org/ecma-262/5.1/\" rel=\"noreferrer\">ECMAScript 5</a> (&quot;ES5&quot;), the version most broadly supported at the moment, and two more added in <a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html\" rel=\"noreferrer\">ECMAScript 2015</a> (&quot;ES2015&quot;, &quot;ES6&quot;):</p>\n<ol>\n<li>Use <code>forEach</code> and related (ES5+)</li>\n<li>Use a simple <code>for</code> loop</li>\n<li>Use <code>for-in</code> <em>correctly</em></li>\n<li>Use <code>for-of</code> (use an iterator implicitly) (ES2015+)</li>\n<li>Use an iterator explicitly (ES2015+)</li>\n</ol>\n<p>Details:</p>\n<h3>1. Use <code>forEach</code> and related</h3>\n<p>In any vaguely-modern environment (so, not IE8) where you have access to the <code>Array</code> features added by ES5 (directly or using polyfills), you can use <code>forEach</code> (<a href=\"https://tc39.github.io/ecma262/#sec-array.prototype.foreach\" rel=\"noreferrer\"><code>spec</code></a> | <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\" rel=\"noreferrer\"><code>MDN</code></a>):</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var a = [\"a\", \"b\", \"c\"];\na.forEach(function(entry) {\n    console.log(entry);\n});</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p><code>forEach</code> accepts a callback function and, optionally, a value to use as <code>this</code> when calling that callback (not used above). The callback is called for each entry in the array, in order, skipping non-existent entries in sparse arrays. Although I only used one argument above, the callback is called with three: The value of each entry, the index of that entry, and a reference to the array you're iterating over (in case your function doesn't already have it handy).</p>\n<p>Unless you're supporting obsolete browsers like IE8 (which NetApps shows at just over 4% market share as of this writing in September 2016), you can happily use <code>forEach</code> in a general-purpose web page without a shim. If you do need to support obsolete browsers, shimming/polyfilling <code>forEach</code> is easily done (search for &quot;es5 shim&quot; for several options).</p>\n<p><code>forEach</code> has the benefit that you don't have to declare indexing and value variables in the containing scope, as they're supplied as arguments to the iteration function, and so nicely scoped to just that iteration.</p>\n<p>If you're worried about the runtime cost of making a function call for each array entry, don't be; <a href=\"http://blog.niftysnippets.org/2012/02/foreach-and-runtime-cost.html\" rel=\"noreferrer\">details</a>.</p>\n<p>Additionally, <code>forEach</code> is the &quot;loop through them all&quot; function, but ES5 defined several other useful &quot;work your way through the array and do things&quot; functions, including:</p>\n<ul>\n<li><a href=\"https://tc39.github.io/ecma262/#sec-array.prototype.every\" rel=\"noreferrer\"><code>every</code></a> (stops looping the first time the callback returns <code>false</code> or something falsey)</li>\n<li><a href=\"https://tc39.github.io/ecma262/#sec-array.prototype.some\" rel=\"noreferrer\"><code>some</code></a> (stops looping the first time the callback returns <code>true</code> or something truthy)</li>\n<li><a href=\"https://tc39.github.io/ecma262/#sec-array.prototype.filter\" rel=\"noreferrer\"><code>filter</code></a> (creates a new array including elements where the filter function returns <code>true</code> and omitting the ones where it returns <code>false</code>)</li>\n<li><a href=\"https://tc39.github.io/ecma262/#sec-array.prototype.map\" rel=\"noreferrer\"><code>map</code></a> (creates a new array from the values returned by the callback)</li>\n<li><a href=\"https://tc39.github.io/ecma262/#sec-array.prototype.reduce\" rel=\"noreferrer\"><code>reduce</code></a> (builds up a value by repeatedly calling the callback, passing in previous values; see the spec for the details; useful for summing the contents of an array and many other things)</li>\n<li><a href=\"https://tc39.github.io/ecma262/#sec-array.prototype.reduceright\" rel=\"noreferrer\"><code>reduceRight</code></a> (like <code>reduce</code>, but works in descending rather than ascending order)</li>\n</ul>\n<h3>2. Use a simple <code>for</code> loop</h3>\n<p>Sometimes the old ways are the best:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var index;\nvar a = [\"a\", \"b\", \"c\"];\nfor (index = 0; index &lt; a.length; ++index) {\n    console.log(a[index]);\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>If the length of the array won't change during the loop, and it's in performance-sensitive code (unlikely), a slightly more complicated version grabbing the length up front might be a <em><strong>tiny</strong></em> bit faster:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var index, len;\nvar a = [\"a\", \"b\", \"c\"];\nfor (index = 0, len = a.length; index &lt; len; ++index) {\n    console.log(a[index]);\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>And/or counting backward:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var index;\nvar a = [\"a\", \"b\", \"c\"];\nfor (index = a.length - 1; index &gt;= 0; --index) {\n    console.log(a[index]);\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>But with modern JavaScript engines, it's rare you need to eke out that last bit of juice.</p>\n<p>In ES2015 and higher, you can make your index and value variables local to the <code>for</code> loop:</p>\n<pre><code>let a = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;];\nfor (let index = 0; index &lt; a.length; ++index) {\n    let value = a[index];\n    console.log(index, value);\n}\n//console.log(index);   // would cause &quot;ReferenceError: index is not defined&quot;\n//console.log(value);   // would cause &quot;ReferenceError: value is not defined&quot;\n</code></pre>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>let a = [\"a\", \"b\", \"c\"];\nfor (let index = 0; index &lt; a.length; ++index) {\n    let value = a[index];\n    console.log(index, value);\n}\ntry {\n    console.log(index);\n} catch (e) {\n    console.error(e);   // \"ReferenceError: index is not defined\"\n}\ntry {\n    console.log(value);\n} catch (e) {\n    console.error(e);   // \"ReferenceError: value is not defined\"\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>And when you do that, not just <code>value</code> but also <code>index</code> is recreated for each loop iteration, meaning closures created in the loop body keep a reference to the <code>index</code> (and <code>value</code>) created for that specific iteration:</p>\n<pre><code>let divs = document.querySelectorAll(&quot;div&quot;);\nfor (let index = 0; index &lt; divs.length; ++index) {\n    divs[index].addEventListener('click', e =&gt; {\n        console.log(&quot;Index is: &quot; + index);\n    });\n}\n</code></pre>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>let divs = document.querySelectorAll(\"div\");\nfor (let index = 0; index &lt; divs.length; ++index) {\n    divs[index].addEventListener('click', e =&gt; {\n        console.log(\"Index is: \" + index);\n    });\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;div&gt;zero&lt;/div&gt;\n&lt;div&gt;one&lt;/div&gt;\n&lt;div&gt;two&lt;/div&gt;\n&lt;div&gt;three&lt;/div&gt;\n&lt;div&gt;four&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>If you had five divs, you'd get &quot;Index is: 0&quot; if you clicked the first and &quot;Index is: 4&quot; if you clicked the last. This does <strong>not</strong> work if you use <code>var</code> instead of <code>let</code>.</p>\n<h3>3. Use <code>for-in</code> <em>correctly</em></h3>\n<p>You'll get people telling you to use <code>for-in</code>, but <a href=\"http://blog.niftysnippets.org/2010/11/myths-and-realities-of-forin.html\" rel=\"noreferrer\">that's not what <code>for-in</code> is for</a>. <code>for-in</code> loops through the <em>enumerable properties of an object</em>, not the indexes of an array. <strong>The order is not guaranteed</strong>, not even in ES2015 (ES6). ES2015+ does define an order to object properties (via <a href=\"https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots-ownpropertykeys\" rel=\"noreferrer\"><code>[[OwnPropertyKeys]]</code></a>, <a href=\"https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots-enumerate\" rel=\"noreferrer\"><code>[[Enumerate]]</code></a>, and things that use them like <a href=\"https://tc39.github.io/ecma262/#sec-object.getownpropertynames\" rel=\"noreferrer\"><code>Object.getOwnPropertyKeys</code></a>), but it didn't define that <code>for-in</code> would follow that order; ES2020 did, though. (Details in <a href=\"https://stackoverflow.com/a/30919039/157247\">this other answer</a>.)</p>\n<p>The only real use cases for <code>for-in</code> on an array are:</p>\n<ul>\n<li>It's a <a href=\"http://en.wikipedia.org/wiki/Sparse_array\" rel=\"noreferrer\"><em>sparse</em> arrays</a> with <strong>massive</strong> gaps in it, or</li>\n<li>You're using non-element properties and you want to include them in the loop</li>\n</ul>\n<p>Looking only at that first example: You can use <code>for-in</code> to visit those sparse array elements if you use appropriate safeguards:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>// `a` is a sparse array\nvar key;\nvar a = [];\na[0] = \"a\";\na[10] = \"b\";\na[10000] = \"c\";\nfor (key in a) {\n    if (a.hasOwnProperty(key)  &amp;&amp;        // These checks are\n        /^0$|^[1-9]\\d*$/.test(key) &amp;&amp;    // explained\n        key &lt;= 4294967294                // below\n        ) {\n        console.log(a[key]);\n    }\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>Note the three checks:</p>\n<ol>\n<li><p>That the object has its <em>own</em> property by that name (not one it inherits from its prototype), and</p>\n</li>\n<li><p>That the key is all decimal digits (e.g., normal string form, not scientific notation), and</p>\n</li>\n<li><p>That the key's value when coerced to a number is &lt;= 2^32 - 2 (which is 4,294,967,294). Where does that number come from? It's part of the definition of an array index <a href=\"https://tc39.github.io/ecma262/#array-index\" rel=\"noreferrer\">in the specification</a>. Other numbers (non-integers, negative numbers, numbers greater than 2^32 - 2) are not array indexes. The reason it's 2^32 - <strong>2</strong> is that that makes the greatest index value one lower than 2^32 - <strong>1</strong>, which is the maximum value an array's <code>length</code> can have. (E.g., an array's length fits in a 32-bit unsigned integer.) <em>(Props to RobG for pointing out in a comment <a href=\"http://blog.niftysnippets.org/2010/11/myths-and-realities-of-forin.html\" rel=\"noreferrer\">on my blog post</a> that my previous test wasn't quite right.)</em></p>\n</li>\n</ol>\n<p>You wouldn't do that in inline code, of course. You'd write a utility function. Perhaps:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>// Utility function for antiquated environments without `forEach`\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar rexNum = /^0$|^[1-9]\\d*$/;\nfunction sparseEach(array, callback, thisArg) {\n    var index;\n    for (var key in array) {\n        index = +key;\n        if (hasOwn.call(a, key) &amp;&amp;\n            rexNum.test(key) &amp;&amp;\n            index &lt;= 4294967294\n            ) {\n            callback.call(thisArg, array[key], index, array);\n        }\n    }\n}\n\nvar a = [];\na[5] = \"five\";\na[10] = \"ten\";\na[100000] = \"one hundred thousand\";\na.b = \"bee\";\n\nsparseEach(a, function(value, index) {\n    console.log(\"Value at \" + index + \" is \" + value);\n});</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<h3>4. Use <code>for-of</code> (use an iterator implicitly) (ES2015+)</h3>\n<p>ES2015 added <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\" rel=\"noreferrer\"><em>iterators</em></a> to JavaScript. The easiest way to use iterators is the new <code>for-of</code> statement. It looks like this:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const a = [\"a\", \"b\", \"c\"];\nfor (const val of a) {\n    console.log(val);\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>Under the covers, that gets an <em>iterator</em> from the array and loops through it, getting the values from it. This doesn't have the issue that using <code>for-in</code> has, because it uses an iterator defined by the object (the array), and arrays define that their iterators iterate through their <em>entries</em> (not their properties). Unlike <code>for-in</code> in ES5, the order in which the entries are visited is the numeric order of their indexes.</p>\n<h3>5. Use an iterator explicitly (ES2015+)</h3>\n<p>Sometimes, you might want to use an <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\" rel=\"noreferrer\">iterator</a> <em>explicitly</em>. You can do that, too, although it's a lot clunkier than <code>for-of</code>. It looks like this:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const a = [\"a\", \"b\", \"c\"];\nconst it = a.values();\nlet entry;\nwhile (!(entry = it.next()).done) {\n    console.log(entry.value);\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>The iterator is an object matching the Iterator definition in the specification. Its <code>next</code> method returns a new <em>result object</em> each time you call it. The result object has a property, <code>done</code>, telling us whether it's done, and a property <code>value</code> with the value for that iteration. (<code>done</code> is optional if it would be <code>false</code>, <code>value</code> is optional if it would be <code>undefined</code>.)</p>\n<p>The meaning of <code>value</code> varies depending on the iterator; arrays support (at least) three functions that return iterators:</p>\n<ul>\n<li><code>values()</code>: This is the one I used above. It returns an iterator where each <code>value</code> is the array entry for that iteration (<code>&quot;a&quot;</code>, <code>&quot;b&quot;</code>, and <code>&quot;c&quot;</code> in the example earlier).</li>\n<li><code>keys()</code>: Returns an iterator where each <code>value</code> is the key for that iteration (so for our <code>a</code> above, that would be <code>&quot;0&quot;</code>, then <code>&quot;1&quot;</code>, then <code>&quot;2&quot;</code>).</li>\n<li><code>entries()</code>: Returns an iterator where each <code>value</code> is an array in the form <code>[key, value]</code> for that iteration.</li>\n</ul>\n<h2>For Array-Like Objects</h2>\n<p>Aside from true arrays, there are also <em>array-like</em> objects that have a <code>length</code> property and properties with numeric names: <code>NodeList</code> instances, the <code>arguments</code> object, etc. How do we loop through their contents?</p>\n<h3>Use any of the options above for arrays</h3>\n<p>At least some, and possibly most or even all, of the array approaches above frequently apply equally well to array-like objects:</p>\n<ol>\n<li><p><strong>Use <code>forEach</code> and related (ES5+)</strong></p>\n<p>The various functions on <code>Array.prototype</code> are &quot;intentionally generic&quot; and can usually be used on array-like objects via <a href=\"https://tc39.github.io/ecma262/#sec-function.prototype.call\" rel=\"noreferrer\"><code>Function#call</code></a> or <a href=\"https://tc39.github.io/ecma262/#sec-function.prototype.apply\" rel=\"noreferrer\"><code>Function#apply</code></a>. (See the <em>Caveat for host-provided objects</em> at the end of this answer, but it's a rare issue.)</p>\n<p>Suppose you wanted to use <code>forEach</code> on a <code>Node</code>'s <code>childNodes</code> property. You'd do this:</p>\n<pre><code> Array.prototype.forEach.call(node.childNodes, function(child) {\n     // Do something with `child`\n });\n</code></pre>\n<p>If you're going to do that a lot, you might want to grab a copy of the function reference into a variable for reuse, e.g.:</p>\n<pre><code> // (This is all presumably in some scoping function)\n var forEach = Array.prototype.forEach;\n\n // Then later...\n forEach.call(node.childNodes, function(child) {\n     // Do something with `child`\n });\n</code></pre>\n</li>\n<li><p><strong>Use a simple <code>for</code> loop</strong></p>\n<p>Obviously, a simple <code>for</code> loop applies to array-like objects.</p>\n</li>\n<li><p><strong>Use <code>for-in</code> <em>correctly</em></strong></p>\n<p><code>for-in</code> with the same safeguards as with an array should work with array-like objects as well; the caveat for host-provided objects on #1 above may apply.</p>\n</li>\n<li><p><strong>Use <code>for-of</code> (use an iterator implicitly) (ES2015+)</strong></p>\n<p><code>for-of</code> uses the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\" rel=\"noreferrer\">iterator</a> provided by the object (if any). That includes host-provided objects. For instance, the specification for the <code>NodeList</code> from <code>querySelectorAll</code> was updated to support iteration. The spec for the <code>HTMLCollection</code> from <code>getElementsByTagName</code> was not.</p>\n</li>\n<li><p><strong>Use an iterator explicitly (ES2015+)</strong></p>\n<p>See #4.</p>\n</li>\n</ol>\n<h3>Create a true array</h3>\n<p>Other times, you may want to convert an array-like object into a true array. Doing that is surprisingly easy:</p>\n<ol>\n<li><p><strong>Use the <code>slice</code> method of arrays</strong></p>\n<p>We can use the <a href=\"https://tc39.github.io/ecma262/#sec-array.prototype.slice\" rel=\"noreferrer\"><code>slice</code></a> method of arrays, which like the other methods mentioned above is &quot;intentionally generic&quot; and so can be used with array-like objects, like this:</p>\n<pre><code> var trueArray = Array.prototype.slice.call(arrayLikeObject);\n</code></pre>\n<p>So for instance, if we want to convert a <code>NodeList</code> into a true array, we could do this:</p>\n<pre><code> var divs = Array.prototype.slice.call(document.querySelectorAll(&quot;div&quot;));\n</code></pre>\n<p>See the <em>Caveat for host-provided objects</em> below. In particular, note that this will fail in IE8 and earlier, which don't let you use host-provided objects as <code>this</code> like that.</p>\n</li>\n<li><p><strong>Use spread syntax (<code>...</code>)</strong></p>\n<p>It's also possible to use ES2015's <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\" rel=\"noreferrer\">spread syntax</a> with JavaScript engines that support this feature. Like <code>for-of</code>, this uses the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\" rel=\"noreferrer\">iterator</a> provided by the object (see #4 in the previous section):</p>\n<pre><code> var trueArray = [...iterableObject];\n</code></pre>\n<p>So for instance, if we want to convert a <code>NodeList</code> into a true array, with spread syntax this becomes quite succinct:</p>\n<pre><code> var divs = [...document.querySelectorAll(&quot;div&quot;)];\n</code></pre>\n</li>\n<li><p><strong>Use <code>Array.from</code></strong></p>\n<p><code>Array.from</code> <a href=\"https://tc39.github.io/ecma262/#sec-array.from\" rel=\"noreferrer\">(spec)</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from\" rel=\"noreferrer\">(MDN)</a> (ES2015+, but easily polyfilled) creates an array from an array-like object, optionally passing the entries through a mapping function first. So:</p>\n<pre><code> var divs = Array.from(document.querySelectorAll(&quot;div&quot;));\n</code></pre>\n<p>Or if you wanted to get an array of the tag names of the elements with a given class, you'd use the mapping function:</p>\n<pre><code> // Arrow function (ES2015):\n var divs = Array.from(document.querySelectorAll(&quot;.some-class&quot;), element =&gt; element.tagName);\n\n // Standard function (since `Array.from` can be shimmed):\n var divs = Array.from(document.querySelectorAll(&quot;.some-class&quot;), function(element) {\n     return element.tagName;\n });\n</code></pre>\n</li>\n</ol>\n<h3>Caveat for host-provided objects</h3>\n<p>If you use <code>Array.prototype</code> functions with <em>host-provided</em> array-like objects (DOM lists and other things provided by the browser rather than the JavaScript engine), you need to be sure to test in your target environments to make sure the host-provided object behaves properly. <strong>Most do behave properly</strong> (now), but it's important to test. The reason is that most of the <code>Array.prototype</code> methods you're likely to want to use rely on the host-provided object giving an honest answer to the abstract <a href=\"https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots-hasproperty-p\" rel=\"noreferrer\"><code>[[HasProperty]]</code></a> operation. As of this writing, browsers do a very good job of this, but the 5.1 spec did allow for the possibility a host-provided object may not be honest. It's in <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-8.6.2\" rel=\"noreferrer\">§8.6.2</a>, several paragraphs below the big table near the beginning of that section), where it says:</p>\n<blockquote>\n<p>Host objects may implement these internal methods in any manner unless specified otherwise; for example, one possibility is that <code>[[Get]]</code> and <code>[[Put]]</code> for a particular host object indeed fetch and store property values but <code>[[HasProperty]]</code> always generates <strong>false</strong>.</p>\n</blockquote>\n<p>(I couldn't find the equivalent verbiage in the ES2015 spec, but it's bound to still be the case.) Again, as of this writing the common host-provided array-like objects in modern browsers [<code>NodeList</code> instances, for instance] <strong>do</strong> handle <code>[[HasProperty]]</code> correctly, but it's important to test.)</p>\n"},{"owner":{"reputation":12268,"user_id":5431791,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/cee864f829f7c8446b44df16c279706a?s=128&d=identicon&r=PG&f=1","display_name":"Cyttorak","link":"https://stackoverflow.com/users/5431791/cyttorak"},"is_accepted":false,"score":0,"last_activity_date":1611312817,"creation_date":1611312817,"answer_id":65843774,"question_id":38987,"content_license":"CC BY-SA 4.0","body":"<p>A hacky one-liner for 2.5+ :</p>\n<pre><code>&gt;&gt;&gt; a = dict(x=2, y=3)\n&gt;&gt;&gt; b = dict(y=4, z=5)\n&gt;&gt;&gt; c = 'No Effect' if a.update(b) else a\n&gt;&gt;&gt; c\n{'x': 2, 'y': 4, 'z': 5}\n</code></pre>\n<h2>Things to keep in mind:</h2>\n<ul>\n<li><code>dict.update</code> modifies the <code>dict</code> in-place, hence it evaluates to <code>None</code></li>\n<li>In expression <code>A if C else B</code>, <code>C</code> is evaluated first. See <a href=\"https://mail.python.org/pipermail/python-dev/2005-September/056846.html\" rel=\"nofollow noreferrer\">here</a></li>\n</ul>\n<p>So here, <code>a.update(b)</code> is evaluated first, <code>a</code> gets updated with <code>b</code> and operation results in <code>None</code>, thus the expression will always return the value given in the <code>else</code> condition, i.e. <code>a</code>. Since, <code>a</code> is already modified, it will return the new value of <code>a</code>, which is the updated dict.</p>\n<p><strong>IMPROVEMENT</strong></p>\n<p>This can be further improved, and it be made to work for even older versions (probably python 1.0 as well?):</p>\n<pre><code>&gt;&gt;&gt; c = a.update(b) or a\n</code></pre>\n<p>Here also, the first part produces <code>None</code>, hence it always returns the second part, but as the update operation is already done, it always returns the updated dict.</p>\n<p><strong>CRITIQUE</strong></p>\n<ul>\n<li>Both the solution <em><strong>modify the value of <code>a</code></strong></em>, so if one wants to keep both the input dictionaries unchanged, this is not a good idea.</li>\n</ul>\n<p><strong>IMPROVEMENT</strong></p>\n<p>If copy of <code>a</code> is needed, the second one can be slightly modified:</p>\n<pre><code>&gt;&gt;&gt; a = dict(x=2, y=3)\n&gt;&gt;&gt; b = dict(y=4, z=5)\n&gt;&gt;&gt; a, c = a.copy(), a.update(b) or a\n&gt;&gt;&gt; c\n{'x': 2, 'y': 4, 'z': 5}\n&gt;&gt;&gt; d = dict(m=10, n=11)\n&gt;&gt;&gt; a, c = a.copy(), a.update(b) or a.update(d) or a\n&gt;&gt;&gt; c\n{'x': 2, 'y': 4, 'z': 5, 'm': 10, 'n': 11}\n&gt;&gt;&gt; a\n{'x': 2, 'y': 4}\n</code></pre>\n<p><strong>CAVEATS</strong></p>\n<ul>\n<li>It (especially the first one) gets ugly and <em><strong>impractical for any number of dicts greater than 2</strong></em></li>\n<li>Furthermore, this is <em><strong>not explicit</strong></em>, which is <em><strong>un-pythonic</strong></em>.</li>\n</ul>\n<p>Even though these solutions are <em><strong>extremely fast</strong></em>, especially the <code>or</code> method which is probably faster than the new python 3.9 union operator (not entirely sure, further testing required, if anyone wants to add it afterwards, they are welcome), I would <em><strong>not recommend</strong></em> these methods due to the abovementioned reasons.\nAdded it for the sake of completeness.</p>\n"},{"owner":{"reputation":3002,"user_id":5601591,"user_type":"registered","accept_rate":100,"profile_image":"https://i.stack.imgur.com/dymec.png?s=128&g=1","display_name":"Jack Giffin","link":"https://stackoverflow.com/users/5601591/jack-giffin"},"is_accepted":false,"score":30,"last_activity_date":1609770913,"last_edit_date":1609770913,"creation_date":1515981357,"answer_id":48256045,"question_id":336859,"content_license":"CC BY-SA 4.0","body":"<h1>𝗧𝗵𝗲𝗿𝗲 𝗮𝗿𝗲 𝗳𝗼𝘂𝗿 𝗻𝗼𝘁𝗲𝘄𝗼𝗿𝘁𝗵𝘆 𝗰𝗼𝗺𝗽𝗮𝗿𝗶𝘀𝗼𝗻𝘀 𝗯𝗲𝘁𝘄𝗲𝗲𝗻 𝘁𝗵𝗲 𝘁𝘄𝗼 𝗱𝗶𝗳𝗳𝗲𝗿𝗲𝗻𝘁 𝗱𝗲𝗰𝗹𝗮𝗿𝗮𝘁𝗶𝗼𝗻𝘀 𝗼𝗳 𝗳𝘂𝗻𝗰𝘁𝗶𝗼𝗻𝘀 𝗮𝘀 𝗹𝗶𝘀𝘁𝗲𝗱 𝗯𝗲𝗹𝗼𝘄.</h1>\n<ol>\n<li>Availability (scope) of the function</li>\n</ol>\n<p>The following works because <code>function add()</code> is scoped to the nearest block:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>try {\n  console.log(\"Success: \", add(1, 1));\n} catch(e) {\n  console.log(\"ERROR: \" + e);\n}\n\nfunction add(a, b){\n  return a + b;\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>The following does not work because the variable is called before a function value is assigned to the variable <code>add</code>.</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>try {\n  console.log(\"Success: \", add(1, 1));\n} catch(e) {\n  console.log(\"ERROR: \" + e);\n}\n\nvar add=function(a, b){\n  return a + b;\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>The above code is identical in functionality to the code below. Note that explicitly assigning <code>add = undefined</code> is superfluous because simply doing <code>var add;</code> is the exact same as <code>var add=undefined</code>.</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var add = undefined;\n\ntry {\n  console.log(\"Success: \", add(1, 1));\n} catch(e) {\n  console.log(\"ERROR: \" + e);\n}\n\nadd = function(a, b){\n  return a + b;\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>The following does not work because <code>var add=</code> begins an expression and causes the following <code>function add()</code> to be an expression instead of a block. Named functions are only visible to themselves and their surrounding block. As <code>function add()</code> is an expression here, it has no surrounding block, so it is only visible to itself.</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>try {\n  console.log(\"Success: \", add(1, 1));\n} catch(e) {\n  console.log(\"ERROR: \" + e);\n}\n\nvar add=function add(a, b){\n  return a + b;\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<ol start=\"2\">\n<li><em>(function)</em>.name</li>\n</ol>\n<p>The name of a function <code>function thefuncname(){}</code> is <em>thefuncname</em> when it is declared this way.</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function foobar(a, b){}\n\nconsole.log(foobar.name);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var a = function foobar(){};\n\nconsole.log(a.name);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>Otherwise, if a function is declared as <code>function(){}</code>, the <em>function</em>.name is the first variable used to store the function.</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var a = function(){};\nvar b = (function(){ return function(){} });\n\nconsole.log(a.name);\nconsole.log(b.name);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>If there are no variables set to the function, then the functions name is the empty string (<code>&quot;&quot;</code>).</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>console.log((function(){}).name === \"\");</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>Lastly, while the variable the function is assigned to initially sets the name, successive variables set to the function do not change the name.</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var a = function(){};\nvar b = a;\nvar c = b;\n\nconsole.log(a.name);\nconsole.log(b.name);\nconsole.log(c.name);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<ol start=\"3\">\n<li>Performance</li>\n</ol>\n<p>In Google's V8 and Firefox's Spidermonkey there might be a few microsecond JIST compilation difference, but ultimately the result is the exact same. To prove this, let's examine the efficiency of JSPerf at microbenchmarks by comparing the speed of two blank code snippets. The <a href=\"https://jsperf.com/microbenchmark-analysis/1\" rel=\"nofollow noreferrer\">JSPerf tests are found here</a>. And, the <a href=\"http://jsben.ch/Ov6eJ\" rel=\"nofollow noreferrer\">jsben.ch testsare  found here</a>. As you can see, there is a noticable difference when there should be none. If you are really a performance freak like me, then it might be more worth your while trying to reduce the number of variables and functions in the scope and especially eliminating polymorphism (such as using the same variable to store two different types).</p>\n<ol start=\"4\">\n<li>Variable Mutability</li>\n</ol>\n<p>When you use the <code>var</code> keyword to declare a variable, you can then reassign a different value to the variable like so.</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>(function(){\n    \"use strict\";\n    var foobar = function(){}; // initial value\n    try {\n        foobar = \"Hello World!\"; // new value\n        console.log(\"[no error]\");\n    } catch(error) {\n        console.log(\"ERROR: \" + error.message);\n    }\n    console.log(foobar, window.foobar);\n})();</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>However, when we use the const-statement, the variable reference becomes immutable. This means that we cannot assign a new value to the variable. Please note, however, that this does not make the contents of the variable immutable: if you do <code>const arr = []</code>, then you can still do <code>arr[10] = &quot;example&quot;</code>. Only doing something like <code>arr = &quot;new value&quot;</code> or <code>arr = []</code> would throw an error as seen below.</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>(function(){\n    \"use strict\";\n    const foobar = function(){}; // initial value\n    try {\n        foobar = \"Hello World!\"; // new value\n        console.log(\"[no error]\");\n    } catch(error) {\n        console.log(\"ERROR: \" + error.message);\n    }\n    console.log(foobar, window.foobar);\n})();</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>Interestingly, if we declare the variable as <code>function funcName(){}</code>, then the immutability of the variable is the same as declaring it with <code>var</code>.</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>(function(){\n    \"use strict\";\n    function foobar(){}; // initial value\n    try {\n        foobar = \"Hello World!\"; // new value\n        console.log(\"[no error]\");\n    } catch(error) {\n        console.log(\"ERROR: \" + error.message);\n    }\n    console.log(foobar, window.foobar);\n})();</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<h2>𝗪𝗵𝗮𝘁 𝗜𝘀 𝗧𝗵𝗲 &quot;𝗡𝗲𝗮𝗿𝗲𝘀𝘁 𝗕𝗹𝗼𝗰𝗸&quot;</h2>\n<p>The &quot;nearest block&quot; is the nearest &quot;function,&quot; (including asynchronous functions, generator functions, and asynchronous generator functions). However, interestingly, a <code>function functionName() {}</code> behaves like a <code>var functionName = function() {}</code> when in a non-closure block to items outside said closure. Observe.</p>\n<ul>\n<li>Normal <code>var add=function(){}</code></li>\n</ul>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>try {\n  // typeof will simply return \"undefined\" if the variable does not exist\n  if (typeof add !== \"undefined\") {\n    add(1, 1); // just to prove it\n    console.log(\"Not a block\");\n  }else if(add===undefined){ // this throws an exception if add doesn't exist\n    console.log('Behaves like var add=function(a,b){return a+b}');\n  }\n} catch(e) {\n  console.log(\"Is a block\");\n}\nvar add=function(a, b){return a + b}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<ul>\n<li>Normal <code>function add(){}</code></li>\n</ul>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>try {\n  // typeof will simply return \"undefined\" if the variable does not exist\n  if (typeof add !== \"undefined\") {\n    add(1, 1); // just to prove it\n    console.log(\"Not a block\");\n  }else if(add===undefined){ // this throws an exception if add doesn't exist\n    console.log('Behaves like var add=function(a,b){return a+b}')\n  }\n} catch(e) {\n  console.log(\"Is a block\");\n}\nfunction add(a, b){\n  return a + b;\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<ul>\n<li>Function</li>\n</ul>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>try {\n  // typeof will simply return \"undefined\" if the variable does not exist\n  if (typeof add !== \"undefined\") {\n    add(1, 1); // just to prove it\n    console.log(\"Not a block\");\n  }else if(add===undefined){ // this throws an exception if add doesn't exist\n    console.log('Behaves like var add=function(a,b){return a+b}')\n  }\n} catch(e) {\n  console.log(\"Is a block\");\n}\n(function () {\n    function add(a, b){\n      return a + b;\n    }\n})();</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<ul>\n<li>Statement (such as <code>if</code>, <code>else</code>, <code>for</code>, <code>while</code>, <code>try</code>/<code>catch</code>/<code>finally</code>, <code>switch</code>, <code>do</code>/<code>while</code>, <code>with</code>)</li>\n</ul>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>try {\n  // typeof will simply return \"undefined\" if the variable does not exist\n  if (typeof add !== \"undefined\") {\n    add(1, 1); // just to prove it\n    console.log(\"Not a block\");\n  }else if(add===undefined){ // this throws an exception if add doesn't exist\n    console.log('Behaves like var add=function(a,b){return a+b}')\n  }\n} catch(e) {\n  console.log(\"Is a block\");\n}\n{\n    function add(a, b){\n      return a + b;\n    }\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<ul>\n<li>Arrow Function with <code>var add=function()</code></li>\n</ul>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>try {\n  // typeof will simply return \"undefined\" if the variable does not exist\n  if (typeof add !== \"undefined\") {\n    add(1, 1); // just to prove it\n    console.log(\"Not a block\");\n  }else if(add===undefined){ // this throws an exception if add doesn't exist\n    console.log('Behaves like var add=function(a,b){return a+b}')\n  }\n} catch(e) {\n  console.log(\"Is a block\");\n}\n(() =&gt; {\n    var add=function(a, b){\n      return a + b;\n    }\n})();</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<ul>\n<li>Arrow Function With <code>function add()</code></li>\n</ul>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>try {\n  // typeof will simply return \"undefined\" if the variable does not exist\n  if (typeof add !== \"undefined\") {\n    add(1, 1); // just to prove it\n    console.log(\"Not a block\");\n  }else if(add===undefined){ // this throws an exception if add doesn't exist\n    console.log('Behaves like var add=function(a,b){return a+b}')\n  }\n} catch(e) {\n  console.log(\"Is a block\");\n}\n(() =&gt; {\n    function add(a, b){\n      return a + b;\n    }\n})();</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"owner":{"reputation":8381,"user_id":4381487,"user_type":"registered","profile_image":"https://i.stack.imgur.com/YNB1x.jpg?s=128&g=1","display_name":"gilch","link":"https://stackoverflow.com/users/4381487/gilch"},"is_accepted":false,"score":18,"last_activity_date":1608922760,"last_edit_date":1608922760,"creation_date":1506049035,"answer_id":46356150,"question_id":38987,"content_license":"CC BY-SA 4.0","body":"<p>If you don't mind mutating <code>x</code>,</p>\n<pre><code>x.update(y) or x\n</code></pre>\n<p>Simple, readable, performant. You <em>know</em> <code>update()</code> always returns <code>None</code>, which is a false value. So the above expression will always evaluate to <code>x</code>, after updating it.</p>\n<p>Most mutating methods in the standard library (like <code>.update()</code>) return <code>None</code> by convention, so this kind of pattern will work on those too. However, if you're using a dict subclass or some other method that doesn't follow this convention, then <code>or</code> may return its left operand, which may not be what you want. Instead, you can use a tuple display and index, which works regardless of what the first element evaluates to (although it's not quite as pretty):</p>\n<pre><code>(x.update(y), x)[-1]\n</code></pre>\n<p>If you don't have <code>x</code> in a variable yet, you can use <code>lambda</code> to make a local without using an assignment statement. This amounts to using <code>lambda</code> as a <em>let expression</em>, which is a common technique in functional languages, but maybe unpythonic.</p>\n<pre><code>(lambda x: x.update(y) or x)({'a': 1, 'b': 2})\n</code></pre>\n<p>Although it's not that different from the following use of the new walrus operator (Python 3.8+ only):</p>\n<pre><code>(x := {'a': 1, 'b': 2}).update(y) or x\n</code></pre>\n<p>If you do want a copy, <a href=\"https://www.python.org/dev/peps/pep-0584/\" rel=\"nofollow noreferrer\">PEP 584</a> style <code>x | y</code> is the most Pythonic on 3.9+. If you must support older versions, <a href=\"https://www.python.org/dev/peps/pep-0448/\" rel=\"nofollow noreferrer\">PEP 448</a> style <code>{**x, **y}</code> is easiest for 3.5+. But if that's not available in your (even older) Python version, the <em>let</em> pattern works here too.</p>\n<pre><code>(lambda z: z.update(y) or z)(x.copy())\n</code></pre>\n<p>(That is, of course, nearly equivalent to <code>(z := x.copy()).update(y) or z</code>, but if your Python version is new enough for that, then the PEP 448 style will be available.)</p>\n"},{"owner":{"reputation":285679,"user_id":541136,"user_type":"moderator","accept_rate":96,"profile_image":"https://i.stack.imgur.com/wftMn.jpg?s=128&g=1","display_name":"Aaron Hall","link":"https://stackoverflow.com/users/541136/aaron-hall"},"is_accepted":true,"score":6962,"last_activity_date":1608299846,"last_edit_date":1608299846,"creation_date":1415657508,"answer_id":26853961,"question_id":38987,"content_license":"CC BY-SA 4.0","body":"<blockquote>\n<h2>How can I merge two Python dictionaries in a single expression?</h2>\n</blockquote>\n<p>For dictionaries <code>x</code> and <code>y</code>, <code>z</code> becomes a shallowly merged dictionary with values from <code>y</code> replacing those from <code>x</code>.</p>\n<ul>\n<li><p>In Python 3.9.0 or greater (released 17 October 2020): <a href=\"https://www.python.org/dev/peps/pep-0584/\" rel=\"noreferrer\">PEP-584</a>, <a href=\"https://bugs.python.org/issue36144\" rel=\"noreferrer\">discussed here</a>, was implemented and provides the simplest method:</p>\n<pre class=\"lang-py prettyprint-override\"><code>z = x | y          # NOTE: 3.9+ ONLY\n</code></pre>\n</li>\n<li><p>In Python 3.5 or greater:</p>\n<pre class=\"lang-py prettyprint-override\"><code>z = {**x, **y}\n</code></pre>\n</li>\n<li><p>In Python 2, (or 3.4 or lower) write a function:</p>\n<pre class=\"lang-py prettyprint-override\"><code>def merge_two_dicts(x, y):\n    z = x.copy()   # start with x's keys and values\n    z.update(y)    # modifies z with y's keys and values &amp; returns None\n    return z\n</code></pre>\n<p>and now:</p>\n<pre class=\"lang-py prettyprint-override\"><code>z = merge_two_dicts(x, y)\n</code></pre>\n</li>\n</ul>\n<h3>Explanation</h3>\n<p>Say you have two dictionaries and you want to merge them into a new dict without altering the original dictionaries:</p>\n<pre class=\"lang-py prettyprint-override\"><code>x = {'a': 1, 'b': 2}\ny = {'b': 3, 'c': 4}\n</code></pre>\n<p>The desired result is to get a new dictionary (<code>z</code>) with the values merged, and the second dictionary's values overwriting those from the first.</p>\n<pre class=\"lang-py prettyprint-override\"><code>&gt;&gt;&gt; z\n{'a': 1, 'b': 3, 'c': 4}\n</code></pre>\n<p>A new syntax for this, proposed in <a href=\"https://www.python.org/dev/peps/pep-0448\" rel=\"noreferrer\">PEP 448</a> and <a href=\"https://mail.python.org/pipermail/python-dev/2015-February/138564.html\" rel=\"noreferrer\">available as of Python 3.5</a>, is</p>\n<pre class=\"lang-py prettyprint-override\"><code>z = {**x, **y}\n</code></pre>\n<p>And it is indeed a single expression.</p>\n<p>Note that we can merge in with literal notation as well:</p>\n<pre class=\"lang-py prettyprint-override\"><code>z = {**x, 'foo': 1, 'bar': 2, **y}\n</code></pre>\n<p>and now:</p>\n<pre class=\"lang-py prettyprint-override\"><code>&gt;&gt;&gt; z\n{'a': 1, 'b': 3, 'foo': 1, 'bar': 2, 'c': 4}\n</code></pre>\n<p>It is now showing as implemented in the <a href=\"https://www.python.org/dev/peps/pep-0478/#features-for-3-5\" rel=\"noreferrer\">release schedule for 3.5, PEP 478</a>, and it has now made its way into <a href=\"https://docs.python.org/dev/whatsnew/3.5.html#pep-448-additional-unpacking-generalizations\" rel=\"noreferrer\">What's New in Python 3.5</a> document.</p>\n<p>However, since many organizations are still on Python 2, you may wish to do this in a backward-compatible way. The classically Pythonic way, available in Python 2 and Python 3.0-3.4, is to do this as a two-step process:</p>\n<pre class=\"lang-py prettyprint-override\"><code>z = x.copy()\nz.update(y) # which returns None since it mutates z\n</code></pre>\n<p>In both approaches, <code>y</code> will come second and its values will replace <code>x</code>'s values, thus <code>'b'</code> will point to <code>3</code> in our final result.</p>\n<h2>Not yet on Python 3.5, but want a <em>single expression</em></h2>\n<p>If you are not yet on Python 3.5 or need to write backward-compatible code, and you want this in a <em>single expression</em>, the most performant while the correct approach is to put it in a function:</p>\n<pre class=\"lang-py prettyprint-override\"><code>def merge_two_dicts(x, y):\n    &quot;&quot;&quot;Given two dictionaries, merge them into a new dict as a shallow copy.&quot;&quot;&quot;\n    z = x.copy()\n    z.update(y)\n    return z\n</code></pre>\n<p>and then you have a single expression:</p>\n<pre class=\"lang-py prettyprint-override\"><code>z = merge_two_dicts(x, y)\n</code></pre>\n<p>You can also make a function to merge an undefined number of dictionaries, from zero to a very large number:</p>\n<pre class=\"lang-py prettyprint-override\"><code>def merge_dicts(*dict_args):\n    &quot;&quot;&quot;\n    Given any number of dictionaries, shallow copy and merge into a new dict,\n    precedence goes to key-value pairs in latter dictionaries.\n    &quot;&quot;&quot;\n    result = {}\n    for dictionary in dict_args:\n        result.update(dictionary)\n    return result\n</code></pre>\n<p>This function will work in Python 2 and 3 for all dictionaries. e.g. given dictionaries <code>a</code> to <code>g</code>:</p>\n<pre class=\"lang-py prettyprint-override\"><code>z = merge_dicts(a, b, c, d, e, f, g) \n</code></pre>\n<p>and key-value pairs in <code>g</code> will take precedence over dictionaries <code>a</code> to <code>f</code>, and so on.</p>\n<h2>Critiques of Other Answers</h2>\n<p>Don't use what you see in the formerly accepted answer:</p>\n<pre class=\"lang-py prettyprint-override\"><code>z = dict(x.items() + y.items())\n</code></pre>\n<p>In Python 2, you create two lists in memory for each dict, create a third list in memory with length equal to the length of the first two put together, and then discard all three lists to create the dict. <strong>In Python 3, this will fail</strong> because you're adding two <code>dict_items</code> objects together, not two lists -</p>\n<pre class=\"lang-py prettyprint-override\"><code>&gt;&gt;&gt; c = dict(a.items() + b.items())\nTraceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\nTypeError: unsupported operand type(s) for +: 'dict_items' and 'dict_items'\n</code></pre>\n<p>and you would have to explicitly create them as lists, e.g. <code>z = dict(list(x.items()) + list(y.items()))</code>. This is a waste of resources and computation power.</p>\n<p>Similarly, taking the union of <code>items()</code> in Python 3 (<code>viewitems()</code> in Python 2.7) will also fail when values are unhashable objects (like lists, for example). Even if your values are hashable, <strong>since sets are semantically unordered, the behavior is undefined in regards to precedence. So don't do this:</strong></p>\n<pre class=\"lang-py prettyprint-override\"><code>&gt;&gt;&gt; c = dict(a.items() | b.items())\n</code></pre>\n<p>This example demonstrates what happens when values are unhashable:</p>\n<pre class=\"lang-py prettyprint-override\"><code>&gt;&gt;&gt; x = {'a': []}\n&gt;&gt;&gt; y = {'b': []}\n&gt;&gt;&gt; dict(x.items() | y.items())\nTraceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\nTypeError: unhashable type: 'list'\n</code></pre>\n<p>Here's an example where y should have precedence, but instead the value from x is retained due to the arbitrary order of sets:</p>\n<pre class=\"lang-py prettyprint-override\"><code>&gt;&gt;&gt; x = {'a': 2}\n&gt;&gt;&gt; y = {'a': 1}\n&gt;&gt;&gt; dict(x.items() | y.items())\n{'a': 2}\n</code></pre>\n<p>Another hack you should not use:</p>\n<pre class=\"lang-py prettyprint-override\"><code>z = dict(x, **y)\n</code></pre>\n<p>This uses the <code>dict</code> constructor and is very fast and memory-efficient (even slightly more-so than our two-step process) but unless you know precisely what is happening here (that is, the second dict is being passed as keyword arguments to the dict constructor), it's difficult to read, it's not the intended usage, and so it is not Pythonic.</p>\n<p>Here's an example of the usage being <a href=\"https://code.djangoproject.com/attachment/ticket/13357/django-pypy.2.diff\" rel=\"noreferrer\">remediated in django</a>.</p>\n<p>Dictionaries are intended to take hashable keys (e.g. frozensets or tuples), but <strong>this method fails in Python 3 when keys are not strings.</strong></p>\n<pre class=\"lang-py prettyprint-override\"><code>&gt;&gt;&gt; c = dict(a, **b)\nTraceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\nTypeError: keyword arguments must be strings\n</code></pre>\n<p>From the <a href=\"https://mail.python.org/pipermail/python-dev/2010-April/099459.html\" rel=\"noreferrer\">mailing list</a>, Guido van Rossum, the creator of the language, wrote:</p>\n<blockquote>\n<p>I am fine with\ndeclaring dict({}, **{1:3}) illegal, since after all it is abuse of\nthe ** mechanism.</p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p>Apparently dict(x, **y) is going around as &quot;cool hack&quot; for &quot;call\nx.update(y) and return x&quot;. Personally, I find it more despicable than\ncool.</p>\n</blockquote>\n<p>It is my understanding (as well as the understanding of the <a href=\"https://mail.python.org/pipermail/python-dev/2010-April/099485.html\" rel=\"noreferrer\">creator of the language</a>) that the intended usage for <code>dict(**y)</code> is for creating dictionaries for readability purposes, e.g.:</p>\n<pre class=\"lang-py prettyprint-override\"><code>dict(a=1, b=10, c=11)\n</code></pre>\n<p>instead of</p>\n<pre class=\"lang-py prettyprint-override\"><code>{'a': 1, 'b': 10, 'c': 11}\n</code></pre>\n<h2>Response to comments</h2>\n<blockquote>\n<p>Despite what Guido says, <code>dict(x, **y)</code> is in line with the dict specification, which btw. works for both Python 2 and 3. The fact that this only works for string keys is a direct consequence of how keyword parameters work and not a short-coming of dict. Nor is using the ** operator in this place an abuse of the mechanism, in fact, ** was designed precisely to pass dictionaries as keywords.</p>\n</blockquote>\n<p>Again, it doesn't work for 3 when keys are non-strings. The implicit calling contract is that namespaces take ordinary dictionaries, while users must only pass keyword arguments that are strings. All other callables enforced it. <code>dict</code> broke this consistency in Python 2:</p>\n<pre><code>&gt;&gt;&gt; foo(**{('a', 'b'): None})\nTraceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\nTypeError: foo() keywords must be strings\n&gt;&gt;&gt; dict(**{('a', 'b'): None})\n{('a', 'b'): None}\n</code></pre>\n<p>This inconsistency was bad given other implementations of Python (Pypy, Jython, IronPython). Thus it was fixed in Python 3, as this usage could be a breaking change.</p>\n<p>I submit to you that it is malicious incompetence to intentionally write code that only works in one version of a language or that only works given certain arbitrary constraints.</p>\n<p>More comments:</p>\n<blockquote>\n<p><code>dict(x.items() + y.items())</code> is still the most readable solution for Python 2. Readability counts.</p>\n</blockquote>\n<p>My response: <code>merge_two_dicts(x, y)</code> actually seems much clearer to me, if we're actually concerned about readability. And it is not forward compatible, as Python 2 is increasingly deprecated.</p>\n<blockquote>\n<p><code>{**x, **y}</code> does not seem to handle nested dictionaries. the contents of nested keys are simply overwritten, not merged [...] I ended up being burnt by these answers that do not merge recursively and I was surprised no one mentioned it. In my interpretation of the word &quot;merging&quot; these answers describe &quot;updating one dict with another&quot;, and not merging.</p>\n</blockquote>\n<p>Yes. I must refer you back to the question, which is asking for a <em>shallow</em> merge of <em><strong>two</strong></em> dictionaries, with the first's values being overwritten by the second's - in a single expression.</p>\n<p>Assuming two dictionaries of dictionaries, one might recursively merge them in a single function, but you should be careful not to modify the dictionaries from either source, and the surest way to avoid that is to make a copy when assigning values. As keys must be hashable and are usually therefore immutable, it is pointless to copy them:</p>\n<pre class=\"lang-py prettyprint-override\"><code>from copy import deepcopy\n\ndef dict_of_dicts_merge(x, y):\n    z = {}\n    overlapping_keys = x.keys() &amp; y.keys()\n    for key in overlapping_keys:\n        z[key] = dict_of_dicts_merge(x[key], y[key])\n    for key in x.keys() - overlapping_keys:\n        z[key] = deepcopy(x[key])\n    for key in y.keys() - overlapping_keys:\n        z[key] = deepcopy(y[key])\n    return z\n</code></pre>\n<p>Usage:</p>\n<pre class=\"lang-py prettyprint-override\"><code>&gt;&gt;&gt; x = {'a':{1:{}}, 'b': {2:{}}}\n&gt;&gt;&gt; y = {'b':{10:{}}, 'c': {11:{}}}\n&gt;&gt;&gt; dict_of_dicts_merge(x, y)\n{'b': {2: {}, 10: {}}, 'a': {1: {}}, 'c': {11: {}}}\n</code></pre>\n<p>Coming up with contingencies for other value types is far beyond the scope of this question, so I will point you at <a href=\"https://stackoverflow.com/a/24088493/541136\">my answer to the canonical question on a &quot;Dictionaries of dictionaries merge&quot;</a>.</p>\n<h2>Less Performant But Correct Ad-hocs</h2>\n<p>These approaches are less performant, but they will provide correct behavior.\nThey will be <em>much less</em> performant than <code>copy</code> and <code>update</code> or the new unpacking because they iterate through each key-value pair at a higher level of abstraction, but they <em>do</em> respect the order of precedence (latter dictionaries have precedence)</p>\n<p>You can also chain the dictionaries manually inside a <a href=\"https://www.python.org/dev/peps/pep-0274/\" rel=\"noreferrer\">dict comprehension</a>:</p>\n<pre class=\"lang-py prettyprint-override\"><code>{k: v for d in dicts for k, v in d.items()} # iteritems in Python 2.7\n</code></pre>\n<p>or in python 2.6 (and perhaps as early as 2.4 when generator expressions were introduced):</p>\n<pre class=\"lang-py prettyprint-override\"><code>dict((k, v) for d in dicts for k, v in d.items()) # iteritems in Python 2\n</code></pre>\n<p><code>itertools.chain</code> will chain the iterators over the key-value pairs in the correct order:</p>\n<pre class=\"lang-py prettyprint-override\"><code>from itertools import chain\nz = dict(chain(x.items(), y.items())) # iteritems in Python 2\n</code></pre>\n<h2>Performance Analysis</h2>\n<p>I'm only going to do the performance analysis of the usages known to behave correctly. (Self-contained so you can copy and paste yourself.)</p>\n<pre class=\"lang-py prettyprint-override\"><code>from timeit import repeat\nfrom itertools import chain\n\nx = dict.fromkeys('abcdefg')\ny = dict.fromkeys('efghijk')\n\ndef merge_two_dicts(x, y):\n    z = x.copy()\n    z.update(y)\n    return z\n\nmin(repeat(lambda: {**x, **y}))\nmin(repeat(lambda: merge_two_dicts(x, y)))\nmin(repeat(lambda: {k: v for d in (x, y) for k, v in d.items()}))\nmin(repeat(lambda: dict(chain(x.items(), y.items()))))\nmin(repeat(lambda: dict(item for d in (x, y) for item in d.items())))\n</code></pre>\n<p>In Python 3.8.1, NixOS:</p>\n<pre class=\"lang-py prettyprint-override\"><code>&gt;&gt;&gt; min(repeat(lambda: {**x, **y}))\n1.0804965235292912\n&gt;&gt;&gt; min(repeat(lambda: merge_two_dicts(x, y)))\n1.636518670246005\n&gt;&gt;&gt; min(repeat(lambda: {k: v for d in (x, y) for k, v in d.items()}))\n3.1779992282390594\n&gt;&gt;&gt; min(repeat(lambda: dict(chain(x.items(), y.items()))))\n2.740647904574871\n&gt;&gt;&gt; min(repeat(lambda: dict(item for d in (x, y) for item in d.items())))\n4.266070580109954\n</code></pre>\n<pre class=\"lang-sh prettyprint-override\"><code>$ uname -a\nLinux nixos 4.19.113 #1-NixOS SMP Wed Mar 25 07:06:15 UTC 2020 x86_64 GNU/Linux\n</code></pre>\n<h2>Resources on Dictionaries</h2>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/327311/how-are-pythons-built-in-dictionaries-implemented/44509302#44509302\">My explanation of Python's <strong>dictionary implementation</strong>, updated for 3.6.</a></li>\n<li><a href=\"https://stackoverflow.com/questions/1024847/add-new-keys-to-a-dictionary/27208535#27208535\">Answer on how to add new keys to a dictionary</a></li>\n<li><a href=\"https://stackoverflow.com/questions/209840/map-two-lists-into-a-dictionary-in-python/33737067#33737067\">Mapping two lists into a dictionary</a></li>\n<li>The official Python <a href=\"https://docs.python.org/3/tutorial/datastructures.html#dictionaries\" rel=\"noreferrer\">docs on dictionaries</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=66P5FMkWoVU\" rel=\"noreferrer\">The Dictionary Even Mightier</a> - talk by Brandon Rhodes at Pycon 2017</li>\n<li><a href=\"https://www.youtube.com/watch?v=npw4s1QTmPg\" rel=\"noreferrer\">Modern Python Dictionaries, A Confluence of Great Ideas</a> - talk by Raymond Hettinger at Pycon 2017</li>\n</ul>\n"},{"owner":{"reputation":2449,"user_id":3058581,"user_type":"registered","profile_image":"https://i.stack.imgur.com/R18py.jpg?s=128&g=1","display_name":"Adam111p","link":"https://stackoverflow.com/users/3058581/adam111p"},"is_accepted":false,"score":0,"last_activity_date":1608215607,"creation_date":1608215607,"answer_id":65342690,"question_id":27509,"content_license":"CC BY-SA 4.0","body":"<p><strong>Version for the use of dynamic variables</strong>\nDid you know?</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var boo ='lala';\n\nfunction check(){\n  if(this['foo']){\n        console.log('foo is here');}\n  else{\n        console.log('have no foo');\n      }\n\n  if(this['boo']){\n        console.log('boo is here');}\n  else{\n        console.log('have no boo');\n      }\n}\n\ncheck();</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"owner":{"reputation":180349,"user_id":424499,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/bc2071afd499daef001e75e14d7f9cce?s=128&d=identicon&r=PG","display_name":"Raymond Hettinger","link":"https://stackoverflow.com/users/424499/raymond-hettinger"},"is_accepted":false,"score":153,"last_activity_date":1607668991,"last_edit_date":1607668991,"creation_date":1367118938,"answer_id":16259217,"question_id":38987,"content_license":"CC BY-SA 4.0","body":"<p><strong>In Python 3.0 and later</strong>, you can use <a href=\"http://docs.python.org/3/library/collections.html#collections.ChainMap\" rel=\"noreferrer\"><code>collections.ChainMap</code></a> which groups multiple dicts or other mappings together to create a single, updateable view:</p>\n<pre><code>&gt;&gt;&gt; from collections import ChainMap\n&gt;&gt;&gt; x = {'a':1, 'b': 2}\n&gt;&gt;&gt; y = {'b':10, 'c': 11}\n&gt;&gt;&gt; z = dict(ChainMap({}, y, x))\n&gt;&gt;&gt; for k, v in z.items():\n        print(k, '--&gt;', v)\n    \na --&gt; 1\nb --&gt; 10\nc --&gt; 11\n</code></pre>\n<p><strong>Update for Python 3.5 and later</strong>: You can use <a href=\"https://www.python.org/dev/peps/pep-0448/\" rel=\"noreferrer\">PEP 448</a> extended dictionary packing and unpacking.  This is fast and easy:</p>\n<pre><code>&gt;&gt;&gt; x = {'a':1, 'b': 2}\n&gt;&gt;&gt; y = {'b':10, 'c': 11}\n&gt;&gt;&gt; {**x, **y}\n{'a': 1, 'b': 10, 'c': 11}\n</code></pre>\n<p><strong>Update for Python 3.9 and later</strong>:  You can use the <a href=\"https://www.python.org/dev/peps/pep-0584/\" rel=\"noreferrer\">PEP 584</a> union operator:</p>\n<pre><code>&gt;&gt;&gt; x = {'a':1, 'b': 2}\n&gt;&gt;&gt; y = {'b':10, 'c': 11}\n&gt;&gt;&gt; x | y\n{'a': 1, 'b': 10, 'c': 11}\n</code></pre>\n"},{"owner":{"reputation":4242,"user_id":2111778,"user_type":"registered","accept_rate":80,"profile_image":"https://i.stack.imgur.com/vP0ug.jpg?s=128&g=1","display_name":"xjcl","link":"https://stackoverflow.com/users/2111778/xjcl"},"is_accepted":false,"score":14,"last_activity_date":1606686579,"last_edit_date":1606686579,"creation_date":1591046592,"answer_id":62141222,"question_id":38987,"content_license":"CC BY-SA 4.0","body":"<p><strong><a href=\"https://www.python.org/dev/peps/pep-0584/#specification\" rel=\"noreferrer\">New</a> in Python 3.9:</strong> Use the union operator (<code>|</code>) to merge <code>dict</code>s similar to <code>set</code>s:</p>\n<pre><code>&gt;&gt;&gt; d = {'a': 1, 'b': 2}\n&gt;&gt;&gt; e = {'a': 9, 'c': 3}\n&gt;&gt;&gt; d | e\n{'a': 9, 'b': 2, 'c': 3}\n</code></pre>\n<p>For matching keys, the <strong>right <code>dict</code> takes precedence</strong>.</p>\n<p>This also works for <code>|=</code> to modify a <code>dict</code> in-place:</p>\n<pre><code>&gt;&gt;&gt; e |= d    # e = e | d\n&gt;&gt;&gt; e\n{'a': 1, 'c': 3, 'b': 2}\n</code></pre>\n"},{"owner":{"reputation":33831,"user_id":2900,"user_type":"registered","accept_rate":42,"profile_image":"https://www.gravatar.com/avatar/f5dc647e1f30b6127527da3dbfdaba73?s=128&d=identicon&r=PG","display_name":"Thomas Vander Stichele","link":"https://stackoverflow.com/users/2900/thomas-vander-stichele"},"is_accepted":false,"score":1680,"last_activity_date":1604092089,"last_edit_date":1604092089,"creation_date":1220341812,"answer_id":38990,"question_id":38987,"content_license":"CC BY-SA 4.0","body":"<p>In your case, what you can do is:</p>\n<pre class=\"lang-py prettyprint-override\"><code>z = dict(list(x.items()) + list(y.items()))\n</code></pre>\n<p>This will, as you want it, put the final dict in <code>z</code>, and make the value for key <code>b</code> be properly overridden by the second (<code>y</code>) dict's value:</p>\n<pre class=\"lang-py prettyprint-override\"><code>&gt;&gt;&gt; x = {'a':1, 'b': 2}\n&gt;&gt;&gt; y = {'b':10, 'c': 11}\n&gt;&gt;&gt; z = dict(list(x.items()) + list(y.items()))\n&gt;&gt;&gt; z\n{'a': 1, 'c': 11, 'b': 10}\n\n</code></pre>\n<p>If you use Python 2, you can even remove the <code>list()</code> calls. To create z:</p>\n<pre class=\"lang-py prettyprint-override\"><code>&gt;&gt;&gt; z = dict(x.items() + y.items())\n&gt;&gt;&gt; z\n{'a': 1, 'c': 11, 'b': 10}\n</code></pre>\n<p>If you use Python version 3.9.0a4 or greater, then you can directly use:</p>\n<pre class=\"lang-py prettyprint-override\"><code>x = {'a':1, 'b': 2}\ny = {'b':10, 'c': 11}\nz = x | y\nprint(z)\n</code></pre>\n<pre class=\"lang-py prettyprint-override\"><code>{'a': 1, 'c': 11, 'b': 10}\n</code></pre>\n"},{"owner":{"reputation":495,"user_id":2377431,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/28d5950911da4acf1f54df4c69133a81?s=128&d=identicon&r=PG","display_name":"disooqi","link":"https://stackoverflow.com/users/2377431/disooqi"},"is_accepted":false,"score":7,"last_activity_date":1602915715,"last_edit_date":1602915715,"creation_date":1601997833,"answer_id":64228920,"question_id":38987,"content_license":"CC BY-SA 4.0","body":"<p><strong>In Python 3.9</strong></p>\n<p>Based on <a href=\"https://www.python.org/dev/peps/pep-0584/\" rel=\"nofollow noreferrer\">PEP 584</a>, the new version of Python introduces two new operators for dictionaries: union (|) and in-place union (|=). You can use | to merge two dictionaries, while |= will update a dictionary in place:</p>\n<pre><code>&gt;&gt;&gt; pycon = {2016: &quot;Portland&quot;, 2018: &quot;Cleveland&quot;}\n&gt;&gt;&gt; europython = {2017: &quot;Rimini&quot;, 2018: &quot;Edinburgh&quot;, 2019: &quot;Basel&quot;}\n\n&gt;&gt;&gt; pycon | europython\n{2016: 'Portland', 2018: 'Edinburgh', 2017: 'Rimini', 2019: 'Basel'}\n\n&gt;&gt;&gt; pycon |= europython\n&gt;&gt;&gt; pycon\n{2016: 'Portland', 2018: 'Edinburgh', 2017: 'Rimini', 2019: 'Basel'}\n\n</code></pre>\n<p>If d1 and d2 are two dictionaries, then <code>d1 | d2</code> does the same as <code>{**d1, **d2}</code>. The | operator is used for calculating the <a href=\"https://docs.python.org/3/library/stdtypes.html#frozenset.union\" rel=\"nofollow noreferrer\">union of sets</a>, so the notation may already be familiar to you.</p>\n<p>One advantage of using <code>|</code> is that it works on different dictionary-like types and keeps the type through the merge:</p>\n<pre><code>&gt;&gt;&gt; from collections import defaultdict\n&gt;&gt;&gt; europe = defaultdict(lambda: &quot;&quot;, {&quot;Norway&quot;: &quot;Oslo&quot;, &quot;Spain&quot;: &quot;Madrid&quot;})\n&gt;&gt;&gt; africa = defaultdict(lambda: &quot;&quot;, {&quot;Egypt&quot;: &quot;Cairo&quot;, &quot;Zimbabwe&quot;: &quot;Harare&quot;})\n\n&gt;&gt;&gt; europe | africa\ndefaultdict(&lt;function &lt;lambda&gt; at 0x7f0cb42a6700&gt;,\n  {'Norway': 'Oslo', 'Spain': 'Madrid', 'Egypt': 'Cairo', 'Zimbabwe': 'Harare'})\n\n&gt;&gt;&gt; {**europe, **africa}\n{'Norway': 'Oslo', 'Spain': 'Madrid', 'Egypt': 'Cairo', 'Zimbabwe': 'Harare'}\n</code></pre>\n<p>You can use a defaultdict when you want to effectively handle missing keys. Note that <code>|</code> preserves the defaultdict, while <code>{**europe, **africa}</code> does not.</p>\n<p>There are some similarities between how <code>|</code> works for dictionaries and how <code>+</code> works for lists. In fact, the <code>+</code> operator was <a href=\"https://www.python.org/dev/peps/pep-0584/#use-the-addition-operator\" rel=\"nofollow noreferrer\">originally proposed</a> to merge dictionaries as well. This correspondence becomes even more evident when you look at the in-place operator.</p>\n<p>The basic use of <code>|=</code> is to update a dictionary in place, similar to <code>.update()</code>:</p>\n<pre><code>&gt;&gt;&gt; libraries = {\n...     &quot;collections&quot;: &quot;Container datatypes&quot;,\n...     &quot;math&quot;: &quot;Mathematical functions&quot;,\n... }\n&gt;&gt;&gt; libraries |= {&quot;zoneinfo&quot;: &quot;IANA time zone support&quot;}\n&gt;&gt;&gt; libraries\n{'collections': 'Container datatypes', 'math': 'Mathematical functions',\n 'zoneinfo': 'IANA time zone support'}\n</code></pre>\n<p>When you merge dictionaries with <code>|</code>, both dictionaries need to be of a proper dictionary type. On the other hand, the in-place operator (<code>|=</code>) is happy to work with any dictionary-like data structure:</p>\n<pre><code>&gt;&gt;&gt; libraries |= [(&quot;graphlib&quot;, &quot;Functionality for graph-like structures&quot;)]\n&gt;&gt;&gt; libraries\n{'collections': 'Container datatypes', 'math': 'Mathematical functions',\n 'zoneinfo': 'IANA time zone support',\n 'graphlib': 'Functionality for graph-like structures'}\n</code></pre>\n"},{"owner":{"reputation":548,"user_id":13850443,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/ebaac0678cca7eb479476a6beb0695f0?s=128&d=identicon&r=PG&f=1","display_name":"Issei","link":"https://stackoverflow.com/users/13850443/issei"},"is_accepted":false,"score":0,"last_activity_date":1602459721,"creation_date":1602459721,"answer_id":64310054,"question_id":38987,"content_license":"CC BY-SA 4.0","body":"<p>Instead, if, say, you want to combine the two dictionaries by adding the values, we could rely on the Collections module (I am not sure whether this existed 12 years ago - when the question was first asked):</p>\n<pre><code>from collections import Counter\nx = Counter({'a': 1, 'b': 2})\ny = Counter({'b': 10, 'c': 11})\n</code></pre>\n<p>Then <code>x + y</code> equates to</p>\n<pre><code>Counter({'a': 1, 'b': 12, 'c': 11})\n</code></pre>\n"},{"owner":{"reputation":195,"user_id":1542451,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/f16bd441a221ba96832205b1cdaf0b55?s=128&d=identicon&r=PG","display_name":"Mayank Jain","link":"https://stackoverflow.com/users/1542451/mayank-jain"},"is_accepted":false,"score":15,"last_activity_date":1602225099,"last_edit_date":1602225099,"creation_date":1465215240,"answer_id":37657170,"question_id":12694530,"content_license":"CC BY-SA 4.0","body":"<p>Ecma script 5 (ES5) which all browser support and precompiled. ES6/ES2015 and ES/2016 came this year with lots of changes so to pop up these changes there is something in between which should take cares about so TypeScript.</p>\n<p>• TypeScript is Types -&gt; Means we have to define datatype of each property and methods. If you know C# then Typescript is easy to understand.</p>\n<p>• Big advantage of TypeScript is we identify Type related issues early before going to production. This allows unit tests to fail if there is any type mismatch.</p>\n"},{"owner":{"reputation":290,"user_id":8526684,"user_type":"registered","profile_image":"https://graph.facebook.com/1261901863921287/picture?type=large","display_name":"Biplov Kumar","link":"https://stackoverflow.com/users/8526684/biplov-kumar"},"is_accepted":false,"score":2,"last_activity_date":1602222054,"last_edit_date":1602222054,"creation_date":1602221693,"answer_id":64274450,"question_id":950087,"content_license":"CC BY-SA 4.0","body":"<pre><code>Step 1: Declare the function in another class.\n\n    export const myreport = (value) =&gt; {\n    color = value.color;\n    name = value.name;\n    \n    var mytext = name + &quot; | &quot; + color;\n    return mytext;\n    }\n\nStep 2:- Import that function which is needed to be used.\n\n    import {myreport} from '../../Test'\n\nStep 3:- Use that function.\n\nlet val = { color: &quot;red&quot;, name: &quot;error&quot; }\nvar resultText = myreport(val)\nconsole.log(&quot;resultText :- &quot;, resultText)\n</code></pre>\n"},{"owner":{"reputation":15880,"user_id":210945,"user_type":"registered","accept_rate":70,"profile_image":"https://www.gravatar.com/avatar/20cb8dcc17ad4334c0f8cb1ddc28bcd0?s=128&d=identicon&r=PG","display_name":"naught101","link":"https://stackoverflow.com/users/210945/naught101"},"is_accepted":false,"score":0,"last_activity_date":1602106307,"last_edit_date":1602106307,"creation_date":1601965469,"answer_id":64220381,"question_id":38987,"content_license":"CC BY-SA 4.0","body":"<p><a href=\"https://docs.python.org/3.9/whatsnew/3.9.html\" rel=\"nofollow noreferrer\">As of Python 3.9</a>, <a href=\"https://www.python.org/dev/peps/pep-0584/\" rel=\"nofollow noreferrer\">PEP584</a>, there is a new method available for this:</p>\n<pre><code>z = x.union(y)\n</code></pre>\n<p>now works as you desire, without modifying either x or y.</p>\n<p>y values will override x values with the same key.</p>\n<p>You can also now use the <a href=\"https://docs.python.org/3/library/stdtypes.html#dict.values\" rel=\"nofollow noreferrer\">union merge syntax</a> for this:</p>\n<pre><code>z = x | y\n</code></pre>\n<p>which gives the same result.</p>\n"},{"owner":{"reputation":1327,"user_id":1971662,"user_type":"registered","accept_rate":69,"profile_image":"https://i.stack.imgur.com/FzZQl.jpg?s=128&g=1","display_name":"Isaac Gregson","link":"https://stackoverflow.com/users/1971662/isaac-gregson"},"is_accepted":false,"score":17,"last_activity_date":1601919242,"last_edit_date":1601919242,"creation_date":1394772051,"answer_id":22396258,"question_id":950087,"content_license":"CC BY-SA 4.0","body":"<p>The <code>@import</code> syntax for achieving CSS-like JavaScript importing is possible using a tool such as Mixture via their special <code>.mix</code> file type (see <a href=\"http://docs.mixture.io/preprocessors#mix\" rel=\"nofollow noreferrer\">here</a>). I assume the application does this via one of above-mentioned methods.</p>\n<p>From the Mixture documentation on <code>.mix</code> files:</p>\n<blockquote>\n<p>Mix files are simply .js or .css files with .mix. in the file name. A\nmix file simply     extends the functionality of a normal style or\nscript file and allows you to import and combine.</p>\n</blockquote>\n<p>Here's an example <code>.mix</code> file that combines multiple <code>.js</code> files into one:</p>\n<pre><code>// scripts-global.mix.js\n// Plugins - Global\n\n@import &quot;global-plugins/headroom.js&quot;;\n@import &quot;global-plugins/retina-1.1.0.js&quot;;\n@import &quot;global-plugins/isotope.js&quot;;\n@import &quot;global-plugins/jquery.fitvids.js&quot;;\n</code></pre>\n<p>Mixture outputs this as <code>scripts-global.js</code> and also as a minified version (<code>scripts-global.min.js</code>).</p>\n<p>Note: I'm not in any way affiliated with Mixture, other than using it as a front-end development tool. I came across this question upon seeing a <code>.mix</code> JavaScript file in action (in one of the Mixture boilerplates) and being a bit confused by it (&quot;you can do this?&quot; I thought to myself). Then I realized that it was an application-specific file type (somewhat disappointing, agreed). Nevertheless, figured the knowledge might be helpful for others.</p>\n<p><strong>Note:</strong> Mixture was discontinued on 2016/07/26 (after being open sourced on 2015/04/12).</p>\n"},{"owner":{"reputation":1260,"user_id":5889158,"user_type":"registered","accept_rate":57,"profile_image":"https://i.stack.imgur.com/ESYP2.png?s=128&g=1","display_name":"Shakespear","link":"https://stackoverflow.com/users/5889158/shakespear"},"is_accepted":false,"score":4,"last_activity_date":1601881998,"last_edit_date":1601881998,"creation_date":1545065935,"answer_id":53819807,"question_id":336859,"content_license":"CC BY-SA 4.0","body":"<p>The first one is an <strong>Anonymous Function Expression</strong>:</p>\n<pre><code>var functionOne = function() {\n  // some code\n};\n</code></pre>\n<p>While the second one is a <strong>Function Declaration</strong>:</p>\n<pre><code>function functionTwo () {\n  // some code\n}\n</code></pre>\n<p>The main clear difference between both is the function name since <strong>Anonymous Functions</strong> have no name to call.</p>\n<h1>Named Functions Vs. Anonymous Functions</h1>\n<p>The anonymous function is quick and easy to type, and many libraries and tools tend to encourage this idiomatic style of code. However, anonymous functions have some <strong>drawbacks</strong>:</p>\n<ul>\n<li><p><strong>Readability:</strong> anonymous functions omit a name which could cause less readable code.</p>\n</li>\n<li><p><strong>Debugging:</strong> anonymous functions have no name in stack traces, which can make debugging more difficult.</p>\n</li>\n<li><p><strong>Self-Reference:</strong> what if the function needs to refer to itself, for recursion for example.</p>\n</li>\n</ul>\n<p><strong>Naming Function Expression:</strong></p>\n<p>Providing a name for your function expression quite effectively addresses all these drawbacks, and has no tangible downsides. The best practice is to always name your function expressions:</p>\n<pre><code>setTimeout(function timeHandler() { // &lt;-- look, a name here!\n  console.log(&quot;I've waited 1 second&quot;);\n}, 1000);\n</code></pre>\n<p><strong>Naming IIFEs (Immediate Invoked Function Expression)</strong>:</p>\n<pre><code>(function IIFE(str) { // &lt;-- look, always name IIFEs!\n  console.log(str); // &quot;Hello!&quot;\n})('Hello!');\n</code></pre>\n<p>For functions assigned to a variable, naming the function, in this case, is not very common and may cause confusion, in this case, the arrow function may be a better choice.</p>\n"},{"owner":{"reputation":9478,"user_id":1804013,"user_type":"registered","accept_rate":93,"profile_image":"https://www.gravatar.com/avatar/8610355e1a0c6d9e42619ed9ac4636af?s=128&d=identicon&r=PG","display_name":"tfont","link":"https://stackoverflow.com/users/1804013/tfont"},"is_accepted":false,"score":10,"last_activity_date":1601758518,"last_edit_date":1601758518,"creation_date":1423358384,"answer_id":28389515,"question_id":950087,"content_license":"CC BY-SA 4.0","body":"<p>Keep it nice, short, simple, and maintainable! :]</p>\n<pre><code>// Third-party plugins / script (don't forget the full path is necessary)\nvar FULL_PATH = '', s =\n[\n    FULL_PATH + 'plugins/script.js'      // Script example\n    FULL_PATH + 'plugins/jquery.1.2.js', // jQuery Library\n    FULL_PATH + 'plugins/crypto-js/hmac-sha1.js',      // CryptoJS\n    FULL_PATH + 'plugins/crypto-js/enc-base64-min.js'  // CryptoJS\n];\n\nfunction load(url)\n{\n    var ajax = new XMLHttpRequest();\n    ajax.open('GET', url, false);\n    ajax.onreadystatechange = function ()\n    {\n        var script = ajax.response || ajax.responseText;\n        if (ajax.readyState === 4)\n        {\n            switch(ajax.status)\n            {\n                case 200:\n                    eval.apply( window, [script] );\n                    console.log(&quot;library loaded: &quot;, url);\n                    break;\n                default:\n                    console.log(&quot;ERROR: library not loaded: &quot;, url);\n            }\n        }\n    };\n    ajax.send(null);\n}\n\n// Initialize a single load\nload('plugins/script.js');\n\n// Initialize a full load of scripts\nif (s.length &gt; 0)\n{\n    for (i = 0; i &lt; s.length; i++)\n    {\n        load(s[i]);\n    }\n}\n</code></pre>\n<p>This code is simply a short functional example that <em>could</em> require additional feature functionality for full support on any (or given) platform.</p>\n"},{"owner":{"reputation":1513,"user_id":2889843,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/6f2f6816f81c8f30b8b344732f80a6e3?s=128&d=identicon&r=PG","display_name":"Venu immadi","link":"https://stackoverflow.com/users/2889843/venu-immadi"},"is_accepted":false,"score":46,"last_activity_date":1601758062,"last_edit_date":1601758062,"creation_date":1384334297,"answer_id":19949820,"question_id":950087,"content_license":"CC BY-SA 4.0","body":"<p>If you want it in pure JavaScript, you can use <code>document.write</code>.</p>\n<pre><code>document.write('&lt;script src=&quot;myscript.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;');\n</code></pre>\n<p>If you use the jQuery library, you can use the <code>$.getScript</code> method.</p>\n<pre><code>$.getScript(&quot;another_script.js&quot;);\n</code></pre>\n"},{"owner":{"reputation":10595,"user_id":1548301,"user_type":"registered","accept_rate":100,"profile_image":"https://www.gravatar.com/avatar/f3c49d1a6e7a0b8cbcac8287ab25b173?s=128&d=identicon&r=PG","display_name":"Vicky Gonsalves","link":"https://stackoverflow.com/users/1548301/vicky-gonsalves"},"is_accepted":false,"score":10,"last_activity_date":1601758034,"last_edit_date":1601758034,"creation_date":1382758976,"answer_id":19602549,"question_id":950087,"content_license":"CC BY-SA 4.0","body":"<p>This script will add a JavaScript file to the top of any other <code>&lt;script&gt;</code> tag:</p>\n<pre><code>(function () {\n    var li = document.createElement('script'); \n    li.type = 'text/javascript'; \n    li.src = &quot;http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js&quot;; \n    li.async = true; \n    var s = document.getElementsByTagName('script')[0]; \n    s.parentNode.insertBefore(li, s);\n})();\n</code></pre>\n"},{"owner":{"reputation":2449,"user_id":3058581,"user_type":"registered","profile_image":"https://i.stack.imgur.com/R18py.jpg?s=128&g=1","display_name":"Adam111p","link":"https://stackoverflow.com/users/3058581/adam111p"},"is_accepted":false,"score":1,"last_activity_date":1601757000,"last_edit_date":1601757000,"creation_date":1524512118,"answer_id":49988691,"question_id":950087,"content_license":"CC BY-SA 4.0","body":"<p>Please note that we usually use <strong>static scripts</strong>. So we want to be taken from the <strong>cache</strong> as much as possible.</p>\n<p>This saves network traffic and speeds up landing.</p>\n<p><em>Usage</em></p>\n<pre><code>$.cachedScript( &quot;ajax/test.js&quot; ).done(function( script, textStatus ) {\n  console.log( textStatus );\n});\n</code></pre>\n<p>The <strong>cache: true</strong> option has been added to the Ajax method.</p>\n"},{"owner":{"reputation":7676,"user_id":4058484,"user_type":"registered","accept_rate":86,"profile_image":"https://i.stack.imgur.com/uQgA5.png?s=128&g=1","display_name":"Chetabahana","link":"https://stackoverflow.com/users/4058484/chetabahana"},"is_accepted":false,"score":1,"last_activity_date":1601756912,"last_edit_date":1601756912,"creation_date":1526385469,"answer_id":50349607,"question_id":950087,"content_license":"CC BY-SA 4.0","body":"<p>If you find there are two or more scripts occupying the same function when they are called, and we cannot be include them at the same time, we need to do it <strong>dynamically</strong> by user selection.</p>\n<p>Including another file in jQuery using <code>$.getScript</code> works since the script <em><a href=\"https://api.jquery.com/jquery.getscript/#caching-requests\" rel=\"nofollow noreferrer\">will not be cached by default</a></em>. So we are safe to call other scripts. The calls can be arranged like this:</p>\n<p><em><strong>HTML</strong></em></p>\n<pre><code>&lt;select class=&quot;choice&quot;&gt;\n  &lt;option value=&quot;script1&quot; selected&gt;Script-1&lt;/option&gt;\n  &lt;option value=&quot;script2&quot;&gt;Script-2&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>\n<p><em><strong>JavaScript</strong></em></p>\n<pre><code>  $(&quot;.choice&quot;).change(on_change);\n\n    var url = &quot;https://example.com&quot;;\n    $.url1 = url + &quot;/script1.js&quot;;\n    $.url2 = url + &quot;/script2.js&quot;;\n\n  function on_change() {\n    if ($(&quot;.choice&quot;).val()==&quot;script1&quot;) {\n        script1();\n    } else {\n         script2();\n    }\n\n    // script1\n    function script1() {\n      $.getScript($.url1, function( data, textStatus, jqxhr ) {\n          // Execute here\n      });\n    }\n\n    // script2\n    function script2() {\n       $.getScript($.url2, function( data, textStatus, jqxhr ) {\n          // Execute here\n      });\n    }\n</code></pre>\n"},{"owner":{"reputation":82464,"user_id":5423108,"user_type":"registered","profile_image":"https://i.stack.imgur.com/WtfBG.png?s=128&g=1","display_name":"Alireza","link":"https://stackoverflow.com/users/5423108/alireza"},"is_accepted":false,"score":8,"last_activity_date":1601756673,"last_edit_date":1601756673,"creation_date":1526992881,"answer_id":50468005,"question_id":950087,"content_license":"CC BY-SA 4.0","body":"<p><strong>Yes,</strong> there is...</p>\n<p>Keep reading. In <strong>ES6</strong>, we can <code>export</code> and <code>import</code> part or whole JavaScript file into another one...</p>\n<p>But wait, <strong>ES6</strong> is not supported in all the browsers, so you need to transpile it using <code>babel.js</code> for example...</p>\n<p>So you create a class like below:</p>\n<pre><code>class Person {\n  constructor(name) {\n    this.name = name;\n  }\n\n  build() {\n    return new Person(this);\n  }\n}\n\nmodule.exports = Person;\n</code></pre>\n<p>In <em>another</em> JavaScript file, do the import like:</p>\n<pre><code>import { Person } from 'Person';\n</code></pre>\n<p>You also can require the file like:</p>\n<pre><code>const Person = require('./Person');\n</code></pre>\n<p>If you are using an older JavaScript version you can use <strong>requirejs</strong>:</p>\n<pre><code>requirejs([&quot;helper/util&quot;], function(util) {\n    // This function is called when scripts/helper/util.js is loaded.\n    // If util.js calls define(), then this function is not fired until\n    // util's dependencies have loaded, and the util argument will hold\n    // the module value for &quot;helper/util&quot;.\n});\n</code></pre>\n<p>If you want to stick to older version of stuff, like <strong>jQuery</strong>, you can also use something like <strong>getScript</strong>:</p>\n<pre><code>jQuery.getScript('./another-script.js', function() {\n    // Call back after another-script loaded\n});\n</code></pre>\n<p>Last, but not the least, don't forget you can do the traditional way of putting a script together using the <code>&lt;script&gt;</code> tag...</p>\n<pre><code>&lt;script src=&quot;./first-script.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;./second-script.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;./third-script.js&quot;&gt;&lt;/script&gt;\n</code></pre>\n<p>There are also the <strong>async</strong> and <strong>defer</strong> attributes which I should mention here...</p>\n<blockquote>\n<p><strong>Note:</strong> There are several ways an external script can be executed:</p>\n<ul> <li>If async is present: The script is executed asynchronously\nwith the rest of the page (the script will be executed while the page\ncontinues the parsing)</li>   <li>If async is not present and defer is\npresent: The script is executed when the page has finished\nparsing</li>   <li>If neither async or defer is present: The script is\nfetched and executed immediately, before the browser  continues\nparsing the page</li> </ul>\n</blockquote>\n"},{"owner":{"reputation":8555,"user_id":1602301,"user_type":"registered","accept_rate":20,"profile_image":"https://i.stack.imgur.com/pLKV0.jpg?s=128&g=1","display_name":"chickens","link":"https://stackoverflow.com/users/1602301/chickens"},"is_accepted":false,"score":9,"last_activity_date":1601756320,"last_edit_date":1601756320,"creation_date":1529734526,"answer_id":50998496,"question_id":950087,"content_license":"CC BY-SA 4.0","body":"<p><strong>For Node.js only, this worked for me the best!</strong></p>\n<p>I've tried most solutions here, but none helped me about just being able to load another file without changing scope. Finally I used this. Which preserves the scope and everything. It is as good as your code is in that point.</p>\n<pre><code>const fs = require('fs');\neval(fs.readFileSync('file.js') + '');\n</code></pre>\n"},{"owner":{"reputation":18647,"user_id":8059459,"user_type":"registered","accept_rate":90,"profile_image":"https://www.gravatar.com/avatar/9f0fc0fd607fc44a4597cacb7f034ba6?s=128&d=identicon&r=PG&f=1","display_name":"Willem van der Veen","link":"https://stackoverflow.com/users/8059459/willem-van-der-veen"},"is_accepted":false,"score":11,"last_activity_date":1601756242,"last_edit_date":1601756242,"creation_date":1533921090,"answer_id":51791186,"question_id":950087,"content_license":"CC BY-SA 4.0","body":"<p>There are several ways to implement modules in JavaScript. Here are the two most popular ones:</p>\n<h2><strong>ES6 Modules</strong></h2>\n<p>Browsers do not support this moduling system yet, so in order for you to use this syntax you must use a bundler like <a href=\"https://en.wikipedia.org/wiki/Webpack\" rel=\"nofollow noreferrer\">Webpack</a>. Using a bundler is better anyway because this can combine all of your different files into a single (or a couple of related) files. This will serve the files from the server to the client faster because each HTTP request has some associated overhead accompanied with it. Thus by reducing the overall HTTP request we improve the performance. Here is an example of ES6 modules:</p>\n<pre><code>// main.js file\n\nexport function add (a, b) {\n  return a + b;\n}\n\nexport default function multiply (a, b) {\n  return a * b;\n}\n\n\n// test.js file\n\nimport {add}, multiply from './main';   // For named exports between curly braces {export1, export2}\n                                        // For default exports without {}\n\nconsole.log(multiply(2, 2));  // logs 4\n\nconsole.log(add(1, 2));  // logs 3\n</code></pre>\n<h2><strong>CommonJS</strong> (used in Node.js)</h2>\n<p>This moduling system is used in Node.js. You basically add your exports to an object which is called <code>module.exports</code>. You then can access this object via a <code>require('modulePath')</code>. Important here is to realize that these modules are being cached, so if you <code>require()</code> a certain module twice it will return the already created module.</p>\n<pre><code>// main.js file\n\nfunction add (a, b) {\n  return a + b;\n}\n\nmodule.exports = add;  // Here we add our 'add' function to the exports object\n\n\n// test.js file\n\nconst add = require('./main');\n\nconsole.log(add(1,2));  // logs 3\n</code></pre>\n"},{"owner":{"reputation":529,"user_id":5175935,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/b6eeb21a3cc902cb5ae1386ae7ccefac?s=128&d=identicon&r=PG&f=1","display_name":"Andrej","link":"https://stackoverflow.com/users/5175935/andrej"},"is_accepted":false,"score":1,"last_activity_date":1601755913,"last_edit_date":1601755913,"creation_date":1559359298,"answer_id":56403620,"question_id":950087,"content_license":"CC BY-SA 4.0","body":"<p>You can use my <a href=\"https://github.com/anhr/loadScriptNodeJS\" rel=\"nofollow noreferrer\">loadScript ES module</a> for loading of the JavaScript files.</p>\n<h2>Usage:</h2>\n<p>In your head tag, include the following code:</p>\n<pre><code>&lt;script src=&quot;https://raw.githack.com/anhr/loadScriptNodeJS/master/build/loadScript.js&quot;&gt;&lt;/script&gt;\n</code></pre>\n<p>or</p>\n<pre><code>&lt;script src=&quot;https://raw.githack.com/anhr/loadScriptNodeJS/master/build/loadScript.min.js&quot;&gt;&lt;/script&gt;\n</code></pre>\n<p>Now you can use window.loadScript for loading of your JavaScript files.</p>\n<h3>loadScript.async( src, [options] )</h3>\n<p>Asynchronous load JavaScript file.</p>\n<p><code>src</code>: URL of an external script file or array of the script file names.</p>\n<p><code>options</code>: the following options are available</p>\n<pre><code>onload: function () The onload event occurs when a script has been loaded. Default is undefined.\n\nonerror: function ( str, e ) The onerror event occurs when an error has been occurred. The default is undefined.\n\n    str: error details\n\n    e: event\n\nappendTo: The node to which the new script will be append. The default is the head node.\n</code></pre>\n<p>For example</p>\n<pre><code>loadScript.async( &quot;JavaScript.js&quot;,\n        {\n            onload: function () {\n\n                var str = 'file has been loaded successfully';\n                console.log( str );\n            },\n            onerror: function ( str, e ) {\n\n                console.error( str );\n            },\n        } );\n</code></pre>\n<p><a href=\"https://raw.githack.com/anhr/loadScriptNodeJS/master/index.html\" rel=\"nofollow noreferrer\">Example of usage</a></p>\n"},{"owner":{"reputation":919,"user_id":1088058,"user_type":"registered","profile_image":"https://i.stack.imgur.com/11Xr9.jpg?s=128&g=1","display_name":"Kamil Dąbrowski","link":"https://stackoverflow.com/users/1088058/kamil-d%c4%85browski"},"is_accepted":false,"score":2,"last_activity_date":1601755647,"last_edit_date":1601755647,"creation_date":1562168629,"answer_id":56873772,"question_id":950087,"content_license":"CC BY-SA 4.0","body":"<p>A little extension to the library from <a href=\"https://stackoverflow.com/questions/950087/how-do-i-include-a-javascript-file-in-another-javascript-file/31282622#31282622\">Dan Dascalescu's answer </a> taken from the Facebook idea.</p>\n<pre><code>(function() {\nvar __ = {};\nthis._ = function(name, callback) {\n    if(__[name]==undefined) {\n        __[name] = true;\n        var firstScript = document.getElementsByTagName('script')[0],\n          js = document.createElement('script');\n          js.src =  name;\n          js.onload = callback;\n          firstScript.parentNode.insertBefore(js, firstScript);\n    }\n}\n})();\n\n(new _('https://cdnjs.cloudflare.com/ajax/libs/Snowstorm/20131208/snowstorm-min.js', function() {\n snowStorm.snowColor = '#99ccff';\n}));\n</code></pre>\n"},{"owner":{"reputation":51213,"user_id":860099,"user_type":"registered","accept_rate":72,"profile_image":"https://i.stack.imgur.com/125k3.jpg?s=128&g=1","display_name":"Kamil Kiełczewski","link":"https://stackoverflow.com/users/860099/kamil-kie%c5%82czewski"},"is_accepted":false,"score":11,"last_activity_date":1601755573,"last_edit_date":1601755573,"creation_date":1562775129,"answer_id":56974750,"question_id":950087,"content_license":"CC BY-SA 4.0","body":"<h1>ES6 Modules</h1>\n<p><em>Yes</em>, use type=&quot;module&quot; in a script tag (<a href=\"https://caniuse.com/#search=type%3D%22module%22\" rel=\"nofollow noreferrer\">support</a>):</p>\n<pre><code>&lt;script type=&quot;module&quot; src=&quot;script.js&quot;&gt;&lt;/script&gt;\n</code></pre>\n<p>And in a <code>script.js</code> file include another file like this:</p>\n<pre><code>import { hello } from './module.js';\n...\n// alert(hello());\n</code></pre>\n<p>In 'module.js' you must <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export\" rel=\"nofollow noreferrer\">export the function/class</a> that you will import:</p>\n<pre><code>export function hello() {\n    return &quot;Hello World&quot;;\n}\n</code></pre>\n<p>A working <a href=\"http://plnkr.co/edit/ln6J7wfdsJPUNzaEi3u6\" rel=\"nofollow noreferrer\">example is here</a>.</p>\n"},{"owner":{"reputation":544,"user_id":10177977,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/cf188e08a450371c5a16b079a6bf451f?s=128&d=identicon&r=PG&f=1","display_name":"Hmerman6006","link":"https://stackoverflow.com/users/10177977/hmerman6006"},"is_accepted":false,"score":0,"last_activity_date":1601754886,"last_edit_date":1601754886,"creation_date":1587147610,"answer_id":61278138,"question_id":950087,"content_license":"CC BY-SA 4.0","body":"<p>I did not see an answer whereby you create an object of all functions and variables in a file and then make that object an argument to refer to it in another file.</p>\n<p>E.g., you have files called 'jsMod.js', 'jsView' and 'jsContr.js':</p>\n<pre class=\"lang-js prettyprint-override\"><code>\n    //jsMod.js file\n    JSMODOBJ = {};\n    JSMODOBJ.valueAddition = function(/* element value 1 */ val1,\n                                          /* element value 2 */ val2) {\n        return val1 + val2;\n    }\n\n</code></pre>\n<pre class=\"lang-js prettyprint-override\"><code>\n    //jsView.js file\n    JSVIEWOBJ = {};\n    JSVIEWOBJ.elementColour = function(/* element id to change colour */ id,\n                                          /* css colour classname */ col) {\n        document.getElementById(id).className = col;\n    }\n\n</code></pre>\n<pre class=\"lang-js prettyprint-override\"><code>\n    //jsContr.js file\n    JSCONTROBJ = {};\n    var jsMod = JSMODOBJ;\n    var jsView = JSVIEWOBJ;\n\n    JSCONTROBJ.changeColourByValue = function (val1, val2, id, clss) {\n        if (jsMod.valueAddition(val1,val2) !== 0) {\n            jsView.elementColour(id, clss);\n        }\n    }\n\n</code></pre>\n<p>Then you can set the .js files dynamically by echoeing the <code>scripts</code> into your .html or .php file:</p>\n<pre class=\"lang-php prettyprint-override\"><code>&lt;?php\n    echo &quot;&lt;script src = './js/dleafView.js'&gt;&lt;/script&gt;\n        &lt;script src = './js/dleafModule.js'&gt;&lt;/script&gt;\n        &lt;script src = './js/dleafContr.js'&gt;&lt;/script&gt;&quot;;\n?&gt;\n</code></pre>\n<p>Then just call the control function within a <code>&lt;script type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</code> tag.  Of course this will take a lot of time in the beginning to set up, but it saves you time in the long run.</p>\n<p>I use this in a slightly different way, but this way also work.</p>\n"},{"owner":{"reputation":1822,"user_id":998008,"user_type":"registered","profile_image":"https://i.stack.imgur.com/Tedl0.jpg?s=128&g=1","display_name":"Dmitry Sheiko","link":"https://stackoverflow.com/users/998008/dmitry-sheiko"},"is_accepted":false,"score":18,"last_activity_date":1601754425,"last_edit_date":1601754425,"creation_date":1500563702,"answer_id":45218814,"question_id":950087,"content_license":"CC BY-SA 4.0","body":"<p>In a modern language with the check if script has already been loaded, it would be:</p>\n<pre><code>function loadJs( url ){\n  return new Promise(( resolve, reject ) =&gt; {\n    if (document.querySelector( `head &gt; script[ src = &quot;${url}&quot; ]`) !== null ){\n        console.warn( `script already loaded: ${url}` );\n        resolve();\n    }\n    const script = document.createElement( &quot;script&quot; );\n    script.src = url;\n    script.onload = resolve;\n    script.onerror = function( reason ){\n        // This can be useful for your error-handling code\n        reason.message = `error trying to load script ${url}`;\n        reject( reason );\n    };\n    document.head.appendChild( script );\n  });\n}\n</code></pre>\n<p>Usage (async/await):</p>\n<pre><code>try { await loadJs(&quot;https://.../script.js&quot;); }\ncatch(error) { console.log(error); }\n</code></pre>\n<p>or</p>\n<pre><code>await loadJs( &quot;https://.../script.js&quot; ).catch( err =&gt; {} );\n</code></pre>\n<p>Usage (Promise):</p>\n<pre><code>loadJs( &quot;https://.../script.js&quot; ).then( res =&gt; {} ).catch( err =&gt; {} );\n</code></pre>\n"},{"owner":{"reputation":3762,"user_id":408556,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/869402f85dcbabcef3da1ee61b88a45a?s=128&d=identicon&r=PG","display_name":"reubano","link":"https://stackoverflow.com/users/408556/reubano"},"is_accepted":false,"score":29,"last_activity_date":1601408706,"last_edit_date":1601408706,"creation_date":1438700098,"answer_id":31812635,"question_id":38987,"content_license":"CC BY-SA 4.0","body":"<p>Simple solution using itertools that preserves order (latter dicts have precedence)</p>\n<pre><code># py2\nfrom itertools import chain, imap\nmerge = lambda *args: dict(chain.from_iterable(imap(dict.iteritems, args)))\n\n# py3\nfrom itertools import chain\nmerge = lambda *args: dict(chain.from_iterable(map(dict.items, args)))\n</code></pre>\n<p>And it's usage:</p>\n<pre><code>&gt;&gt;&gt; x = {'a':1, 'b': 2}\n&gt;&gt;&gt; y = {'b':10, 'c': 11}\n&gt;&gt;&gt; merge(x, y)\n{'a': 1, 'b': 10, 'c': 11}\n\n&gt;&gt;&gt; z = {'c': 3, 'd': 4}\n&gt;&gt;&gt; merge(x, y, z)\n{'a': 1, 'b': 10, 'c': 3, 'd': 4}\n</code></pre>\n"},{"owner":{"reputation":1557,"user_id":3946527,"user_type":"registered","profile_image":"https://graph.facebook.com/100002110695309/picture?type=large","display_name":"Hanzla Habib","link":"https://stackoverflow.com/users/3946527/hanzla-habib"},"is_accepted":false,"score":2,"last_activity_date":1601402977,"creation_date":1601402977,"answer_id":64125263,"question_id":27509,"content_license":"CC BY-SA 4.0","body":"<p>In recent JavaScript release there is new chaining operator introduced, which is most probably best way to check if property exists else it will give you undefined</p>\n<p>see example below</p>\n<pre><code>  const adventurer = {\n  name: 'Alice',\n  cat: {\n    name: 'Dinah'\n  }\n};\n\nconst dogName = adventurer.dog?.name;\nconsole.log(dogName);\n// expected output: undefined\n\nconsole.log(adventurer.someNonExistentMethod?.());\n// expected output: undefined\n</code></pre>\n<p>We can replace this old syntax</p>\n<pre><code>if (response &amp;&amp; response.data &amp;&amp; response.data.someData &amp;&amp; response.data.someData.someMoreData) {}\n</code></pre>\n<p>with this neater syntax</p>\n<pre><code>if( response?.data?.someData?.someMoreData) {}\n</code></pre>\n<p>This syntax is not supported in IE, Opera, safari &amp; samsund android</p>\n<p>for more detail you can check this URL</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining\" rel=\"nofollow noreferrer\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining</a></p>\n"},{"owner":{"reputation":18379,"user_id":1860591,"user_type":"registered","accept_rate":73,"profile_image":"https://i.stack.imgur.com/AWtf9.jpg?s=128&g=1","display_name":"Lodewijk Bogaards","link":"https://stackoverflow.com/users/1860591/lodewijk-bogaards"},"is_accepted":false,"score":1094,"last_activity_date":1600970055,"last_edit_date":1600970055,"creation_date":1453929805,"answer_id":35048303,"question_id":12694530,"content_license":"CC BY-SA 4.0","body":"<h1>TypeScript's relation to JavaScript</h1>\n<blockquote>\n<p>TypeScript is a typed superset of JavaScript that compiles to plain\nJavaScript - <a href=\"https://www.typescriptlang.org\" rel=\"noreferrer\">typescriptlang.org</a>.</p>\n</blockquote>\n<p>JavaScript is a programming language that is developed by <a href=\"https://tc39.es\" rel=\"noreferrer\">EMCA's Technical Committee 39</a>, which is a group of people composed of many different stakeholders. TC39 is a committee hosted by <a href=\"https://www.ecma-international.org\" rel=\"noreferrer\">ECMA</a>: an internal standards organization. JavaScript has many different implementations by many different vendors (e.g. Google, Microsoft, Oracle, etc.). The goal of JavaScript is to be the lingua franca of the web.</p>\n<p>TypeScript is a superset of the JavaScript language that has a single open-source compiler and is developed mainly by a single vendor: Microsoft. The goal of TypeScript is to help catch mistakes early through a type system and to make  JavaScript development more efficient.</p>\n<p>Essentially TypeScript achieves its goals in three ways:</p>\n<ol>\n<li><p><strong>Support for modern JavaScript features</strong> - The JavaScript language (not the runtime) is standardized through the <a href=\"https://en.wikipedia.org/wiki/ECMAScript\" rel=\"noreferrer\">ECMAScript</a> standards. Not all browsers and JavaScript runtimes support all features of all ECMAScript standards (see this <a href=\"https://kangax.github.io/compat-table/es6/\" rel=\"noreferrer\">overview</a>). TypeScript allows for the use of many of the latest ECMAScript features and translates them to older ECMAScript targets of your choosing (see the list of <a href=\"https://www.typescriptlang.org/docs/handbook/compiler-options.html\" rel=\"noreferrer\">compile targets</a> under the <code>--target</code> compiler option). This means that you can safely use new features, like modules, lambda functions, classes, the spread operator and destructuring, while remaining backwards compatible with older browsers and JavaScript runtimes.</p>\n</li>\n<li><p><strong>Advanced type system</strong> - The type support is not part of the ECMAScript standard and will likely never be due to the interpreted nature instead of compiled nature of JavaScript. The type system of TypeScript is incredibly rich and includes: interfaces, enums, hybrid types, generics, union/intersection types, access modifiers and much more. The <a href=\"https://www.typescriptlang.org\" rel=\"noreferrer\">official website</a> of TypeScript gives an overview of these features. Typescript's type system is on-par with most other typed languages and in some cases arguably more powerful.</p>\n</li>\n<li><p><strong>Developer tooling support</strong> - TypeScript's compiler can run as a background process to support both incremental compilation and IDE integration such that you can more easily navigate, identify problems, inspect possibilities and refactor your codebase.</p>\n</li>\n</ol>\n<h1>TypeScript's relation to other JavaScript targeting languages</h1>\n<p>TypeScript has a unique philosophy compared to other languages that compile to JavaScript. JavaScript code is valid TypeScript code; TypeScript is a superset of JavaScript. You can almost rename your <code>.js</code> files to <code>.ts</code> files and start using TypeScript (see &quot;JavaScript interoperability&quot; below). TypeScript files are compiled to readable JavaScript, so that migration back is possible and understanding the compiled TypeScript is not hard at all. TypeScript builds on the successes of JavaScript while improving on its weaknesses.</p>\n<p>On the one hand, you have future proof tools that take modern ECMAScript standards and compile it down to older JavaScript versions with Babel being the most popular one. On the other hand, you have languages that may totally differ from JavaScript which target JavaScript, like CoffeeScript, Clojure, Dart, Elm, Haxe, Scala.js, and a whole host more (see this <a href=\"https://github.com/jashkenas/coffeescript/wiki/List-of-languages-that-compile-to-JS\" rel=\"noreferrer\">list</a>). These languages, though they might be better than where JavaScript's future might ever lead, run a greater risk of not finding enough adoption for their futures to be guaranteed. You might also have more trouble finding experienced developers for some of these languages, though the ones you will find can often be more enthusiastic. Interop with JavaScript can also be a bit more involved, since they are farther removed from what JavaScript actually is.</p>\n<p>TypeScript sits in between these two extremes, thus balancing the risk. TypeScript is not a risky choice by any standard. It takes very little effort to get used to if you are familiar with JavaScript, since it is not a completely different language, has excellent JavaScript interoperability support and it has seen a lot of adoption recently.</p>\n<h1>Optionally static typing and type inference</h1>\n<p>JavaScript is dynamically typed. This means JavaScript does not know what type a variable is until it is actually instantiated at run-time. This also means that it may be too late. TypeScript adds type support to JavaScript and catches type errors during compilation to JavaScript. Bugs that are caused by false assumptions of some variable being of a certain type can be completely eradicated if you play your cards right (how strict you type your code or if you type your code at all is up to you).</p>\n<p>TypeScript makes typing a bit easier and a lot less explicit by the usage of type inference. For example: <code>var x = &quot;hello&quot;</code> in TypeScript is the same as <code>var x : string = &quot;hello&quot;</code>. The type is simply inferred from its use. Even it you don't explicitly type the types, they are still there to save you from doing something which otherwise would result in a run-time error.</p>\n<p>TypeScript is optionally typed by default. For example <code>function divideByTwo(x) { return  x / 2 }</code> is a valid function in TypeScript which can be called with <em>any</em> kind of parameter, even though calling it with a string will obviously result in a <em>runtime</em> error. Just like you are used to in JavaScript. This works, because when no type was explicitly assigned and the type could not be inferred, like in the divideByTwo example, TypeScript will implicitly assign the type <code>any</code>. This means the divideByTwo function's type signature automatically becomes <code>function divideByTwo(x : any) : any</code>.  There is a compiler flag to disallow this behavior: <code>--noImplicitAny</code>. Enabling this flag gives you a greater degree of safety, but also means you will have to do more typing.</p>\n<p>Types have a cost associated with them. First of all, there is a learning curve, and second of all, of course, it will cost you a bit more time to set up a codebase using proper strict typing too. In my experience, these costs are totally worth it on any serious codebase you are sharing with others. <a href=\"https://cs.uwaterloo.ca/%7Em2nagapp/courses/CS846/1171/papers/ray_fse14.pdf\" rel=\"noreferrer\">A Large Scale Study of Programming Languages and Code Quality in Github</a> suggests that <em>&quot;statically typed languages, in general, are less defect prone than the dynamic types, and that strong typing is better than weak typing in the same regard&quot;.</em></p>\n<p>It is interesting to note that this very same paper finds that TypeScript is less error-prone than JavaScript:</p>\n<blockquote>\n<p>For those with positive coefficients we can expect that the language\nis associated with, ceteris paribus, a greater number of defect fixes.\nThese languages include C, C++, <em>JavaScript</em>, Objective-C, Php, and\nPython. The languages Clojure, Haskell, Ruby, Scala, and <em>TypeScript</em>,\nall have negative coefficients implying that these languages are less\nlikely than the average to result in defect fixing commits.</p>\n</blockquote>\n<h1>Enhanced IDE support</h1>\n<p>The development experience with TypeScript is a great improvement over JavaScript. The IDE is informed in real-time by the TypeScript compiler on its rich type information. This gives a couple of major advantages. For example, with TypeScript, you can safely do refactorings like renames across your entire codebase. Through code completion, you can get inline help on whatever functions a library might offer. No more need to remember them or look them up in online references. Compilation errors are reported directly in the IDE with a red squiggly line while you are busy coding. All in all, this allows for a significant gain in productivity compared to working with JavaScript. One can spend more time coding and less time debugging.</p>\n<p>There is a wide range of IDEs that have excellent support for TypeScript, like Visual Studio Code, WebStorm, Atom and Sublime.</p>\n<h1>Strict null checks</h1>\n<p>Runtime errors of the form <code>cannot read property 'x' of undefined</code> or <code>undefined is not a function</code> are very commonly caused by bugs in JavaScript code. Out of the box TypeScript already reduces the probability of these kinds of errors occurring, since one cannot use a variable that is not known to the TypeScript compiler (with the exception of properties of <code>any</code> typed variables). It is still possible though to mistakenly utilize a variable that is set to <code>undefined</code>. However, with the 2.0 version of TypeScript you can eliminate these kinds of errors all together through the usage of non-nullable types. This works as follows:</p>\n<p>With strict null checks enabled (<code>--strictNullChecks</code> compiler flag) the TypeScript compiler will not allow <code>undefined</code> to be assigned to a variable unless you explicitly declare it to be of nullable type. For example, <code>let x : number = undefined</code> will result in a compile error. This fits perfectly with type theory since <code>undefined</code> is not a number. One can define <code>x</code> to be a sum type of <code>number</code> and <code>undefined</code> to correct this: <code>let x : number | undefined = undefined</code>.</p>\n<p>Once a type is known to be nullable, meaning it is of a type that can also be of the value <code>null</code> or <code>undefined</code>, the TypeScript compiler can determine through control flow based type analysis whether or not your code can safely use a variable or not. In other words when you check a variable is <code>undefined</code> through for example an <code>if</code> statement the TypeScript compiler will infer that the type in that branch of your code's control flow is not anymore nullable and therefore can safely be used. Here is a simple example:</p>\n<pre><code>let x: number | undefined;\nif (x !== undefined) x += 1; // this line will compile, because x is checked.\nx += 1; // this line will fail compilation, because x might be undefined.\n</code></pre>\n<p>During the build, 2016 conference co-designer of TypeScript Anders Hejlsberg gave a detailed explanation and demonstration of this feature: <a href=\"https://channel9.msdn.com/Events/Build/2016/B881\" rel=\"noreferrer\">video</a> (from 44:30 to 56:30).</p>\n<h1>Compilation</h1>\n<p>To use TypeScript you need a build process to compile to JavaScript code. The build process generally takes only a couple of seconds depending of course on the size of your project. The TypeScript compiler supports incremental compilation (<code>--watch</code> compiler flag) so that all subsequent changes can be compiled at greater speed.</p>\n<p>The TypeScript compiler can inline source map information in the generated .js files or create separate .map files. Source map information can be used by debugging utilities like the Chrome DevTools and other IDE's to relate the lines in the JavaScript to the ones that generated them in the TypeScript. This makes it possible for you to set breakpoints and inspect variables during runtime directly on your TypeScript code. Source map information works pretty well, it was around long before TypeScript, but debugging TypeScript is generally not as great as when using JavaScript directly. Take the  <code>this</code> keyword for example. Due to the changed semantics of the <code>this</code> keyword around closures since ES2015, <code>this</code> may actually exists during runtime as a variable called <code>_this</code> (see <a href=\"https://stackoverflow.com/questions/30056593/visual-studio-shows-wrong-value-for-this-in-typescript/30070859#30070859\">this answer</a>). This may confuse you during debugging but generally is not a problem if you know about it or inspect the JavaScript code. It should be noted that Babel suffers the exact same kind of issue.</p>\n<p>There are a few other tricks the TypeScript compiler can do, like generating intercepting code based on <a href=\"https://stackoverflow.com/q/29775830/1860591\">decorators</a>, generating module loading code for different module systems and parsing <a href=\"https://github.com/Microsoft/TypeScript/wiki/JSX\" rel=\"noreferrer\">JSX</a>. However, you will likely require a build tool besides the Typescript compiler. For example, if you want to compress your code you will have to add other tools to your build process to do so.</p>\n<p>There are TypeScript compilation plugins available for <a href=\"https://github.com/TypeStrong/ts-loader\" rel=\"noreferrer\">Webpack</a>, <a href=\"https://www.npmjs.com/package/gulp-typescript\" rel=\"noreferrer\">Gulp</a>, <a href=\"https://www.npmjs.com/package/grunt-typescript\" rel=\"noreferrer\">Grunt</a> and pretty much any other JavaScript build tool out there. The TypeScript documentation has a section on <a href=\"https://www.typescriptlang.org/docs/handbook/integrating-with-build-tools.html\" rel=\"noreferrer\">integrating with build tools</a> covering them all. A <a href=\"https://www.npmjs.com/package/tslint\" rel=\"noreferrer\">linter</a> is also available in case you would like even more build time checking. There are also a great number of seed projects out there that will get you started with TypeScript in combination with a bunch of other technologies like Angular 2, React, Ember, SystemJS, Webpack, Gulp, etc.</p>\n<h1>JavaScript interoperability</h1>\n<p>Since TypeScript is so closely related to JavaScript it has great interoperability capabilities, but some extra work is required to work with JavaScript libraries in TypeScript. <a href=\"https://www.typescriptlang.org/docs/handbook/namespaces.html\" rel=\"noreferrer\">TypeScript definitions</a> are needed so that the TypeScript compiler understands that function calls like <code>_.groupBy</code> or <code>angular.copy</code> or <code>$.fadeOut</code> are not in fact illegal statements. The definitions for these functions are placed in <code>.d.ts</code> files.</p>\n<p>The simplest form a definition can take is to allow an identifier to be used in any way. For example, when using <a href=\"https://lodash.com/\" rel=\"noreferrer\">Lodash</a>, a single line definition file <code>declare var _ : any</code> will allow you to call any function you want on <code>_</code>, but then, of course, you are also still able to make mistakes: <code>_.foobar()</code> would be a legal TypeScript call, but is, of course, an illegal call at run-time. If you want proper type support and code completion your definition file needs to to be more exact (see <a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/lodash\" rel=\"noreferrer\">lodash definitions</a> for an example).</p>\n<p><a href=\"https://www.npmjs.com/\" rel=\"noreferrer\">Npm modules</a> that come pre-packaged with their own type definitions are automatically understood by the TypeScript compiler (see <a href=\"https://www.typescriptlang.org/docs/handbook/typings-for-npm-packages.html\" rel=\"noreferrer\">documentation</a>). For pretty much any other semi-popular JavaScript library that does not include its own definitions somebody out there has already made type definitions available through another npm module. These modules are prefixed with &quot;@types/&quot; and come from a Github repository called <a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped#how-do-i-get-them\" rel=\"noreferrer\">DefinitelyTyped</a>.</p>\n<p>There is one caveat: the type definitions must match the version of the library you are using at run-time. If they do not, TypeScript might disallow you from calling a function or dereferencing a variable that exists or allow you to call a function or dereference a variable that does not exist, simply because the types do not match the run-time at compile-time. So make sure you load the right version of the type definitions for the right version of the library you are using.</p>\n<p>To be honest, there is a slight hassle to this and it may be one of the reasons you do not choose TypeScript, but instead go for something like Babel that does not suffer from having to get type definitions at all. On the other hand, if you know what you are doing you can easily overcome any kind of issues caused by incorrect or missing definition files.</p>\n<h1>Converting from JavaScript to TypeScript</h1>\n<p>Any <code>.js</code> file can be renamed to a <code>.ts</code> file and ran through the TypeScript compiler to get syntactically the same JavaScript code as an output (if it was syntactically correct in the first place). Even when the TypeScript compiler gets compilation errors it will still produce a <code>.js</code> file. It can even accept <code>.js</code> files as input with the <code>--allowJs</code> flag. This allows you to start with TypeScript right away. Unfortunately, compilation errors are likely to occur in the beginning. One does need to remember that these are not show-stopping errors like you may be used to with other compilers.</p>\n<p>The compilation errors one gets in the beginning when converting a JavaScript project to a TypeScript project are unavoidable by TypeScript's nature. TypeScript checks <em>all</em> code for validity and thus it needs to know about all functions and variables that are used. Thus type definitions need to be in place for all of them otherwise compilation errors are bound to occur. As mentioned in the chapter above, for pretty much any JavaScript framework there are <code>.d.ts</code> files that can easily be acquired with the installation of <a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped#how-do-i-get-them\" rel=\"noreferrer\">DefinitelyTyped packages</a>. It might, however, be that you've used some obscure library for which no TypeScript definitions are available or that you've polyfilled some JavaScript primitives. In that case, you must supply type definitions for these bits for the compilation errors to disappear. Just create a <code>.d.ts</code> file and include it in the tsconfig.json's <code>files</code> array, so that it is always considered by the TypeScript compiler. In it declare those bits that TypeScript does not know about as type <code>any</code>. Once you've eliminated all errors you can gradually introduce typing to those parts according to your needs.</p>\n<p>Some work on (re)configuring your build pipeline will also be needed to get TypeScript into the build pipeline. As mentioned in the chapter on compilation there are plenty of good resources out there and I encourage you to look for seed projects that use the combination of tools you want to be working with.</p>\n<p>The biggest hurdle is the learning curve. I encourage you to play around with a small project at first. Look how it works, how it builds, which files it uses, how it is configured, how it functions in your IDE, how it is structured, which tools it uses, etc. Converting a large JavaScript codebase to TypeScript is doable when you know what you are doing. Read this blog for example on <a href=\"https://www.lucidchart.com/techblog/2017/11/16/converting-600k-lines-to-typescript-in-72-hours/\" rel=\"noreferrer\">converting 600k lines to typescript in 72 hours</a>). Just make sure you have a good grasp of the language before you make the jump.</p>\n<h1>Adoption</h1>\n<p>TypeScript is open-source (Apache 2 licensed, see <a href=\"https://github.com/Microsoft/TypeScript\" rel=\"noreferrer\">GitHub</a>) and backed by Microsoft. <a href=\"https://en.wikipedia.org/wiki/Anders_Hejlsberg\" rel=\"noreferrer\">Anders Hejlsberg</a>, the lead architect of C# is spearheading the project. It's a very active project; the TypeScript team has been releasing a lot of new features in the last few years and a lot of great ones are still planned to come (see the <a href=\"https://github.com/Microsoft/TypeScript/wiki/Roadmap\" rel=\"noreferrer\">roadmap</a>).</p>\n<p>Some facts about adoption and popularity:</p>\n<ul>\n<li>In the <a href=\"https://insights.stackoverflow.com/survey/2017#technology\" rel=\"noreferrer\">2017 StackOverflow developer survey</a> TypeScript was the most popular JavaScript transpiler (9th place overall) and won third place in the most loved programming language category.</li>\n<li>In the <a href=\"https://2018.stateofjs.com/javascript-flavors/conclusion/\" rel=\"noreferrer\">2018 state of js survey</a> TypeScript was declared as one of the two big winners in the JavaScript flavors category (with ES6 being the other).</li>\n<li>In the <a href=\"https://insights.stackoverflow.com/survey/2019\" rel=\"noreferrer\">2019 StackOverlow deverloper survey</a> TypeScript rose to the 9th place of most popular languages amongst professional developers, overtaking both C and C++. It again took third place amongst most the most loved languages.</li>\n</ul>\n"},{"owner":{"reputation":5296,"user_id":5934465,"user_type":"registered","profile_image":"https://i.stack.imgur.com/deTzi.jpg?s=128&g=1","display_name":"xgqfrms","link":"https://stackoverflow.com/users/5934465/xgqfrms"},"is_accepted":false,"score":6,"last_activity_date":1599842294,"last_edit_date":1599842294,"creation_date":1475588854,"answer_id":39854041,"question_id":950087,"content_license":"CC BY-SA 4.0","body":"<h1>Here is maybe another way!</h1>\n<p>In Node.js you can do that just like the following code shows!</p>\n<p><strong>sub.js</strong></p>\n<pre class=\"lang-js prettyprint-override\"><code>    module.exports = {\n      log: function(string) {\n        if(console) console.log(string);\n      }\n      mylog: function(){\n        console.log('just for log test!');\n      }\n    }\n</code></pre>\n<p><strong>main.js</strong></p>\n<pre class=\"lang-js prettyprint-override\"><code>    const mylog = require('./sub');\n\n    mylog.log('Hurray, it works! :)');\n    mylog.mylog();\n\n</code></pre>\n<h2>refs</h2>\n<p><a href=\"http://requirejs.org/docs/node.html\" rel=\"nofollow noreferrer\">http://requirejs.org/docs/node.html</a></p>\n"},{"owner":{"reputation":2088,"user_id":12984567,"user_type":"registered","profile_image":"https://lh3.googleusercontent.com/a-/AOh14Ght3RBePHt4zwZT2Unc_KXX1ASiB4JZCS2zQ0FbvA=k-s128","display_name":"GalaxyCat105","link":"https://stackoverflow.com/users/12984567/galaxycat105"},"is_accepted":false,"score":-1,"last_activity_date":1599601150,"creation_date":1599601150,"answer_id":63801906,"question_id":336859,"content_license":"CC BY-SA 4.0","body":"<p>You can't use the <code>.bind()</code> method on function declarations, but you can on function expressions.</p>\n<p>Function declaration:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function x() {\n  console.log(this)\n}.bind('string')\n\nx()</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>Function expression:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var x = function() {\n  console.log(this)\n}.bind('string')\n\nx()</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"owner":{"reputation":1957,"user_id":9845404,"user_type":"registered","profile_image":"https://lh5.googleusercontent.com/--bMxCv1fMD4/AAAAAAAAAAI/AAAAAAAAAIE/XUvPye2hfY0/photo.jpg?sz=128","display_name":"Sajad Saderi","link":"https://stackoverflow.com/users/9845404/sajad-saderi"},"is_accepted":false,"score":5,"last_activity_date":1598072641,"last_edit_date":1598072641,"creation_date":1588660869,"answer_id":61607190,"question_id":27509,"content_license":"CC BY-SA 4.0","body":"<p>There is a very easy and simple way.</p>\n<p>You can use <strong>optional chaining</strong>:</p>\n<pre><code>x = {prop:{name:&quot;sajad&quot;}}\n\nconsole.log(x.prop?.name) // Output is: &quot;sajad&quot;\nconsole.log(x.prop?.lastName) // Output is: undefined\n</code></pre>\n<p>or</p>\n<pre><code>if(x.prop?.lastName) // The result of this 'if' statement is false and is not throwing an error\n</code></pre>\n<p>You can use optional chaining even for functions or arrays.</p>\n<p>As of mid-2020 this is not universally implemented. Check the documentation at <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining\" rel=\"nofollow noreferrer\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining</a></p>\n"},{"owner":{"reputation":5365,"user_id":8203357,"user_type":"registered","profile_image":"https://lh6.googleusercontent.com/-ZnbAtj65iuk/AAAAAAAAAAI/AAAAAAAAADE/w5_Ke2usuSI/photo.jpg?sz=128","display_name":"Kiran Maniya","link":"https://stackoverflow.com/users/8203357/kiran-maniya"},"is_accepted":false,"score":0,"last_activity_date":1598023763,"last_edit_date":1598023763,"creation_date":1588367513,"answer_id":61550879,"question_id":27509,"content_license":"CC BY-SA 4.0","body":"<p>In JavaScript, there are <strong>truthy</strong> and <strong>falsy</strong> expressions. If you want to check if the property is undefined or not, there is a straight way of using an <strong>if</strong> condition as given,</p>\n<ol>\n<li>Using <b>truthy/falsy</b> concept.</li>\n</ol>\n<pre class=\"lang-js prettyprint-override\"><code>if(!ob.someProp){\n    console.log('someProp is falsy')\n}\n</code></pre>\n<p>However, there are several more approaches to check the object has property or not, but it seems long to me. Here are those.</p>\n<ol start=\"2\">\n<li>Using <b><code>=== undefined</code></b> check in <b><code>if</code></b> condition</li>\n</ol>\n<pre class=\"lang-js prettyprint-override\"><code>if(ob.someProp === undefined){\n    console.log('someProp is undefined')\n}\n</code></pre>\n<ol start=\"3\">\n<li>Using <b><code>typeof</code></b></li>\n</ol>\n<p><b><code>typeof</code></b> acts as a combined check for the value undefined and for whether a variable exists.</p>\n<pre class=\"lang-js prettyprint-override\"><code>if(typeof ob.someProp === 'undefined'){\n    console.log('someProp is undefined')\n}\n</code></pre>\n<ol start=\"4\">\n<li>Using <b><code>hasOwnProperty</code></b> method</li>\n</ol>\n<p>The JavaScript object has built in the <code>hasOwnProperty</code> function in the object prototype.</p>\n<pre class=\"lang-js prettyprint-override\"><code>if(!ob.hasOwnProperty('someProp')){\n    console.log('someProp is undefined')\n}\n</code></pre>\n<p>Not going in deep, but the 1<sup>st</sup> way looks shortened and good to me. Here are the details on <a href=\"https://howtodoinjava.com/typescript/truthy-and-falsy/\" rel=\"nofollow noreferrer\">truthy/falsy</a> values in JavaScript and <code>undefined</code> is the falsy value listed in there. So the <code>if</code> condition behaves normally without any glitch. Apart from the <code>undefined</code>, values <code>NaN</code>, <code>false</code> (Obviously), <code>''</code> (empty string) and number <code>0</code> are also the falsy values.</p>\n<blockquote>\n<p><strong>Warning</strong>: <em>Make sure the property value does not contain any falsy value, otherwise the <code>if</code> condition will return false. For such a case, you can use the <code>hasOwnProperty</code> method</em></p>\n</blockquote>\n"},{"owner":{"reputation":1709,"user_id":6631280,"user_type":"registered","profile_image":"https://i.stack.imgur.com/Wrv7L.jpg?s=128&g=1","display_name":"Ravi Makwana","link":"https://stackoverflow.com/users/6631280/ravi-makwana"},"is_accepted":false,"score":0,"last_activity_date":1598023724,"last_edit_date":1598023724,"creation_date":1580452925,"answer_id":59999090,"question_id":27509,"content_license":"CC BY-SA 4.0","body":"<p>I found this article, <em><a href=\"https://dmitripavlutin.com/7-tips-to-handle-undefined-in-javascript/\" rel=\"nofollow noreferrer\">7 Tips to Handle undefined in JavaScript</a></em>, which is showing really interesting things about <code>undefined</code>\nlike:</p>\n<p>The existence of undefined is a consequence of JavaScript’s permissive nature that allows the usage of:</p>\n<ul>\n<li>uninitialized variables</li>\n<li>non-existing object properties or methods</li>\n<li>out of bounds indexes to access array elements</li>\n<li>the invocation result of a function that returns nothing</li>\n</ul>\n"},{"owner":{"reputation":9276,"user_id":2273,"user_type":"registered","accept_rate":81,"profile_image":"https://www.gravatar.com/avatar/3032cb003c381ca7466775e08d8cbf5c?s=128&d=identicon&r=PG","display_name":"Pandincus","link":"https://stackoverflow.com/users/2273/pandincus"},"is_accepted":false,"score":165,"last_activity_date":1598023617,"last_edit_date":1598023617,"creation_date":1219736173,"answer_id":27517,"question_id":27509,"content_license":"CC BY-SA 4.0","body":"<p>In JavaScript there is <strong>null</strong> and there is <strong>undefined</strong>.  They have different meanings.</p>\n<ul>\n<li><strong>undefined</strong> means that the variable value has not been defined; it is not known what the value is.</li>\n<li><strong>null</strong> means that the variable value is defined and set to null (has no value).</li>\n</ul>\n<p>Marijn Haverbeke states, in his free, online book &quot;<a href=\"http://eloquentjavascript.net/\" rel=\"nofollow noreferrer\">Eloquent JavaScript</a>&quot; (emphasis mine):</p>\n<blockquote>\n<p>There is also a similar value, null, whose meaning is 'this value is defined, but it does not have a value'. The difference in meaning between undefined and null is mostly academic, and usually not very interesting. <strong>In practical programs, it is often necessary to check whether something 'has a value'. In these cases, the expression something == undefined may be used, because, even though they are not exactly the same value, null == undefined will produce true.</strong></p>\n</blockquote>\n<p>So, I guess the best way to check if something was undefined would be:</p>\n<pre><code>if (something == undefined)\n</code></pre>\n<p>Object properties should work the same way.</p>\n<pre><code>var person = {\n    name: &quot;John&quot;,\n    age: 28,\n    sex: &quot;male&quot;\n};\n\nalert(person.name); // &quot;John&quot;\nalert(person.fakeVariable); // undefined\n</code></pre>\n"},{"owner":{"reputation":186992,"user_id":43089,"user_type":"registered","accept_rate":50,"profile_image":"https://www.gravatar.com/avatar/cbdcba7870660c048cf9d6db74a3ef29?s=128&d=identicon&r=PG","display_name":"Triptych","link":"https://stackoverflow.com/users/43089/triptych"},"is_accepted":true,"score":2591,"last_activity_date":1597106355,"last_edit_date":1597106355,"creation_date":1233478730,"answer_id":500459,"question_id":500431,"content_license":"CC BY-SA 4.0","body":"<h2>TLDR</h2>\n<p>JavaScript has lexical (also called static) scoping and closures. This means you can tell the scope of an identifier by looking at the source code.</p>\n<p>The four scopes are:</p>\n<ol>\n<li>Global - visible by everything</li>\n<li>Function - visible within a function (and its sub-functions and blocks)</li>\n<li>Block - visible within a block (and its sub-blocks)</li>\n<li>Module - visible within a module</li>\n</ol>\n<p>Outside of the special cases of global and module scope, variables are declared using <code>var</code> (function scope), <code>let</code> (block scope), and <code>const</code> (block scope). Most other forms of identifier declaration have block scope in strict mode.</p>\n<h2>Overview</h2>\n<p>Scope is the region of the codebase over which an identifier is valid.</p>\n<p>A lexical environment is a mapping between identifier names and the values associated with them.</p>\n<p>Scope is formed of a linked nesting of lexical environments, with each level in the nesting corresponding to a lexical environment of an ancestor execution context.</p>\n<p>These linked lexical environments form a scope &quot;chain&quot;. Identifier resolution is the process of searching along this chain for a matching identifier.</p>\n<p>Identifier resolution only occurs in one direction: outwards. In this way, outer lexical environments cannot &quot;see&quot; into inner lexical environments.</p>\n<p>There are three pertinent factors in deciding the <a href=\"https://en.wikipedia.org/wiki/Scope_(computer_science)\" rel=\"noreferrer\">scope</a> of an <a href=\"https://www.ecma-international.org/ecma-262/10.0/index.html#sec-names-and-keywords\" rel=\"noreferrer\">identifier</a> in JavaScript:</p>\n<ol>\n<li>How an identifier was declared</li>\n<li>Where an identifier was declared</li>\n<li>Whether you are in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\" rel=\"noreferrer\">strict mode</a> or <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Sloppy_mode\" rel=\"noreferrer\">non-strict mode</a></li>\n</ol>\n<p>Some of the ways identifiers can be declared:</p>\n<ol>\n<li><code>var</code>, <code>let</code> and <code>const</code></li>\n<li>Function parameters</li>\n<li>Catch block parameter</li>\n<li>Function declarations</li>\n<li>Named function expressions</li>\n<li>Implicitly defined properties on the global object (i.e., missing out <code>var</code> in non-strict mode)</li>\n<li><code>import</code> statements</li>\n<li><code>eval</code></li>\n</ol>\n<p>Some of the locations identifiers can be declared:</p>\n<ol>\n<li>Global context</li>\n<li>Function body</li>\n<li>Ordinary block</li>\n<li>The top of a control structure (e.g., loop, if, while, etc.)</li>\n<li>Control structure body</li>\n<li>Modules</li>\n</ol>\n<h2>Declaration Styles</h2>\n<h3>var</h3>\n<p>Identifiers declared using <code>var</code> <strong>have function scope</strong>, apart from when they are declared directly in the global context, in which case they are added as properties on the global object and have global scope. There are separate rules for their use in <code>eval</code> functions.</p>\n<h3>let and const</h3>\n<p>Identifiers declared using <code>let</code> and <code>const</code> <strong>have block scope</strong>, apart from when they are declared directly in the global context, in which case they have global scope.</p>\n<p>Note: <code>let</code>, <code>const</code> and <code>var</code> <a href=\"https://stackoverflow.com/a/31222689/38522\">are all hoisted</a>. This means that their logical position of definition is the top of their enclosing scope (block or function). However, variables declared using <code>let</code> and <code>const</code> cannot be read or assigned to until control has passed the point of declaration in the source code. The interim period is known as the temporal dead zone.</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function f() {\n    function g() {\n        console.log(x)\n    }\n    let x = 1\n    g()\n}\nf() // 1 because x is hoisted even though declared with `let`!</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<h3>Function parameter names</h3>\n<p>Function parameter names are scoped to the function body. Note that there is a slight complexity to this. Functions declared as default arguments close over the <a href=\"https://stackoverflow.com/questions/61208843/where-are-arguments-positioned-in-the-lexical-environment/\">parameter list</a>, and not the body of the function.</p>\n<h3>Function declarations</h3>\n<p>Function declarations have block scope in strict mode and function scope in non-strict mode. Note: non-strict mode is a complicated set of emergent rules based on the quirky historical implementations of different browsers.</p>\n<h3>Named function expressions</h3>\n<p>Named function expressions are scoped to themselves (e.g., for the purpose of recursion).</p>\n<h3>Implicitly defined properties on the global object</h3>\n<p>In non-strict mode, implicitly defined properties on the global object have global scope, because the global object sits at the top of the scope chain. In strict mode, these are not permitted.</p>\n<h3>eval</h3>\n<p>In <code>eval</code> strings, variables declared using <code>var</code> will be placed in the current scope, or, if <code>eval</code> is used indirectly, as properties on the global object.</p>\n<h2>Examples</h2>\n<p>The following will throw a ReferenceError because the names<code>x</code>, <code>y</code>, and <code>z</code> have no meaning outside of the function <code>f</code>.</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function f() {\n    var x = 1\n    let y = 1\n    const z = 1\n}\nconsole.log(typeof x) // undefined (because var has function scope!)\nconsole.log(typeof y) // undefined (because the body of the function is a block)\nconsole.log(typeof z) // undefined (because the body of the function is a block)</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>The following will throw a ReferenceError for <code>y</code> and <code>z</code>, but not for <code>x</code>, because the visibility of <code>x</code> is not constrained by the block. Blocks that define the bodies of control structures like <code>if</code>, <code>for</code>, and <code>while</code>, behave similarly.</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>{\n    var x = 1\n    let y = 1\n    const z = 1\n}\nconsole.log(x) // 1\nconsole.log(typeof y) // undefined because `y` has block scope\nconsole.log(typeof z) // undefined because `z` has block scope</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>In the following, <code>x</code> is visible outside of the loop because <code>var</code> has function scope:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>for(var x = 0; x &lt; 5; ++x) {}\nconsole.log(x) // 5 (note this is outside the loop!)</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>...because of this behavior, you need to be careful about closing over variables declared using <code>var</code> in loops. There is only one instance of variable <code>x</code> declared here, and it sits logically outside of the loop.</p>\n<p>The following prints <code>5</code>, five times, and then prints <code>5</code> a sixth time for the <code>console.log</code> outside the loop:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>for(var x = 0; x &lt; 5; ++x) {\n    setTimeout(() =&gt; console.log(x)) // closes over the `x` which is logically positioned at the top of the enclosing scope, above the loop\n}\nconsole.log(x) // note: visible outside the loop</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>The following prints <code>undefined</code> because <code>x</code> is block-scoped. The callbacks are run one by one asynchronously. New behavior for <code>let</code> variables means that each anonymous function closed over a different variable named <code>x</code> (unlike it would have done with <code>var</code>), and so integers <code>0</code> through <code>4</code> are printed.:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>for(let x = 0; x &lt; 5; ++x) {\n    setTimeout(() =&gt; console.log(x)) // `let` declarations are re-declared on a per-iteration basis, so the closures capture different variables\n}\nconsole.log(typeof x) // undefined</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>The following will NOT throw a <code>ReferenceError</code> because the visibility of <code>x</code> is not constrained by the block; it will, however, print <code>undefined</code> because the variable has not been initialised (because of the <code>if</code> statement).</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>if(false) {\n    var x = 1\n}\nconsole.log(x) // here, `x` has been declared, but not initialised</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>A variable declared at the top of a <code>for</code> loop using <code>let</code> is scoped to the body of the loop:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>for(let x = 0; x &lt; 10; ++x) {} \nconsole.log(typeof x) // undefined, because `x` is block-scoped</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>The following will throw a <code>ReferenceError</code> because the visibility of <code>x</code> is constrained by the block:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>if(false) {\n    let x = 1\n}\nconsole.log(typeof x) // undefined, because `x` is block-scoped</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>Variables declared using <code>var</code>, <code>let</code> or <code>const</code> are all scoped to modules:</p>\n<pre class=\"lang-js prettyprint-override\"><code>// module1.js\n\nvar x = 0\nexport function f() {}\n\n//module2.js\n\nimport f from 'module1.js'\n\nconsole.log(x) // throws ReferenceError\n</code></pre>\n<p>The following will declare a property on the global object because variables declared using <code>var</code> within the global context are added as properties to the global object:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var x = 1\nconsole.log(window.hasOwnProperty('x')) // true</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p><code>let</code> and <code>const</code> in the global context do not add properties to the global object, but still have global scope:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>let x = 1\nconsole.log(window.hasOwnProperty('x')) // false</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>Function parameters can be considered to be declared in the function body:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function f(x) {}\nconsole.log(typeof x) // undefined, because `x` is scoped to the function</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>Catch block parameters are scoped to the catch-block body:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>try {} catch(e) {}\nconsole.log(typeof e) // undefined, because `e` is scoped to the catch block</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>Named function expressions are scoped only to the expression itself:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>(function foo() { console.log(foo) })()\nconsole.log(typeof foo) // undefined, because `foo` is scoped to its own expression</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>In non-strict mode, implicitly defined properties on the global object are globally scoped. In strict mode, you get an error.</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>x = 1 // implicitly defined property on the global object (no \"var\"!)\n\nconsole.log(x) // 1\nconsole.log(window.hasOwnProperty('x')) // true</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>In non-strict mode, function declarations have function scope. In strict mode, they have block scope.</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>'use strict'\n{\n    function foo() {}\n}\nconsole.log(typeof foo) // undefined, because `foo` is block-scoped</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<h2>How it works under the hood</h2>\n<p>Scope is defined as the <a href=\"https://stackoverflow.com/a/1047479/38522\">lexical</a> region of code over which an identifier is valid.</p>\n<p>In JavaScript, every function-object has a hidden <code>[[Environment]]</code> reference that is a reference to the <a href=\"https://www.ecma-international.org/ecma-262/10.0/index.html#sec-lexical-environments\" rel=\"noreferrer\">lexical environment</a> of the <a href=\"https://www.ecma-international.org/ecma-262/10.0/index.html#sec-execution-contexts\" rel=\"noreferrer\">execution context</a> (stack frame) within which it was created.</p>\n<p>When you invoke a function, the hidden <code>[[Call]]</code> method is called. This method creates a new execution context and establishes a link between the new execution context and the lexical environment of the function-object. It does this by copying the <code>[[Environment]]</code> value on the function-object, into an <a href=\"https://www.ecma-international.org/ecma-262/10.0/index.html#sec-lexical-environments\" rel=\"noreferrer\">outer reference</a> field on the lexical environment of the new execution context.</p>\n<p>Note that this link between the new execution context and the lexical environment of the function object is called a <a href=\"https://stackoverflow.com/a/111114/38522\">closure</a>.</p>\n<p>Thus, in JavaScript, scope is implemented via lexical environments linked together in a &quot;chain&quot; by outer references. This chain of lexical environments is called the scope chain, and identifier resolution occurs by <a href=\"https://www.ecma-international.org/ecma-262/10.0/index.html#sec-getidentifierreference\" rel=\"noreferrer\">searching up the chain</a> for a matching identifier.</p>\n<p>Find out <a href=\"https://github.com/getify/You-Dont-Know-JS/tree/2nd-ed/scope-closures\" rel=\"noreferrer\">more</a>.</p>\n"},{"owner":{"reputation":18647,"user_id":8059459,"user_type":"registered","accept_rate":90,"profile_image":"https://www.gravatar.com/avatar/9f0fc0fd607fc44a4597cacb7f034ba6?s=128&d=identicon&r=PG&f=1","display_name":"Willem van der Veen","link":"https://stackoverflow.com/users/8059459/willem-van-der-veen"},"is_accepted":false,"score":1,"last_activity_date":1597094796,"last_edit_date":1597094796,"creation_date":1538299411,"answer_id":52576544,"question_id":500431,"content_license":"CC BY-SA 4.0","body":"<h2><code>ES5</code> and earlier:</h2>\n<p>Variables in Javascript were initially (pre <code>ES6</code>) lexically function scoped. The term lexically scoped means that you can see the scope of the variables by 'looking' at the code.</p>\n<p>Every variable declared with the <code>var</code> keyword is scoped to the function. However, if other function are declared within that function those functions will have access to the variables of the outer functions. This is called a <strong>scope chain</strong>. It works in the following manner:</p>\n<ol>\n<li>When a function look to resolve a variable value it first looks at its own scope. This is the function body, i.e. everything between curly brackets {} (except for variables inside <strong>other</strong> <strong>functions</strong> which are in this scope).</li>\n<li>If it cannot find the variable inside the function body it <strong>will climb up to the chain</strong> and look at the variable scope in the function in <strong>where the function was defined</strong>. This is what is meant with lexical scope, we can see in the code where this function was defined and thus can determine the scope chain by merely looking at the code.</li>\n</ol>\n<h2>Example:</h2>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>// global scope\nvar foo = 'global';\nvar bar = 'global';\nvar foobar = 'global';\n\nfunction outerFunc () {\n // outerFunc scope\n var foo = 'outerFunc';\n var foobar = 'outerFunc';\n innerFunc();\n \n function innerFunc(){\n // innerFunc scope\n  var foo = 'innerFunc';\n  console.log(foo);\n  console.log(bar);\n  console.log(foobar);\n  }\n}\n\nouterFunc();</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>What happens when we are trying to log the variables <code>foo</code>, <code>bar</code>, and <code>foobar</code> to the console is the following:</p>\n<ol>\n<li>We try to log foo to the console, foo can be found inside the function <code>innerFunc</code> itself. Therefore, the value of foo is resolved to the string <code>innerFunc</code>.</li>\n<li>We try to log bar to the console, bar cannot be found inside the function <code>innerFunc</code> itself. Therefore, we need to <strong>climb the scope chain</strong>. We first look in the outer function in which the function <code>innerFunc</code> was defined. This is the function <code>outerFunc</code>. In the scope of <code>outerFunc</code> we can find the variable bar, which holds the string 'outerFunc'.</li>\n<li>foobar cannot be found in innerFunc. . Therefore, we need to <strong>climb the scope chain</strong> to the innerFunc scope. It also cannot be found here, we climb another level to the <strong>global scope</strong> (i.e. the outermost scope). We find the variable foobar here which holds the string 'global'. If it wouldnot have found the variable after climbing the scope chain the JS engine would throw a <strong>referenceError</strong>.</li>\n</ol>\n<h2><code>ES6</code> (ES 2015) and older:</h2>\n<p>The same concepts of lexically scope and scopechain still apply in <code>ES6</code>. However a new ways to declare variables were introduced. There are the following:</p>\n<ul>\n<li><code>let</code>: creates a block scoped variable</li>\n<li><code>const</code>: creates a block scoped variable which has to be initialized and cannot be reassigned</li>\n</ul>\n<p>The biggest difference between <code>var</code> and <code>let</code>/<code>const</code> is that <code>var</code> is function scoped whereas <code>let</code>/<code>const</code> are block scoped. Here is an example to illustrate this:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>let letVar = 'global';\nvar varVar = 'global';\n\nfunction foo () {\n  \n  if (true) {\n    // this variable declared with let is scoped to the if block, block scoped\n    let letVar = 5;\n    // this variable declared with let is scoped to the function block, function scoped\n    var varVar = 10;\n  }\n  \n  console.log(letVar);\n  console.log(varVar);\n}\n\n\nfoo();</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>In the above example letVar logs the value global because variables declared with <code>let</code> are block scoped. They cease to exist outside their respective block, so the variable can't be accessed outside the if block.</p>\n"},{"owner":{"reputation":197933,"user_id":707111,"user_type":"moderator","accept_rate":100,"profile_image":"https://i.stack.imgur.com/oXZkh.jpg?s=128&g=1","display_name":"Ry-","link":"https://stackoverflow.com/users/707111/ry"},"is_accepted":false,"score":246,"last_activity_date":1596068782,"last_edit_date":1596068782,"creation_date":1393449430,"answer_id":22053469,"question_id":27509,"content_license":"CC BY-SA 4.0","body":"<p>Despite being vehemently recommended by many other answers here, <code>typeof</code> <em>is a bad choice</em>. It should never be used for checking whether variables have the value <code>undefined</code>, because it acts as a combined check for the value <code>undefined</code> and for whether a variable exists. In the vast majority of cases, you know when a variable exists, and <code>typeof</code> will just introduce the potential for a silent failure if you make a typo in the variable name or in the string literal <code>'undefined'</code>.</p>\n<pre><code>var snapshot = …;\n\nif (typeof snaposhot === 'undefined') {\n    //         ^\n    // misspelled¹ – this will never run, but it won’t throw an error!\n}\n</code></pre>\n\n<pre><code>var foo = …;\n\nif (typeof foo === 'undefned') {\n    //                   ^\n    // misspelled – this will never run, but it won’t throw an error!\n}\n</code></pre>\n<p>So unless you’re doing feature detection², where there’s uncertainty whether a given name will be in scope (like checking <code>typeof module !== 'undefined'</code> as a step in code specific to a CommonJS environment), <code>typeof</code> is a harmful choice when used on a variable, and the correct option is to compare the value directly:</p>\n<pre><code>var foo = …;\n\nif (foo === undefined) {\n    ⋮\n}\n</code></pre>\n<p>Some common misconceptions about this include:</p>\n<ul>\n<li><p>that reading an “uninitialized” variable (<code>var foo</code>) or parameter (<code>function bar(foo) { … }</code>, called as <code>bar()</code>) will fail. This is simply not true – variables without explicit initialization and parameters that weren’t given values always become <code>undefined</code>, and are always in scope.</p>\n</li>\n<li><p>that <code>undefined</code> can be overwritten. It’s true that <code>undefined</code> isn’t a keyword, but it <em>is</em> read-only and non-configurable. There are other built-ins you probably don’t avoid despite their non-keyword status (<code>Object</code>, <code>Math</code>, <code>NaN</code>…) and practical code usually isn’t written in an actively malicious environment, so this isn’t a good reason to be worried about <code>undefined</code>. (But if you are writing a code generator, feel free to use <code>void 0</code>.)</p>\n</li>\n</ul>\n<p>With how variables work out of the way, it’s time to address the actual question: object properties. There is no reason to ever use <code>typeof</code> for object properties. The earlier exception regarding feature detection doesn’t apply here – <code>typeof</code> only has special behaviour on variables, and expressions that reference object properties are not variables.</p>\n<p>This:</p>\n<pre><code>if (typeof foo.bar === 'undefined') {\n    ⋮\n}\n</code></pre>\n<p>is <em>always exactly equivalent</em> to this³:</p>\n<pre><code>if (foo.bar === undefined) {\n    ⋮\n}\n</code></pre>\n<p>and taking into account the advice above, to avoid confusing readers as to why you’re using <code>typeof</code>, because it makes the most sense to use <code>===</code> to check for equality, because it could be refactored to checking a variable’s value later, and because it just plain looks better, <strong>you should always use <code>=== undefined</code>³ here as well</strong>.</p>\n<p>Something else to consider when it comes to object properties is whether you really want to check for <code>undefined</code> at all. A given property name can be absent on an object (producing the value <code>undefined</code> when read), present on the object itself with the value <code>undefined</code>, present on the object’s prototype with the value <code>undefined</code>, or present on either of those with a non-<code>undefined</code> value. <code>'key' in obj</code> will tell you whether a key is anywhere on an object’s prototype chain, and <code>Object.prototype.hasOwnProperty.call(obj, 'key')</code> will tell you whether it’s directly on the object. I won’t go into detail in this answer about prototypes and using objects as string-keyed maps, though, because it’s mostly intended to counter all the bad advice in other answers irrespective of the possible interpretations of the original question. Read up on <a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes\" rel=\"noreferrer\">object prototypes on MDN</a> for more!</p>\n<p><sub>¹ unusual choice of example variable name? this is real dead code from the NoScript extension for Firefox.</sub><br />\n<sub>² don’t assume that not knowing what’s in scope is okay in general, though. bonus vulnerability caused by abuse of dynamic scope: <a href=\"https://bugs.chromium.org/p/project-zero/issues/detail?id=1225&amp;desc=6\" rel=\"noreferrer\">Project Zero 1225</a></sub><br />\n<sub>³ once again assuming an ES5+ environment and that <code>undefined</code> refers to the <code>undefined</code> property of the global object.</sub></p>\n"},{"owner":{"reputation":53,"user_id":10564838,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/7b79ed5e9209f4ef64057b4e81ee14c8?s=128&d=identicon&r=PG","display_name":"Ty Conway","link":"https://stackoverflow.com/users/10564838/ty-conway"},"is_accepted":false,"score":0,"last_activity_date":1595693461,"creation_date":1595693461,"answer_id":63090569,"question_id":17289236,"content_license":"CC BY-SA 4.0","body":"<p>There appear to be <em>many working solutions</em> suggesting the error has <em>many actual causes</em>.</p>\n<p>In my case I hadn't declared the controller in <code>app/index.html</code>:</p>\n<pre class=\"lang-html prettyprint-override\"><code>&lt;scipt src=&quot;src/controllers/controller-name.controller.js&quot;&gt;&lt;/script&gt;\n</code></pre>\n<p>Error gone.</p>\n"},{"owner":{"reputation":38776,"user_id":1541563,"user_type":"registered","accept_rate":96,"profile_image":"https://i.stack.imgur.com/U4EOh.png?s=128&g=1","display_name":"Patrick Roberts","link":"https://stackoverflow.com/users/1541563/patrick-roberts"},"is_accepted":false,"score":1,"last_activity_date":1595648530,"last_edit_date":1595648530,"creation_date":1490659413,"answer_id":43058440,"question_id":27509,"content_license":"CC BY-SA 4.0","body":"<p>I'm surprised I haven't seen this suggestion yet, but it gets even more specificity than testing with <code>typeof</code>. Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\" rel=\"nofollow noreferrer\"><code>Object.getOwnPropertyDescriptor()</code></a> if you need to know whether an object property was initialized with <code>undefined</code> or if it was never initialized:</p>\n<pre><code>// to test someObject.someProperty\nvar descriptor = Object.getOwnPropertyDescriptor(someObject, 'someProperty');\n\nif (typeof descriptor === 'undefined') {\n  // was never initialized\n} else if (typeof descriptor.value === 'undefined') {\n  if (descriptor.get || descriptor.set) {\n    // is an accessor property, defined via getter and setter\n  } else {\n    // is initialized with `undefined`\n  }\n} else {\n  // is initialized with some other value\n}\n</code></pre>\n"},{"owner":{"reputation":21326,"user_id":1037948,"user_type":"registered","accept_rate":80,"profile_image":"https://www.gravatar.com/avatar/e9fdb26b1c2ef88470505cc4c7267244?s=128&d=identicon&r=PG","display_name":"drzaus","link":"https://stackoverflow.com/users/1037948/drzaus"},"is_accepted":false,"score":25,"last_activity_date":1595636946,"last_edit_date":1595636946,"creation_date":1358098987,"answer_id":14306293,"question_id":27509,"content_license":"CC BY-SA 4.0","body":"<p>Crossposting <a href=\"https://stackoverflow.com/questions/3390396/how-can-i-check-for-undefined-in-javascript/14305002#14305002\">my answer</a> from related question <em><a href=\"https://stackoverflow.com/questions/3390396/how-can-i-check-for-undefined-in-javascript\">How can I check for &quot;undefined&quot; in JavaScript?</a></em>.</p>\n<p><em>Specific to this question, see test cases with <code>someObject.&lt;whatever&gt;</code>.</em></p>\n<hr />\n<p>Some scenarios illustrating the results of the various answers:\n<a href=\"http://jsfiddle.net/drzaus/UVjM4/\" rel=\"nofollow noreferrer\">http://jsfiddle.net/drzaus/UVjM4/</a></p>\n<p><em>(Note that the use of <code>var</code> for <code>in</code> tests make a difference when in a scoped wrapper)</em></p>\n<p>Code for reference:</p>\n<pre><code>(function(undefined) {\n    var definedButNotInitialized;\n    definedAndInitialized = 3;\n    someObject = {\n        firstProp: &quot;1&quot;\n        , secondProp: false\n        // , undefinedProp not defined\n    }\n    // var notDefined;\n\n    var tests = [\n        'definedButNotInitialized in window',\n        'definedAndInitialized in window',\n        'someObject.firstProp in window',\n        'someObject.secondProp in window',\n        'someObject.undefinedProp in window',\n        'notDefined in window',\n\n        '&quot;definedButNotInitialized&quot; in window',\n        '&quot;definedAndInitialized&quot; in window',\n        '&quot;someObject.firstProp&quot; in window',\n        '&quot;someObject.secondProp&quot; in window',\n        '&quot;someObject.undefinedProp&quot; in window',\n        '&quot;notDefined&quot; in window',\n\n        'typeof definedButNotInitialized == &quot;undefined&quot;',\n        'typeof definedButNotInitialized === typeof undefined',\n        'definedButNotInitialized === undefined',\n        '! definedButNotInitialized',\n        '!! definedButNotInitialized',\n\n        'typeof definedAndInitialized == &quot;undefined&quot;',\n        'typeof definedAndInitialized === typeof undefined',\n        'definedAndInitialized === undefined',\n        '! definedAndInitialized',\n        '!! definedAndInitialized',\n\n        'typeof someObject.firstProp == &quot;undefined&quot;',\n        'typeof someObject.firstProp === typeof undefined',\n        'someObject.firstProp === undefined',\n        '! someObject.firstProp',\n        '!! someObject.firstProp',\n\n        'typeof someObject.secondProp == &quot;undefined&quot;',\n        'typeof someObject.secondProp === typeof undefined',\n        'someObject.secondProp === undefined',\n        '! someObject.secondProp',\n        '!! someObject.secondProp',\n\n        'typeof someObject.undefinedProp == &quot;undefined&quot;',\n        'typeof someObject.undefinedProp === typeof undefined',\n        'someObject.undefinedProp === undefined',\n        '! someObject.undefinedProp',\n        '!! someObject.undefinedProp',\n\n        'typeof notDefined == &quot;undefined&quot;',\n        'typeof notDefined === typeof undefined',\n        'notDefined === undefined',\n        '! notDefined',\n        '!! notDefined'\n    ];\n\n    var output = document.getElementById('results');\n    var result = '';\n    for(var t in tests) {\n        if( !tests.hasOwnProperty(t) ) continue; // bleh\n\n        try {\n            result = eval(tests[t]);\n        } catch(ex) {\n            result = 'Exception--' + ex;\n        }\n        console.log(tests[t], result);\n        output.innerHTML += &quot;\\n&quot; + tests[t] + &quot;: &quot; + result;\n    }\n})();\n</code></pre>\n<p>And results:</p>\n<pre><code>definedButNotInitialized in window: true\ndefinedAndInitialized in window: false\nsomeObject.firstProp in window: false\nsomeObject.secondProp in window: false\nsomeObject.undefinedProp in window: true\nnotDefined in window: Exception--ReferenceError: notDefined is not defined\n&quot;definedButNotInitialized&quot; in window: false\n&quot;definedAndInitialized&quot; in window: true\n&quot;someObject.firstProp&quot; in window: false\n&quot;someObject.secondProp&quot; in window: false\n&quot;someObject.undefinedProp&quot; in window: false\n&quot;notDefined&quot; in window: false\ntypeof definedButNotInitialized == &quot;undefined&quot;: true\ntypeof definedButNotInitialized === typeof undefined: true\ndefinedButNotInitialized === undefined: true\n! definedButNotInitialized: true\n!! definedButNotInitialized: false\ntypeof definedAndInitialized == &quot;undefined&quot;: false\ntypeof definedAndInitialized === typeof undefined: false\ndefinedAndInitialized === undefined: false\n! definedAndInitialized: false\n!! definedAndInitialized: true\ntypeof someObject.firstProp == &quot;undefined&quot;: false\ntypeof someObject.firstProp === typeof undefined: false\nsomeObject.firstProp === undefined: false\n! someObject.firstProp: false\n!! someObject.firstProp: true\ntypeof someObject.secondProp == &quot;undefined&quot;: false\ntypeof someObject.secondProp === typeof undefined: false\nsomeObject.secondProp === undefined: false\n! someObject.secondProp: true\n!! someObject.secondProp: false\ntypeof someObject.undefinedProp == &quot;undefined&quot;: true\ntypeof someObject.undefinedProp === typeof undefined: true\nsomeObject.undefinedProp === undefined: true\n! someObject.undefinedProp: true\n!! someObject.undefinedProp: false\ntypeof notDefined == &quot;undefined&quot;: true\ntypeof notDefined === typeof undefined: true\nnotDefined === undefined: Exception--ReferenceError: notDefined is not defined\n! notDefined: Exception--ReferenceError: notDefined is not defined\n!! notDefined: Exception--ReferenceError: notDefined is not defined\n</code></pre>\n"},{"owner":{"reputation":195,"user_id":352033,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/74d4a8548c2cd55eec4c13a7380711c1?s=128&d=identicon&r=PG","display_name":"wayneseymour","link":"https://stackoverflow.com/users/352033/wayneseymour"},"is_accepted":false,"score":7,"last_activity_date":1595636771,"last_edit_date":1595636771,"creation_date":1376574996,"answer_id":18254258,"question_id":27509,"content_license":"CC BY-SA 4.0","body":"<p>Here is my situation:</p>\n<p>I am using the result of a REST call. The result should be parsed from JSON to a JavaScript object.</p>\n<p>There is one error I need to defend. If the arguments to the REST call were incorrect as far as the user specifying the arguments wrong, the REST call comes back basically empty.</p>\n<p>While using this post to help me defend against this, I tried this:</p>\n<pre><code>if( typeof restResult.data[0] === &quot;undefined&quot; ) { throw  &quot;Some error&quot;; }\n</code></pre>\n<p>For my situation, if restResult.data[0] === &quot;object&quot;, then I can safely start inspecting the rest of the members. If undefined then throw the error as above.</p>\n<p>What I am saying is that for my situation, all the previous suggestions in this post did not work. I'm not saying I'm right and everyone is wrong. I am not a JavaScript master at all, but hopefully this will help someone.</p>\n"},{"owner":{"reputation":11982,"user_id":2324388,"user_type":"registered","accept_rate":41,"profile_image":"https://i.stack.imgur.com/RdjjJ.jpg?s=128&g=1","display_name":"Marian Kl&#252;hspies","link":"https://stackoverflow.com/users/2324388/marian-kl%c3%bchspies"},"is_accepted":false,"score":8,"last_activity_date":1595636615,"last_edit_date":1595636615,"creation_date":1456999536,"answer_id":35768990,"question_id":27509,"content_license":"CC BY-SA 4.0","body":"<p>There is a nice and elegant way to assign a defined property to a new variable if it is defined or assign a default value to it as a fallback if it’s undefined.</p>\n<pre><code>var a = obj.prop || defaultValue;\n</code></pre>\n<p>It’s suitable if you have a function, which receives an additional configuration property:</p>\n<pre><code>var yourFunction = function(config){\n\n   this.config = config || {};\n   this.yourConfigValue = config.yourConfigValue || 1;\n   console.log(this.yourConfigValue);\n}\n</code></pre>\n<p>Now executing</p>\n<pre><code>yourFunction({yourConfigValue:2});\n//=&gt; 2\n\nyourFunction();\n//=&gt; 1\n\nyourFunction({otherProperty:5});\n//=&gt; 1\n</code></pre>\n"},{"owner":{"reputation":696,"user_id":1802325,"user_type":"registered","accept_rate":50,"profile_image":"https://www.gravatar.com/avatar/b4bbd482901d1ab67f2a976e1281990c?s=128&d=identicon&r=PG","display_name":"Juan Garcia","link":"https://stackoverflow.com/users/1802325/juan-garcia"},"is_accepted":false,"score":7,"last_activity_date":1595636403,"last_edit_date":1595636403,"creation_date":1403068883,"answer_id":24277572,"question_id":27509,"content_license":"CC BY-SA 4.0","body":"<p>All the answers are incomplete. This is the right way of knowing that there is a property 'defined as undefined':</p>\n<pre><code>var hasUndefinedProperty = function hasUndefinedProperty(obj, prop){\n  return ((prop in obj) &amp;&amp; (typeof obj[prop] == 'undefined'));\n};\n</code></pre>\n<p>Example:</p>\n<pre><code>var a = { b : 1, e : null };\na.c = a.d;\n\nhasUndefinedProperty(a, 'b'); // false: b is defined as 1\nhasUndefinedProperty(a, 'c'); // true: c is defined as undefined\nhasUndefinedProperty(a, 'd'); // false: d is undefined\nhasUndefinedProperty(a, 'e'); // false: e is defined as null\n\n// And now...\ndelete a.c ;\nhasUndefinedProperty(a, 'c'); // false: c is undefined\n</code></pre>\n<p>Too bad that this been the right answer and is buried in wrong answers &gt;_&lt;</p>\n<p>So, for anyone who pass by, I will give you undefined's for free!!</p>\n<pre><code>var undefined ; undefined ; // undefined\n({}).a ;                    // undefined\n[].a ;                      // undefined\n''.a ;                      // undefined\n(function(){}()) ;          // undefined\nvoid(0) ;                   // undefined\neval() ;                    // undefined\n1..a ;                      // undefined\n/a/.a ;                     // undefined\n(true).a ;                  // undefined\n</code></pre>\n"},{"owner":{"reputation":1,"user_id":1083704,"user_type":"registered","accept_rate":71,"profile_image":"https://www.gravatar.com/avatar/867c6bf0fb8fcddd7e73bd6b6498543d?s=128&d=identicon&r=PG","display_name":"Val","link":"https://stackoverflow.com/users/1083704/val"},"is_accepted":false,"score":6,"last_activity_date":1595636269,"last_edit_date":1595636269,"creation_date":1425657480,"answer_id":28902597,"question_id":27509,"content_license":"CC BY-SA 4.0","body":"<p>I use <code>if (this.variable)</code> to test if it is defined. A simple <code>if (variable)</code>, <a href=\"https://stackoverflow.com/questions/27509/detecting-an-undefined-object-property/12589152#12589152\">recommended in a previous answer</a>, fails for me.</p>\n<p>It turns out that it works only when a variable is a field of some object, <code>obj.someField</code> to check if it is defined in the dictionary. But we can use <code>this</code> or <code>window</code> as the dictionary object since any variable is a field in the current window, as I understand it. Therefore here is a test:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>if (this.abc) \n    alert(\"defined\"); \nelse \n    alert(\"undefined\");\n\nabc = \"abc\";\nif (this.abc) \n    alert(\"defined\"); \nelse \n    alert(\"undefined\");</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>It first detects that variable <code>abc</code> is undefined and it is defined after initialization.</p>\n"},{"owner":{"reputation":3430,"user_id":8680601,"user_type":"registered","profile_image":"https://graph.facebook.com/1551607414886212/picture?type=large","display_name":"Przemek Struciński","link":"https://stackoverflow.com/users/8680601/przemek-struci%c5%84ski"},"is_accepted":false,"score":10,"last_activity_date":1595636146,"last_edit_date":1595636146,"creation_date":1569567369,"answer_id":58129331,"question_id":27509,"content_license":"CC BY-SA 4.0","body":"<p><a href=\"https://en.wikipedia.org/wiki/ECMAScript#10th_Edition_%E2%80%93_ECMAScript_2019\" rel=\"nofollow noreferrer\">ECMAScript 10</a> introduced a new feature - <strong>optional chaining</strong> which you can use to use a property of an object only when an object is defined like this:</p>\n<pre><code>const userPhone = user?.contactDetails?.phone;\n</code></pre>\n<p>It will reference to the phone property only when user and contactDetails are defined.</p>\n<p>Ref. <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining\" rel=\"nofollow noreferrer\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining</a></p>\n"},{"owner":{"reputation":4964,"user_id":4831179,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/550cdda1fabb8596d60b256ba1c73b05?s=128&d=identicon&r=PG","display_name":"blackmiaool","link":"https://stackoverflow.com/users/4831179/blackmiaool"},"is_accepted":false,"score":6,"last_activity_date":1595635866,"last_edit_date":1595635866,"creation_date":1509182652,"answer_id":46988171,"question_id":27509,"content_license":"CC BY-SA 4.0","body":"<p>I provide three ways here for those who expect weird answers:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function isUndefined1(val) {\n    try {\n        val.a;\n    } catch (e) {\n        return /undefined/.test(e.message);\n    }\n    return false;\n}\n\nfunction isUndefined2(val) {\n    return !val &amp;&amp; val+'' === 'undefined';\n}\n\nfunction isUndefined3(val) {\n    const defaultVal = {};\n    return ((input = defaultVal) =&gt; input === defaultVal)(val);\n}\n\nfunction test(func){\n    console.group(`test start :`+func.name);\n    console.log(func(undefined));\n    console.log(func(null));\n    console.log(func(1));\n    console.log(func(\"1\"));\n    console.log(func(0));\n    console.log(func({}));\n    console.log(func(function () { }));\n    console.groupEnd();\n}\ntest(isUndefined1);\ntest(isUndefined2);\ntest(isUndefined3);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<h3>isUndefined1:</h3>\n<p>Try to get a property of the input value, and check the error message if it exists. If the input value is undefined, the error message would be <em>Uncaught TypeError: Cannot read property 'b' of undefined</em>.</p>\n<h3>isUndefined2:</h3>\n<p>Convert the input value to a string to compare with <code>&quot;undefined&quot;</code> and ensure it's a negative value.</p>\n<h3>isUndefined3:</h3>\n<p>In JavaScript, an optional parameter works when the input value is exactly <code>undefined</code>.</p>\n"},{"owner":{"reputation":1135,"user_id":5278472,"user_type":"registered","accept_rate":92,"profile_image":"https://lh3.googleusercontent.com/-AvxjkimyfMs/AAAAAAAAAAI/AAAAAAAAUU0/Kc3LhlWF0fM/photo.jpg?sz=128","display_name":"Sarkis Arutiunian","link":"https://stackoverflow.com/users/5278472/sarkis-arutiunian"},"is_accepted":false,"score":4,"last_activity_date":1595635727,"last_edit_date":1595635727,"creation_date":1521651026,"answer_id":49412206,"question_id":27509,"content_license":"CC BY-SA 4.0","body":"<p>You can also use a Proxy. It will work with nested calls, but it will require one extra check:</p>\n<pre><code>function resolveUnknownProps(obj, resolveKey) {\n  const handler = {\n    get(target, key) {\n      if (\n        target[key] !== null &amp;&amp;\n        typeof target[key] === 'object'\n      ) {\n        return resolveUnknownProps(target[key], resolveKey);\n      } else if (!target[key]) {\n        return resolveUnknownProps({ [resolveKey]: true }, resolveKey);\n      }\n\n      return target[key];\n    },\n  };\n\n  return new Proxy(obj, handler);\n}\n\nconst user = {}\n\nconsole.log(resolveUnknownProps(user, 'isUndefined').personalInfo.name.something.else); // { isUndefined: true }\n</code></pre>\n<p>So you will use it like:</p>\n<pre><code>const { isUndefined } = resolveUnknownProps(user, 'isUndefined').personalInfo.name.something.else;\nif (!isUndefined) {\n  // Do something\n}\n</code></pre>\n"},{"owner":{"reputation":3295,"user_id":3127828,"user_type":"registered","accept_rate":66,"profile_image":"https://i.stack.imgur.com/G6O3V.jpg?s=128&g=1","display_name":"lzl124631x","link":"https://stackoverflow.com/users/3127828/lzl124631x"},"is_accepted":false,"score":4,"last_activity_date":1595635651,"last_edit_date":1595635651,"creation_date":1452750233,"answer_id":34782448,"question_id":27509,"content_license":"CC BY-SA 4.0","body":"<p>From lodash.js.</p>\n<pre><code>var undefined;\nfunction isUndefined(value) {\n  return value === undefined;\n}\n</code></pre>\n<p>It creates a <em>local</em> variable named <code>undefined</code> which is initialized with the default value -- the real <code>undefined</code>, then compares <code>value</code> with the variable <code>undefined</code>.</p>\n<hr />\n<p>Update 9/9/2019</p>\n<p>I found Lodash updated its implementation. See <a href=\"https://github.com/lodash/lodash/issues/4041\" rel=\"nofollow noreferrer\">my issue</a> and <a href=\"https://github.com/lodash/lodash/blob/4ea8c2ec249be046a0f4ae32539d652194caf74f/isUndefined.js#L17\" rel=\"nofollow noreferrer\">the code</a>.</p>\n<p>To be bullet-proof, simply use:</p>\n<pre><code>function isUndefined(value) {\n  return value === void 0;\n}\n</code></pre>\n"},{"owner":{"reputation":741,"user_id":1289868,"user_type":"registered","accept_rate":88,"profile_image":"https://i.stack.imgur.com/z1XmS.png?s=128&g=1","display_name":"raskalbass","link":"https://stackoverflow.com/users/1289868/raskalbass"},"is_accepted":false,"score":2,"last_activity_date":1595635537,"last_edit_date":1595635537,"creation_date":1402920957,"answer_id":24243518,"question_id":27509,"content_license":"CC BY-SA 4.0","body":"<p>Also, the same things can be written shorter:</p>\n<pre><code>if (!variable){\n    // Do it if the variable is undefined\n}\n</code></pre>\n<p>or</p>\n<pre><code>if (variable){\n    // Do it if the variable is defined\n}\n</code></pre>\n"},{"owner":{"reputation":2852,"user_id":3015469,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/887bd1b66bacf48b51de3f9197c44d32?s=128&d=identicon&r=PG","display_name":"IliasT","link":"https://stackoverflow.com/users/3015469/iliast"},"is_accepted":false,"score":2,"last_activity_date":1595635399,"last_edit_date":1595635399,"creation_date":1497485790,"answer_id":44556602,"question_id":27509,"content_license":"CC BY-SA 4.0","body":"<p>I'm assuming you're going to also want to check for it being <em>either</em> <code>undefined</code> or <code>null</code>. If so, I suggest:</p>\n<p><code>myVar == null</code></p>\n<p>This is one of the only times a <strong>double equals</strong> is very helpful as it will evaluate to <code>true</code> when <code>myVar</code> is <code>undefined</code> or <code>null</code>, but it will evaluate to <code>false</code> when it is other falsey values such as <code>0</code>, <code>false</code>, <code>''</code>, and <code>NaN</code>.</p>\n<p>This the actual <a href=\"https://github.com/lodash/lodash/blob/4.17.4/lodash.js#L11987\" rel=\"nofollow noreferrer\">the source code</a> for Lodash's <a href=\"https://lodash.com/docs/4.17.4#isNil\" rel=\"nofollow noreferrer\"><code>isNil</code></a> method.</p>\n"},{"owner":{"reputation":6974,"user_id":7600492,"user_type":"registered","profile_image":"https://i.stack.imgur.com/x0pCp.jpg?s=128&g=1","display_name":"Aliaksandr Sushkevich","link":"https://stackoverflow.com/users/7600492/aliaksandr-sushkevich"},"is_accepted":false,"score":1,"last_activity_date":1595635215,"last_edit_date":1595635215,"creation_date":1523099775,"answer_id":49706807,"question_id":27509,"content_license":"CC BY-SA 4.0","body":"<p>There are a few little helpers in the <a href=\"https://lodash.com/\" rel=\"nofollow noreferrer\">Lodash</a> library:</p>\n<p><a href=\"https://lodash.com/docs/4.17.5#isUndefined\" rel=\"nofollow noreferrer\">isUndefined</a> - to check if <em>value</em> is <code>undefined</code>.</p>\n<pre><code>_.isUndefined(undefined) // =&gt; true\n_.isUndefined(null) // =&gt; false\n</code></pre>\n<p><a href=\"https://lodash.com/docs/4.17.5#has\" rel=\"nofollow noreferrer\">has</a> - to check if object contains a property</p>\n<pre><code>const object = { 'a': { 'b': 2 } }\n\n_.has(object, 'a.b') // =&gt; true\n_.has(object, 'a.c') // =&gt; false\n</code></pre>\n"},{"owner":{"reputation":3798,"user_id":2295484,"user_type":"registered","accept_rate":90,"profile_image":"https://i.stack.imgur.com/BAohf.png?s=128&g=1","display_name":"Krishnadas PC","link":"https://stackoverflow.com/users/2295484/krishnadas-pc"},"is_accepted":false,"score":1,"last_activity_date":1595635122,"last_edit_date":1595635122,"creation_date":1532347848,"answer_id":51478480,"question_id":27509,"content_license":"CC BY-SA 4.0","body":"<p>Introduced in <strong>ECMAScript 6</strong>, we can now deal with <code>undefined</code> in a new way using Proxies. It can be used to set a default value to any properties which doesn't exist so that we don't have to check each time whether it actually exists.</p>\n<pre><code>var handler = {\n  get: function(target, name) {\n    return name in target ? target[name] : 'N/A';\n  }\n};\n\nvar p = new Proxy({}, handler);\np.name = 'Kevin';\nconsole.log('Name: ' +p.name, ', Age: '+p.age, ', Gender: '+p.gender)\n</code></pre>\n<p>Will output the below text without getting any undefined.</p>\n<pre><code>Name: Kevin , Age: N/A , Gender: N/A\n</code></pre>\n"},{"owner":{"reputation":886,"user_id":10326132,"user_type":"registered","profile_image":"https://i.stack.imgur.com/DTHYd.png?s=128&g=1","display_name":"CodeDraken","link":"https://stackoverflow.com/users/10326132/codedraken"},"is_accepted":false,"score":1,"last_activity_date":1595635072,"last_edit_date":1595635072,"creation_date":1536668636,"answer_id":52275862,"question_id":27509,"content_license":"CC BY-SA 4.0","body":"<p>A simple way to check if a key exists is to use <code>in</code>:</p>\n<pre><code>if (key in obj) {\n  // Do something\n} else {\n  // Create key\n}\n\nconst obj = {\n  0: 'abc',\n  1: 'def'\n}\n\nconst hasZero = 0 in obj\n\nconsole.log(hasZero) // true\n</code></pre>\n"},{"owner":{"reputation":4376,"user_id":5896426,"user_type":"registered","profile_image":"https://graph.facebook.com/1666450823627269/picture?type=large","display_name":"Bekim Bacaj","link":"https://stackoverflow.com/users/5896426/bekim-bacaj"},"is_accepted":false,"score":0,"last_activity_date":1595634888,"last_edit_date":1595634888,"creation_date":1492714888,"answer_id":43527813,"question_id":27509,"content_license":"CC BY-SA 4.0","body":"<p>This is probably the only explicit form of determining if the existing property-name has an explicit and intended value of <code>undefined</code>; which is, nonetheless, a JavaScript type.</p>\n<pre><code>&quot;propertyName&quot; in containerObject &amp;&amp; &quot;&quot;+containerObject[&quot;propertyName&quot;] == &quot;undefined&quot;;\n&gt;&gt; true \\ false\n</code></pre>\n<p>This expression will only return <code>true</code> if the property name of the given context exists (truly) and only if its intended value is explicitly <code>undefined</code>.</p>\n<p>There will be no false positives like with empty or blank strings zeros nulls or empty arrays and alike. This does exactly that. Checks i.e., makes sure the property name exists (otherwise it would be a false positive), than it explicitly checks if its value is <code>undefined</code> e.g. of an undefined JavaScript type in it's string representation form (literally &quot;undefined&quot;) therefore <code>==</code> instead of <code>===</code> because no further conversion is possible. And this expression will only return true if both, that is all conditions are met. E.g. if the property-name doesn't exist, - it will return false. Which is the only correct return since nonexistent properties can't have values, not even an undefined one.</p>\n<p>Example:</p>\n<pre><code>containerObject = { propertyName: void &quot;anything&quot; }\n&gt;&gt; Object { propertyName: undefined }\n\n// Now the testing\n\n&quot;propertyName&quot; in containerObject &amp;&amp; &quot;&quot;+containerObject[&quot;propertyName&quot;] == &quot;undefined&quot;;\n&gt;&gt; true\n\n/* Which makes sure that nonexistent property will not return a false positive\n * unless it is previously defined  */\n\n&quot;foo&quot; in containerObject &amp;&amp; &quot;&quot;+containerObject[&quot;foo&quot;] == &quot;undefined&quot;;\n&gt;&gt; false\n</code></pre>\n"},{"owner":{"reputation":136,"user_id":8618959,"user_type":"registered","accept_rate":0,"profile_image":"https://lh5.googleusercontent.com/-cYiCwYXn5sE/AAAAAAAAAAI/AAAAAAAAATc/yTSFvwPtP8I/photo.jpg?sz=128","display_name":"Aditya Vashishtha","link":"https://stackoverflow.com/users/8618959/aditya-vashishtha"},"is_accepted":false,"score":0,"last_activity_date":1595634749,"last_edit_date":1595634749,"creation_date":1520446525,"answer_id":49158713,"question_id":27509,"content_license":"CC BY-SA 4.0","body":"<p>You can use the JavaScript object function like this:</p>\n<pre><code>var ojb ={\n    age: 12\n}\n\nif(ojb.hasOwnProperty('name')){\n    console.log('property exists and is not undefined');\n}\n</code></pre>\n<p>The above method returns <code>true</code> if it got that property or the property is not undefined.</p>\n"},{"owner":{"reputation":51213,"user_id":860099,"user_type":"registered","accept_rate":72,"profile_image":"https://i.stack.imgur.com/125k3.jpg?s=128&g=1","display_name":"Kamil Kiełczewski","link":"https://stackoverflow.com/users/860099/kamil-kie%c5%82czewski"},"is_accepted":false,"score":0,"last_activity_date":1595634362,"last_edit_date":1595634362,"creation_date":1595356957,"answer_id":63021093,"question_id":27509,"content_license":"CC BY-SA 4.0","body":"<h1>Review</h1>\n<p>A lot of the given answers give a wrong result because they do not distinguish between the case when an object property does not exist and the case when a property has value <code>undefined</code>. Here is <strong>proof</strong> for most popular solutions:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>let obj = {\n  a: 666,\n  u: undefined // The 'u' property has value 'undefined'\n               // The 'x' property does not exist\n}\n\nconsole.log('&gt;&gt;&gt; good results:');\nconsole.log('A', \"u\" in obj, \"x\" in obj);\nconsole.log('B', obj.hasOwnProperty(\"u\"),      obj.hasOwnProperty(\"x\"));\n\nconsole.log('\\n&gt;&gt;&gt; bad results:');\nconsole.log('C', obj.u === undefined,          obj.x === undefined);\nconsole.log('D', obj.u == undefined,           obj.x == undefined);\nconsole.log('E', obj[\"u\"] === undefined,       obj[\"x\"] === undefined);\nconsole.log('F', obj[\"u\"] == undefined,        obj[\"x\"] == undefined);\nconsole.log('G', !obj.u,                      !obj.x);\nconsole.log('H', typeof obj.u === 'undefined', typeof obj.x === 'undefined');</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"owner":{"reputation":36008,"user_id":353337,"user_type":"registered","accept_rate":75,"profile_image":"https://www.gravatar.com/avatar/500a1e2e864ae08f386afde2cd21add0?s=128&d=identicon&r=PG","display_name":"Nico Schl&#246;mer","link":"https://stackoverflow.com/users/353337/nico-schl%c3%b6mer"},"is_accepted":false,"score":4,"last_activity_date":1594320070,"last_edit_date":1594320070,"creation_date":1594316103,"answer_id":62820532,"question_id":38987,"content_license":"CC BY-SA 4.0","body":"<p>I benchmarked the suggested with <a href=\"https://github.com/nschloe/perfplot\" rel=\"nofollow noreferrer\">perfplot</a> and found that the good old</p>\n<pre class=\"lang-py prettyprint-override\"><code>temp = x.copy()\ntemp.update(y)\n</code></pre>\n<p>is the fastest solution together with the new</p>\n<pre><code>x | y\n</code></pre>\n<p><a href=\"https://i.stack.imgur.com/5lk6f.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/5lk6f.png\" alt=\"enter image description here\" /></a></p>\n<hr />\n<p>Code to reproduce the plot:</p>\n<pre class=\"lang-py prettyprint-override\"><code>from collections import ChainMap\nfrom itertools import chain\nimport perfplot\n\n\ndef setup(n):\n    x = dict(zip(range(n), range(n)))\n    y = dict(zip(range(n, 2 * n), range(n, 2 * n)))\n    return x, y\n\n\ndef copy_update(data):\n    x, y = data\n    temp = x.copy()\n    temp.update(y)\n    return temp\n\n\ndef add_items(data):\n    x, y = data\n    return dict(list(x.items()) + list(y.items()))\n\n\ndef curly_star(data):\n    x, y = data\n    return {**x, **y}\n\n\ndef chain_map(data):\n    x, y = data\n    return dict(ChainMap({}, y, x))\n\n\ndef itertools_chain(data):\n    x, y = data\n    return dict(chain(x.items(), y.items()))\n\n\ndef python39_concat(data):\n    x, y = data\n    return x | y\n\n\nperfplot.show(\n    setup=setup,\n    kernels=[\n        copy_update,\n        add_items,\n        curly_star,\n        chain_map,\n        itertools_chain,\n        python39_concat,\n    ],\n    labels=[\n        &quot;copy_update&quot;,\n        &quot;dict(list(x.items()) + list(y.items()))&quot;,\n        &quot;{**x, **y}&quot;,\n        &quot;chain_map&quot;,\n        &quot;itertools.chain&quot;,\n        &quot;x | y&quot;,\n    ],\n    n_range=[2 ** k for k in range(15)],\n    xlabel=&quot;len(x), len(y)&quot;,\n    equality_check=None,\n)\n</code></pre>\n"},{"owner":{"reputation":3538,"user_id":850018,"user_type":"registered","accept_rate":86,"profile_image":"https://www.gravatar.com/avatar/258f18621477cf95a3639ca6de2bf651?s=128&d=identicon&r=PG","display_name":"thiruvenkadam","link":"https://stackoverflow.com/users/850018/thiruvenkadam"},"is_accepted":false,"score":1,"last_activity_date":1594316166,"last_edit_date":1594316166,"creation_date":1386230525,"answer_id":20394520,"question_id":38987,"content_license":"CC BY-SA 4.0","body":"<p>I have a solution which is not specified here</p>\n<pre class=\"lang-py prettyprint-override\"><code>z = {}\nz.update(x) or z.update(y)\n</code></pre>\n<p>This will not update x as well as y. Performance? I don't think it will be terribly slow.</p>\n"},{"owner":{"reputation":500,"user_id":3528282,"user_type":"registered","profile_image":"https://i.stack.imgur.com/5cvm3.jpg?s=128&g=1","display_name":"Robin Hossain","link":"https://stackoverflow.com/users/3528282/robin-hossain"},"is_accepted":false,"score":0,"last_activity_date":1591640158,"last_edit_date":1591640158,"creation_date":1583225036,"answer_id":60503227,"question_id":336859,"content_license":"CC BY-SA 4.0","body":"<p>The <code>var functionOne = function() {}</code> defines at run-time and the <code>function functionTwo() {}</code> defines at parse-time.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>// Run-Time function declaration \nfunctionOne(); // Calling functionOne function here will give an Error\nvar functionOne = function () {\n  // Some code\n};\n\n// Parse-Time function declaration \nfunctionTwo(); // Calling functionTwo function will not give an Error\nfunction functionTwo() {\n  // Some code...\n}\n</code></pre>\n\n<p>The explanation between Run-time vs Parse-time\n<a href=\"http://khaidoan.wikidot.com/javascript-difference-between-runtime-and-parse-time\" rel=\"nofollow noreferrer\">javascript run-time vs parse-time</a></p>\n"},{"owner":{"reputation":151,"user_id":2848816,"user_type":"registered","profile_image":"https://i.stack.imgur.com/dHwy6.jpg?s=128&g=1","display_name":"Ahmed Khashaba","link":"https://stackoverflow.com/users/2848816/ahmed-khashaba"},"is_accepted":false,"score":1,"last_activity_date":1590423102,"creation_date":1590423102,"answer_id":62006406,"question_id":500431,"content_license":"CC BY-SA 4.0","body":"<p>I really like the accepted answer but I want to add this:</p>\n\n<p><strong>Scope collects and maintains a look-up list of all the declared identifiers (variables), and enforces a strict set of rules as to how these are accessible to currently executing code.</strong> </p>\n\n<p>Scope is a set of rules for looking up variables by their identifier name.</p>\n\n<ul>\n<li>If a variable cannot be found in the immediate scope, Engine consults the next outer containing scope, continuing until is found or until the outermost (a.k.a., global) scope has been reached. </li>\n<li>Is the set of rules that determines where and how a variable (identifier) can be looked up. This look-up may be for the purposes of assigning to the variable, which is an LHS (left-hand-side) reference, or it may be for the purposes of retrieving its value, which is an RHS (righthand-side) reference. </li>\n<li>LHS references result from assignment operations. Scope-related assignments can occur either with the = operator or by passing arguments to (assign to) function parameters.</li>\n<li>The JavaScript engine first compiles code before it executes, and in so doing, it splits up statements like var a = 2; into two separate steps: 1st. First, var a to declare it in that scope. This is performed at the beginning, before code execution. 2nd. Later, a = 2 to look up the variable (LHS reference) and assign to it if found.</li>\n<li>Both LHS and RHS reference look-ups start at the currently executing scope, and if need be (that is, they don’t find what they’re looking for there), they work their way up the nested scope, one scope (floor) at a time, looking for the identifier, until they get to the global (top floor) and stop, and either find it, or don’t. Unfulfilled RHS references result in ReferenceError being thrown. Unfulfilled LHS references result in an automatic, implicitly created global of that name (if not in Strict Mode), or a ReferenceError (if in Strict Mode).</li>\n<li>scope consists of a series of “bubbles” that each act as a container or bucket, in which identifiers (variables, functions) are declared. These bubbles nest neatly inside each other, and this nesting is defined at author time.</li>\n</ul>\n"},{"owner":{"user_type":"does_not_exist","display_name":"Erwin"},"is_accepted":true,"score":2785,"last_activity_date":1590105076,"last_edit_date":1590105076,"creation_date":1231244861,"answer_id":416327,"question_id":27509,"content_license":"CC BY-SA 4.0","body":"<p>The usual way to check if the value of a property is the special value <code>undefined</code>, is:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>if(o.myProperty === undefined) {\n  alert(\"myProperty value is the special value `undefined`\");\n}\n</code></pre>\n\n<p>To check if an object does not actually have such a property, and will therefore return <code>undefined</code> by default when you try and access it:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>if(!o.hasOwnProperty('myProperty')) {\n  alert(\"myProperty does not exist\");\n}\n</code></pre>\n\n<p>To check if the value associated with an identifier is the special value <code>undefined</code>, <em>or</em> if that identifier has not been declared. Note: this method is the only way of referring to an <strong>undeclared</strong> (note: different from having a value of <code>undefined</code>) identifier without an early error:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>if(typeof myVariable === 'undefined') {\n  alert('myVariable is either the special value `undefined`, or it has not been declared');\n}\n</code></pre>\n\n<p>In versions of JavaScript prior to ECMAScript 5, the property named \"undefined\" on the global object was writeable, and therefore a simple check <code>foo === undefined</code> might behave unexpectedly if it had accidentally been redefined. In modern JavaScript, the property is read-only.</p>\n\n<p>However, in modern JavaScript, \"undefined\" is not a keyword, and so variables inside functions can be named \"undefined\" and shadow the global property. </p>\n\n<p>If you are worried about this (unlikely) edge case, you can use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void\" rel=\"noreferrer\">the void operator</a> to get at the special <code>undefined</code> value itself:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>if(myVariable === void 0) {\n  alert(\"myVariable is the special value `undefined`\");\n}\n</code></pre>\n"},{"owner":{"reputation":55,"user_id":13571465,"user_type":"registered","profile_image":"https://i.stack.imgur.com/yyCTO.png?s=128&g=1","display_name":"Dangerousgame","link":"https://stackoverflow.com/users/13571465/dangerousgame"},"is_accepted":false,"score":-4,"last_activity_date":1589878901,"creation_date":1589878901,"answer_id":61887209,"question_id":950087,"content_license":"CC BY-SA 4.0","body":"<p>You shall use this:</p>\n\n<pre><code>&lt;script src=\"your_file.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>Easy!</p>\n"},{"owner":{"reputation":6664,"user_id":852240,"user_type":"registered","accept_rate":93,"profile_image":"https://www.gravatar.com/avatar/25c7de360f08fe269437a0f22fd24549?s=128&d=identicon&r=PG","display_name":"Bilal Syed Hussain","link":"https://stackoverflow.com/users/852240/bilal-syed-hussain"},"is_accepted":false,"score":84,"last_activity_date":1588540615,"last_edit_date":1588540615,"creation_date":1424986072,"answer_id":28753078,"question_id":38987,"content_license":"CC BY-SA 4.0","body":"<p>Python 3.5 (PEP 448) allows a nicer syntax option:</p>\n\n<pre><code>x = {'a': 1, 'b': 1}\ny = {'a': 2, 'c': 2}\nfinal = {**x, **y} \nfinal\n# {'a': 2, 'b': 1, 'c': 2}\n</code></pre>\n\n<p>Or even </p>\n\n<pre><code>final = {'a': 1, 'b': 1, **x, **y}\n</code></pre>\n\n<p>In Python 3.9 you also use | and |= with the below example from PEP 584</p>\n\n<pre><code>d = {'spam': 1, 'eggs': 2, 'cheese': 3}\ne = {'cheese': 'cheddar', 'aardvark': 'Ethel'}\nd | e\n# {'spam': 1, 'eggs': 2, 'cheese': 'cheddar', 'aardvark': 'Ethel'}\n</code></pre>\n"},{"owner":{"reputation":294103,"user_id":24181,"user_type":"registered","accept_rate":77,"profile_image":"https://www.gravatar.com/avatar/8438e7bf53378150813b3dfec7f22232?s=128&d=identicon&r=PG","display_name":"Greg","link":"https://stackoverflow.com/users/24181/greg"},"is_accepted":true,"score":5246,"last_activity_date":1587655987,"last_edit_date":1587655987,"creation_date":1228304262,"answer_id":336868,"question_id":336859,"content_license":"CC BY-SA 4.0","body":"<p>The difference is that <code>functionOne</code> is a function expression and so only defined when that line is reached, whereas <code>functionTwo</code> is a function declaration and is defined as soon as its surrounding function or script is executed (due to <a href=\"http://adripofjavascript.com/blog/drips/variable-and-function-hoisting.html\" rel=\"noreferrer\">hoisting</a>).  </p>\n\n<p>For example, a function expression:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>// TypeError: functionOne is not a function\r\nfunctionOne();\r\n\r\nvar functionOne = function() {\r\n  console.log(\"Hello!\");\r\n};</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>And, a function declaration:   </p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>// Outputs: \"Hello!\"\r\nfunctionTwo();\r\n\r\nfunction functionTwo() {\r\n  console.log(\"Hello!\");\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Historically, function declarations defined within blocks were handled inconsistently between browsers. Strict mode (introduced in ES5) resolved this by scoping function declarations to their enclosing block.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>'use strict';    \r\n{ // note this block!\r\n  function functionThree() {\r\n    console.log(\"Hello!\");\r\n  }\r\n}\r\nfunctionThree(); // ReferenceError</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"owner":{"reputation":5610,"user_id":4934640,"user_type":"registered","accept_rate":88,"profile_image":"https://www.gravatar.com/avatar/2f69527ae459cbbda0ab5c2e08686a50?s=128&d=identicon&r=PG&f=1","display_name":"user","link":"https://stackoverflow.com/users/4934640/user"},"is_accepted":false,"score":0,"last_activity_date":1587410544,"last_edit_date":1587410544,"creation_date":1587410159,"answer_id":61330269,"question_id":950087,"content_license":"CC BY-SA 4.0","body":"<p>You can also use <code>gulp</code>, <code>gulp-concat</code>, <code>gulp-typescript</code> with <code>/// &lt;reference path=</code> includes:</p>\n\n<p><strong>packages.json</strong></p>\n\n<pre class=\"lang-js prettyprint-override\"><code>{\n  \"scripts\": {\n    \"gulp\": \"gulp main\"\n  },\n  \"dependencies\": {\n    \"@types/gulp\": \"^4.0.6\",\n    \"@types/gulp-concat\",\n    \"@types/gulp-typescript\",\n    \"gulp\": \"^4.0.2\",\n    \"gulp-concat\": \"^2.6.1\",\n    \"gulp-resolve-dependencies\": \"^3.0.1\",\n    \"gulp-typescript\": \"^6.0.0-alpha.1\",\n    \"typescript\": \"^3.7.3\"\n  }\n}\n</code></pre>\n\n<p><strong>src/someimport.ts</strong></p>\n\n<pre class=\"lang-js prettyprint-override\"><code>class SomeClass {\n    delay: number;\n}\n</code></pre>\n\n<p><strong>src/main.ts</strong></p>\n\n<pre class=\"lang-js prettyprint-override\"><code>/// &lt;reference path=\"./someimport.ts\" /&gt;\n\nsomeclass = new SomeClass();\nsomeclass.delay = 1;\n</code></pre>\n\n<p>This <code>main</code> gulp task (on <code>gulpfile.js</code>) targets only the <code>src/main.js</code> file, resolving all its <code>/// &lt;reference path=...</code> include references. These includes are know as <code>Triple-Slash Directives</code> and they are used only for transpilers tools to combine files. In our case, they are used explicitly by <code>.pipe(resolveDependencies({</code> and by typescript itself when checking the file for missing types, variables, etc.</p>\n\n<ol>\n<li><a href=\"https://www.typescriptlang.org/docs/handbook/triple-slash-directives.html\" rel=\"nofollow noreferrer\">https://www.typescriptlang.org/docs/handbook/triple-slash-directives.html</a></li>\n<li><a href=\"https://stackoverflow.com/questions/22684802/when-do-i-need-a-triple-slash-reference\">When do I need a triple slash reference?</a></li>\n</ol>\n\n<p>Refer to <a href=\"https://github.com/ivogabe/gulp-typescript#api-overview\" rel=\"nofollow noreferrer\">https://github.com/ivogabe/gulp-typescript#api-overview</a> if you would like to customize the <code>var tsProject = ts.createProject</code> call and not use a <code>tsconfig.json</code> file or override its parameters.</p>\n\n<p><strong>gulpfile.js</strong></p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var gulp = require(\"gulp\");\nvar concat = require('gulp-concat');\nvar resolveDependencies = require('gulp-resolve-dependencies');\n\nvar ts = require(\"gulp-typescript\");\nvar tsProject = ts.createProject(\"tsconfig.json\");\n\ngulp.task(\"main\", function() {\n  return gulp\n    .src([\"src/main.ts\"])\n    .pipe(resolveDependencies({\n      pattern: /^\\s*\\/\\/\\/\\s*&lt;\\s*reference\\s*path\\s*=\\s*(?:\"|')([^'\"\\n]+)/gm\n    }))\n    .on('error', function(err) {\n        console.log(err.message);\n    })\n    .pipe(tsProject())\n    .pipe(concat('main.js'))\n    .pipe(gulp.dest(\"build/\"));\n});\n</code></pre>\n\n<p>If you wold like to target all your type script project files instead of only <code>src/main.ts</code>, you can replace this:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>  return gulp\n    .src([\"src/main.ts\"])\n    .pipe(resolveDependencies({\n    ...\n// --&gt;\n  return tsProject\n    .src()\n    .pipe(resolveDependencies({\n    ...\n</code></pre>\n\n<p>If you do not want to use <code>typescript</code>, you can use this simplified <code>gulpfile.js</code> and remove all <code>typescript</code> includes from <code>package.json</code>:</p>\n\n<p><strong>gulpfile.js</strong></p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var gulp = require(\"gulp\");\nvar concat = require('gulp-concat');\nvar resolveDependencies = require('gulp-resolve-dependencies');\n\ngulp.task(\"main\", function() {\n  return gulp\n    .src([\"src/main.js\"])\n    .pipe(resolveDependencies({\n      pattern: /^\\s*\\/\\/\\/\\s*&lt;\\s*reference\\s*path\\s*=\\s*(?:\"|')([^'\"\\n]+)/gm\n    }))\n    .on('error', function(err) {\n        console.log(err.message);\n    })\n    .pipe(concat('main.js'))\n    .pipe(gulp.dest(\"build/\"));\n});\n</code></pre>\n\n<p><strong>packages.json</strong></p>\n\n<pre class=\"lang-js prettyprint-override\"><code>{\n  \"scripts\": {\n    \"gulp\": \"gulp main\"\n  },\n  \"dependencies\": {\n    \"gulp\": \"^4.0.2\",\n    \"gulp-concat\": \"^2.6.1\",\n    \"gulp-resolve-dependencies\": \"^3.0.1\"\n  }\n}\n</code></pre>\n\n<p>Then, after running the command <code>npm run gulp</code>, the file <code>build/main.js</code> is created with the following as its contents:</p>\n\n<p><strong>build/main.js</strong></p>\n\n<pre class=\"lang-js prettyprint-override\"><code>class SomeClass {\n}\n/// &lt;reference path=\"./someimport.ts\" /&gt;\nsomeclass = new SomeClass();\nsomeclass.delay = 1;\n</code></pre>\n\n<p>Which allows me to include it in the browser with the <code>script</code> tag, after serving the <code>build</code> directory files:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;script src=\"main.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;script type=\"text/javascript\"&gt;\n            console.log(someclass.delay);\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Related questions:</p>\n\n<ol>\n<li><a href=\"https://www.typescriptlang.org/docs/handbook/gulp.html\" rel=\"nofollow noreferrer\">https://www.typescriptlang.org/docs/handbook/gulp.html</a></li>\n<li><a href=\"https://stackoverflow.com/questions/36710768/can-i-use-the-typescript-without-requirejs\">Can I use the typescript without requireJS?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/52338233/gulp-simple-concatenation-of-main-file-that-requires-another-js-file\">Gulp simple concatenation of main file that requires another JS file</a></li>\n<li><a href=\"https://stackoverflow.com/questions/19059580/client-on-node-uncaught-referenceerror-require-is-not-defined\">Client on node: Uncaught ReferenceError: require is not defined</a></li>\n<li><a href=\"https://stackoverflow.com/questions/47318837/how-can-typescript-browser-node-modules-be-compiled-with-gulp\">How can typescript browser node modules be compiled with gulp?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/38381621/concatenate-files-using-babel\">Concatenate files using babel</a></li>\n<li><a href=\"https://stackoverflow.com/questions/7576001/how-to-require-commonjs-modules-in-the-browser\">How to require CommonJS modules in the browser?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/34438378/is-there-an-alternative-to-browserify\">Is there an alternative to Browserify?</a></li>\n</ol>\n"},{"owner":{"reputation":290823,"user_id":96100,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/f7b22b86b0da570ddb5d1d4923b0f4f4?s=128&d=identicon&r=PG","display_name":"Tim Down","link":"https://stackoverflow.com/users/96100/tim-down"},"is_accepted":false,"score":254,"last_activity_date":1586969100,"last_edit_date":1586969100,"creation_date":1280772311,"answer_id":3390468,"question_id":3390396,"content_license":"CC BY-SA 4.0","body":"<p><strong>2020 Update</strong></p>\n\n<p>One of my reasons for preferring a <code>typeof</code> check (namely, that <code>undefined</code> can be redefined) became irrelevant with the mass adoption of ECMAScript 5. The other, that you can use <code>typeof</code> to check the type of an undeclared variable, was always niche. Therefore, I'd now recommend using a direct comparison in most situations:</p>\n\n<pre><code>myVariable === undefined\n</code></pre>\n\n<p><strong>Original answer from 2010</strong></p>\n\n<p>Using <code>typeof</code> is my preference. It will work when the variable has never been declared, unlike any comparison with the <code>==</code> or <code>===</code> operators or type coercion using <code>if</code>. (<code>undefined</code>, unlike <code>null</code>, may also be redefined in ECMAScript 3 environments, making it unreliable for comparison, although nearly all common environments now are compliant with ECMAScript 5 or above).</p>\n\n<pre><code>if (typeof someUndeclaredVariable == \"undefined\") {\n    // Works\n}\n\nif (someUndeclaredVariable === undefined) { \n    // Throws an error\n}\n</code></pre>\n"},{"owner":{"reputation":2956,"user_id":3462681,"user_type":"registered","accept_rate":50,"profile_image":"https://www.gravatar.com/avatar/4739059ffcecfbd166bbaf9be7549237?s=128&d=identicon&r=PG&f=1","display_name":"Roushan","link":"https://stackoverflow.com/users/3462681/roushan"},"is_accepted":false,"score":5,"last_activity_date":1586420406,"creation_date":1586420406,"answer_id":61116810,"question_id":38987,"content_license":"CC BY-SA 4.0","body":"<p><strong>Python 3.9+ only</strong></p>\n\n<p>Merge (|) and update (|=) operators have been added to the built-in <code>dict</code> class.</p>\n\n<pre><code>&gt;&gt;&gt; d = {'spam': 1, 'eggs': 2, 'cheese': 3}\n&gt;&gt;&gt; e = {'cheese': 'cheddar', 'aardvark': 'Ethel'}\n&gt;&gt;&gt; d | e\n{'spam': 1, 'eggs': 2, 'cheese': 'cheddar', 'aardvark': 'Ethel'}\n</code></pre>\n\n<p>The augmented assignment version operates in-place:</p>\n\n<pre><code>&gt;&gt;&gt; d |= e\n&gt;&gt;&gt; d\n{'spam': 1, 'eggs': 2, 'cheese': 'cheddar', 'aardvark': 'Ethel'}\n</code></pre>\n\n<p>See <a href=\"https://www.python.org/dev/peps/pep-0584/\" rel=\"noreferrer\">PEP 584</a></p>\n"},{"owner":{"reputation":421,"user_id":5859207,"user_type":"registered","profile_image":"https://graph.facebook.com/472001523009481/picture?type=large","display_name":"Muhammad Waqas","link":"https://stackoverflow.com/users/5859207/muhammad-waqas"},"is_accepted":false,"score":3,"last_activity_date":1585436000,"creation_date":1585436000,"answer_id":60908003,"question_id":9329446,"content_license":"CC BY-SA 4.0","body":"<p>Suppose we have a array of subjects:</p>\n\n<pre><code>  let ddl = new Array();\n    if (subjects) {\n      subjects.forEach(function (s) {ddl.push({\"id\": s.id,\"label\": s.name});});\n    }\n</code></pre>\n"},{"owner":{"reputation":18647,"user_id":8059459,"user_type":"registered","accept_rate":90,"profile_image":"https://www.gravatar.com/avatar/9f0fc0fd607fc44a4597cacb7f034ba6?s=128&d=identicon&r=PG&f=1","display_name":"Willem van der Veen","link":"https://stackoverflow.com/users/8059459/willem-van-der-veen"},"is_accepted":false,"score":6,"last_activity_date":1585419118,"last_edit_date":1585419118,"creation_date":1536393357,"answer_id":52233252,"question_id":9329446,"content_license":"CC BY-SA 4.0","body":"<h2>Summary:</h2>\n\n<p>When iterating over an array, we often want to accomplish one of the following goals:</p>\n\n<ol>\n<li><p>We want to iterate over the array and create a new array:</p>\n\n<p><code>Array.prototype.map</code> <br><br></p></li>\n<li><p>We want to iterate over the array and don't create a new array:</p>\n\n<p><code>Array.prototype.forEach</code> <br><br>\n<code>for..of</code> <strong>loop</strong></p></li>\n</ol>\n\n<p>In JavaScript, there are many ways of accomplishing both of these goals. However, some are more convenient than others. Below you can find some commonly used methods (the most convenient IMO) to accomplish array iteration in JavaScript.</p>\n\n<h2>Creating new array: <code>Map</code></h2>\n\n<p><code>map()</code> is a function located on <code>Array.prototype</code> which can transform every element of an array and then returns a <strong>new</strong> array. <code>map()</code> takes as an argument a callback function and works in the following manner:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>let arr = [1, 2, 3, 4, 5];\r\n\r\nlet newArr = arr.map((element, index, array) =&gt; {\r\n  return element * 2;\r\n})\r\n\r\nconsole.log(arr);\r\nconsole.log(newArr);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>The callback which we have passed into <code>map()</code> as an argument gets executed for every element. Then an array gets returned which has the same length as the original array. In this new array element is transformed by the callback function passed in as an argument to <code>map()</code>.</p>\n\n<p>The distinct difference between <code>map</code> and another loop mechanism like <code>forEach</code> and a <code>for..of</code> loop is that <strong><code>map</code> returns a new array and leaves the old array intact</strong> (except if you explicitly manipulate it with thinks like <code>splice</code>).</p>\n\n<p>Also, note that the <code>map</code> function's callback provides the index number of the current iteration as a second argument. Furthermore, does the third argument provide the array on which <code>map</code> was called? Sometimes these properties can be very useful.</p>\n\n<h2>Loop using <code>forEach</code></h2>\n\n<p><code>forEach</code> is a function which is located on <code>Array.prototype</code> which takes a callback function as an argument. It then executes this callback function for every element in the array. In contrast to the <code>map()</code> function, the forEach function returns nothing (<code>undefined</code>). For example:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>let arr = [1, 2, 3, 4, 5];\r\n\r\narr.forEach((element, index, array) =&gt; {\r\n\r\n  console.log(element * 2);\r\n\r\n  if (index === 4) {\r\n    console.log(array)\r\n  }\r\n  // index, and oldArray are provided as 2nd and 3th argument by the callback\r\n\r\n})\r\n\r\nconsole.log(arr);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Just like the <code>map</code> function, the <code>forEach</code> callback provides the index number of the current iteration as a second argument. Also, does the third argument provide the array on which <code>forEach</code> was called?</p>\n\n<h2>Loop through elements using <code>for..of</code></h2>\n\n<p>The <code>for..of</code> loop loops through every element of an array (or any other iterable object). It works in the following manner:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>let arr = [1, 2, 3, 4, 5];\r\n\r\nfor(let element of arr) {\r\n  console.log(element * 2);\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>In the above example, <code>element</code> stands for an array element and <code>arr</code> is the array which we want to loop. Note that the name <code>element</code> is arbitrary, and we could have picked any other name like 'el' or something more declarative when this is applicable.</p>\n\n<p>Don't confuse the <code>for..in</code> loop with the <code>for..of</code> loop. <code>for..in</code> will loop through all enumerable properties of the array whereas the <code>for..of</code> loop will only loop through the array elements. For example:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>let arr = [1, 2, 3, 4, 5];\r\n\r\narr.foo = 'foo';\r\n\r\nfor(let element of arr) {\r\n  console.log(element);\r\n}\r\n\r\nfor(let element in arr) {\r\n  console.log(element);\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"owner":{"reputation":626,"user_id":2830246,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/1be6efa0e44df028a894eed605ae7a56?s=128&d=identicon&r=PG&f=1","display_name":"Volkan Se&#231;kin Akbayır","link":"https://stackoverflow.com/users/2830246/volkan-se%c3%a7kin-akbay%c4%b1r"},"is_accepted":false,"score":16,"last_activity_date":1585411701,"last_edit_date":1585411701,"creation_date":1440746841,"answer_id":32265541,"question_id":9329446,"content_license":"CC BY-SA 4.0","body":"<p>I also would like to add this as a composition of a reverse loop and an answer above for someone that would like this syntax too.</p>\n\n<pre><code>var foo = [object,object,object];\nfor (var i = foo.length, item; item = foo[--i];) {\n    console.log(item);\n}\n</code></pre>\n\n<p><strong>Pros:</strong></p>\n\n<p>The benefit for this: You have the reference already in the first like that won't need to be declared later with another line. It is handy when looping trough the object array.</p>\n\n<p><strong>Cons:</strong></p>\n\n<p>This will break whenever the reference is false - falsey (undefined, etc.). It can be used as an advantage though. However, it would make it a little bit harder to read. And also depending on the browser it can be \"not\" optimized to work faster than the original one.</p>\n"},{"owner":{"reputation":511492,"user_id":9951,"user_type":"registered","accept_rate":78,"profile_image":"https://www.gravatar.com/avatar/1449ec95d8c114dbca53136cc8194b61?s=128&d=identicon&r=PG&f=1","display_name":"e-satis","link":"https://stackoverflow.com/users/9951/e-satis"},"is_accepted":true,"score":4814,"last_activity_date":1584781755,"last_edit_date":1584781755,"creation_date":1244117608,"answer_id":950146,"question_id":950087,"content_license":"CC BY-SA 4.0","body":"<p>The old versions of JavaScript had no import, include, or require, so many different approaches to this problem have been developed.</p>\n\n<p>But since 2015 (ES6), JavaScript has had the <a href=\"http://exploringjs.com/es6/ch_modules.html\" rel=\"noreferrer\">ES6 modules</a> standard to import modules in Node.js, which is also supported by <a href=\"https://caniuse.com/#feat=es6-module\" rel=\"noreferrer\">most modern browsers</a>.</p>\n\n<p>For compatibility with older browsers, build tools like <a href=\"https://webpack.github.io/\" rel=\"noreferrer\">Webpack</a> and <a href=\"https://rollupjs.org/\" rel=\"noreferrer\">Rollup</a> and/or transpilation tools like <a href=\"https://babeljs.io/\" rel=\"noreferrer\">Babel</a> can be used.</p>\n\n<h1>ES6 Modules</h1>\n\n<p>ECMAScript (ES6) modules have been <a href=\"https://nodejs.org/api/esm.html\" rel=\"noreferrer\">supported in Node.js</a> since v8.5, with the <code>--experimental-modules</code> flag, and since at least Node.js v13.8.0 without the flag. To enable \"ESM\" (vs. Node.js's previous CommonJS-style module system [\"CJS\"]) you either use <code>\"type\": \"module\"</code> in <code>package.json</code> or give the files the extension <code>.mjs</code>. (Similarly, modules written with Node.js's previous CJS module can be named <code>.cjs</code> if your default is ESM.)</p>\n\n<p>Using <code>package.json</code>:</p>\n\n<pre class=\"lang-json prettyprint-override\"><code>{\n    \"type\": \"module\"\n}\n</code></pre>\n\n<p>Then <code>module.js</code>:</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>export function hello() {\n  return \"Hello\";\n}\n</code></pre>\n\n<p>Then <code>main.js</code>:</p>\n\n<pre><code>import { hello } from './module.js';\nlet val = hello();  // val is \"Hello\";\n</code></pre>\n\n<p>Using <code>.mjs</code>, you'd have <code>module.mjs</code>:</p>\n\n<pre><code>export function hello() {\n  return \"Hello\";\n}\n</code></pre>\n\n<p>Then <code>main.mjs</code>:</p>\n\n<pre><code>import { hello } from './module.mjs';\nlet val = hello();  // val is \"Hello\";\n</code></pre>\n\n<h2>ECMAScript modules in browsers</h2>\n\n<p>Browsers have had support for loading ECMAScript modules directly (no tools like Webpack required) <a href=\"https://jakearchibald.com/2017/es-modules-in-browsers/\" rel=\"noreferrer\">since</a> Safari 10.1, Chrome 61, Firefox 60, and Edge 16. Check the current support at <a href=\"https://caniuse.com/#feat=es6-module\" rel=\"noreferrer\">caniuse</a>. There is no need to use Node.js' <code>.mjs</code> extension; browsers completely ignore file extensions on modules/scripts.</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>&lt;script type=\"module\"&gt;\n  import { hello } from './hello.mjs'; // Or it could be simply `hello.js`\n  hello('world');\n&lt;/script&gt;\n</code></pre>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>// hello.mjs -- or it could be simply `hello.js`\nexport function hello(text) {\n  const div = document.createElement('div');\n  div.textContent = `Hello ${text}`;\n  document.body.appendChild(div);\n}\n</code></pre>\n\n<p>Read more at <a href=\"https://jakearchibald.com/2017/es-modules-in-browsers/\" rel=\"noreferrer\">https://jakearchibald.com/2017/es-modules-in-browsers/</a></p>\n\n<h3>Dynamic imports in browsers</h3>\n\n<p>Dynamic imports let the script load other scripts as needed:</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>&lt;script type=\"module\"&gt;\n  import('hello.mjs').then(module =&gt; {\n      module.hello('world');\n    });\n&lt;/script&gt;\n</code></pre>\n\n<p>Read more at <a href=\"https://developers.google.com/web/updates/2017/11/dynamic-import\" rel=\"noreferrer\">https://developers.google.com/web/updates/2017/11/dynamic-import</a></p>\n\n<h1>Node.js require</h1>\n\n<p>The older CJS module style, still widely used in Node.js, is the <a href=\"https://nodejs.org/api/modules.html\" rel=\"noreferrer\"><code>module.exports</code>/<code>require</code></a> system.</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>// mymodule.js\nmodule.exports = {\n   hello: function() {\n      return \"Hello\";\n   }\n}\n</code></pre>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>// server.js\nconst myModule = require('./mymodule');\nlet val = myModule.hello(); // val is \"Hello\"   \n</code></pre>\n\n<p>There are other ways for JavaScript to include external JavaScript contents in browsers that do not require preprocessing.</p>\n\n<h1>AJAX Loading</h1>\n\n<p>You could load an additional script with an AJAX call and then use <code>eval</code> to run it. This is the most straightforward way, but it is limited to your domain because of the JavaScript sandbox security model. Using <code>eval</code> also opens the door to bugs, hacks and security issues.</p>\n\n<h1>Fetch Loading</h1>\n\n<p>Like Dynamic Imports you can load one or many scripts with a <code>fetch</code> call using promises to control order of execution for script dependencies using the <a href=\"https://git.habd.as/jhabdas/fetch-inject\" rel=\"noreferrer\">Fetch Inject</a> library:</p>\n\n<pre><code>fetchInject([\n  'https://cdn.jsdelivr.net/momentjs/2.17.1/moment.min.js'\n]).then(() =&gt; {\n  console.log(`Finish in less than ${moment().endOf('year').fromNow(true)}`)\n})\n</code></pre>\n\n<h1>jQuery Loading</h1>\n\n<p>The <a href=\"http://jquery.com/\" rel=\"noreferrer\">jQuery</a> library provides loading functionality <a href=\"http://api.jquery.com/jQuery.getScript/\" rel=\"noreferrer\">in one line</a>:</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>$.getScript(\"my_lovely_script.js\", function() {\n   alert(\"Script loaded but not necessarily executed.\");\n});\n</code></pre>\n\n<h1>Dynamic Script Loading</h1>\n\n<p>You could add a script tag with the script URL into the HTML. To avoid the overhead of jQuery, this is an ideal solution.</p>\n\n<p>The script can even reside on a different server. Furthermore, the browser evaluates the code. The <code>&lt;script&gt;</code> tag can be injected into either the web page <code>&lt;head&gt;</code>, or inserted just before the closing <code>&lt;/body&gt;</code> tag.</p>\n\n<p>Here is an example of how this could work:</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>function dynamicallyLoadScript(url) {\n    var script = document.createElement(\"script\");  // create a script DOM node\n    script.src = url;  // set its src to the provided URL\n\n    document.head.appendChild(script);  // add it to the end of the head section of the page (could change 'head' to 'body' to add it to the end of the body section instead)\n}\n</code></pre>\n\n<p>This function will add a new <code>&lt;script&gt;</code> tag to the end of the head section of the page, where the <code>src</code> attribute is set to the URL which is given to the function as the first parameter.</p>\n\n<p>Both of these solutions are discussed and illustrated in <a href=\"http://unixpapa.com/js/dyna.html\" rel=\"noreferrer\">JavaScript Madness: Dynamic Script Loading</a>.</p>\n\n<h1>Detecting when the script has been executed</h1>\n\n<p>Now, there is a big issue you must know about. Doing that implies that <em>you remotely load the code</em>. Modern web browsers will load the file and keep executing your current script because they load everything asynchronously to improve performance. (This applies to both the jQuery method and the manual dynamic script loading method.)</p>\n\n<p>It means that if you use these tricks directly, <em>you won't be able to use your newly loaded code the next line after you asked it to be loaded</em>, because it will be still loading.</p>\n\n<p>For example: <code>my_lovely_script.js</code> contains <code>MySuperObject</code>:</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>var js = document.createElement(\"script\");\n\njs.type = \"text/javascript\";\njs.src = jsFilePath;\n\ndocument.body.appendChild(js);\n\nvar s = new MySuperObject();\n\nError : MySuperObject is undefined\n</code></pre>\n\n<p>Then you reload the page hitting <kbd>F5</kbd>. And it works! Confusing...</p>\n\n<p><strong>So what to do about it ?</strong></p>\n\n<p>Well, you can use the hack the author suggests in the link I gave you. In summary, for people in a hurry, he uses an event to run a callback function when the script is loaded. So you can put all the code using the remote library in the callback function. For example:</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>function loadScript(url, callback)\n{\n    // Adding the script tag to the head as suggested before\n    var head = document.head;\n    var script = document.createElement('script');\n    script.type = 'text/javascript';\n    script.src = url;\n\n    // Then bind the event to the callback function.\n    // There are several events for cross browser compatibility.\n    script.onreadystatechange = callback;\n    script.onload = callback;\n\n    // Fire the loading\n    head.appendChild(script);\n}\n</code></pre>\n\n<p>Then you write the code you want to use AFTER the script is loaded in a <a href=\"http://en.wikipedia.org/wiki/Anonymous_function\" rel=\"noreferrer\">lambda function</a>:</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>var myPrettyCode = function() {\n   // Here, do whatever you want\n};\n</code></pre>\n\n<p>Then you run all that:</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>loadScript(\"my_lovely_script.js\", myPrettyCode);\n</code></pre>\n\n<p>Note that the script may execute after the DOM has loaded, or before, depending on the browser and whether you included the line <code>script.async = false;</code>. There's a <a href=\"http://www.html5rocks.com/en/tutorials/speed/script-loading/\" rel=\"noreferrer\">great article on Javascript loading in general</a> which discusses this.</p>\n\n<h1>Source Code Merge/Preprocessing</h1>\n\n<p>As mentioned at the top of this answer, many developers use build/transpilation tool(s) like Parcel, Webpack, or Babel in their projects, allowing them to use upcoming JavaScript syntax, provide backward compatibility for older browsers, combine files, minify, perform code splitting etc.</p>\n"},{"owner":{"reputation":51213,"user_id":860099,"user_type":"registered","accept_rate":72,"profile_image":"https://i.stack.imgur.com/125k3.jpg?s=128&g=1","display_name":"Kamil Kiełczewski","link":"https://stackoverflow.com/users/860099/kamil-kie%c5%82czewski"},"is_accepted":false,"score":6,"last_activity_date":1583695054,"last_edit_date":1583695054,"creation_date":1576688998,"answer_id":59397020,"question_id":9329446,"content_license":"CC BY-SA 4.0","body":"<h2>Performance</h2>\n\n<p>Today (2019-12-18) I perform test on my <a href=\"https://en.wikipedia.org/wiki/MacOS_High_Sierra\" rel=\"nofollow noreferrer\">macOS v10.13.6</a> (High Sierra), on Chrome v 79.0, Safari v13.0.4 and Firefox v71.0 (64 bit) - conclusions about optimisation (and <em><a href=\"https://stackoverflow.com/questions/3470990/is-micro-optimization-worth-the-time/3471000#3471000\">micro-optimisation</a></em> which usually is not worth to introduce it to code because the benefit is small, but code complexity grows).</p>\n\n<ul>\n<li><p>It looks like the traditional <code>for i</code> (<strong>Aa</strong>) is a good choice to write fast code on all browsers.</p></li>\n<li><p>The other solutions, like <code>for-of</code> (<strong>Ad</strong>), all in group <strong>C.</strong>... are usually 2 - 10 (and more) times slower than <strong>Aa</strong>, but for small arrays it is ok to use it - for the sake of increase code clarity.</p></li>\n<li><p>The loops with array length cached in <code>n</code> (<strong>Ab, Bb, Be</strong>) are sometimes faster, sometimes not. Probably compilers automatically detect this situation and introduce caching. The speed differences between the cached and no-cached versions (<strong>Aa, Ba, Bd</strong>) are about ~1%, so it looks like introduce <code>n</code> is a <em><a href=\"https://stackoverflow.com/questions/3470990/is-micro-optimization-worth-the-time/3471000#3471000\">micro-optimisation</a></em>.</p></li>\n<li><p>The <code>i--</code> like solutions where the loop starts from the last array element (<strong>Ac, Bc</strong>) are usually ~30% slower than forward solutions - probably the reason is the way of <a href=\"https://stackoverflow.com/questions/1950878/c-for-loop-indexing-is-forward-indexing-faster-in-new-cpus\">CPU memory cache working</a> - forward memory reading is more optimal for CPU caching). <strong>Is recommended to NOT USE such solutions.</strong></p></li>\n</ul>\n\n<h2>Details</h2>\n\n<p>In tests we calculate the sum of array elements. I perform a test for small arrays (10 elements) and big arrays (1M elements) and divide them into three groups:</p>\n\n<ul>\n<li><strong>A</strong> - <code>for</code> tests</li>\n<li><strong>B</strong> - <code>while</code> tests</li>\n<li><strong>C</strong> - other/alternative methods</li>\n</ul>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\n//let arr = Array.from(Array(1000000), (x, i) =&gt; i%10);\r\n\r\nfunction Aa(a, s=0) {\r\n  for(let i=0; i&lt;a.length; i++) {\r\n    s += a[i];\r\n  }\r\n  console.log('Aa=', s);\r\n}\r\n\r\nfunction Ab(a, s=0) {\r\n  let n = a.length;\r\n  for(let i=0; i&lt;n; i++) {\r\n    s += a[i];\r\n  }\r\n  console.log('Ab=', s);\r\n}\r\n\r\nfunction Ac(a, s=0) {\r\n  for(let i=a.length; i--;) {\r\n    s += a[i];\r\n  }\r\n  console.log('Ac=', s);\r\n}\r\n\r\nfunction Ad(a, s=0) {\r\n  for(let x of a) {\r\n    s += x;\r\n  }\r\n  console.log('Ad=', s);\r\n}\r\n\r\nfunction Ae(a, s=0) {\r\n  for(let i in a) if (a.hasOwnProperty(i)) {\r\n    s += a[i];\r\n  }\r\n  console.log('Ae=', s);\r\n}\r\n\r\nfunction Ba(a, s=0) {\r\n  let i = -1;\r\n  while(++i &lt; a.length) {\r\n    s+= a[i];\r\n  }\r\n  console.log('Ba=', s);\r\n}\r\n\r\nfunction Bb(a, s=0) {\r\n  let i = -1;\r\n  let n = a.length;\r\n  while(++i &lt; n) {\r\n    s+= a[i];\r\n  }\r\n  console.log('Bb=', s);\r\n}\r\n\r\nfunction Bc(a, s=0) {\r\n  let i = a.length;\r\n  while(i--) {\r\n    s += a[i];\r\n  }\r\n  console.log('Bc=', s);\r\n}\r\n\r\nfunction Bd(a, s=0) {\r\n  let i = 0;\r\n  do {\r\n    s+= a[i]\r\n  } while (++i &lt; a.length);\r\n  console.log('Bd=', s);\r\n}\r\n\r\nfunction Be(a, s=0) {\r\n  let i = 0;\r\n  let n = a.length;\r\n  do {\r\n    s += a[i]\r\n  } while (++i &lt; n);\r\n  console.log('Be=', s);\r\n}\r\n\r\nfunction Bf(a, s=0) {\r\n  const it = a.values(); \r\n  let e;\r\n  while (!(e = it.next()).done) { \r\n    s+= e.value; \r\n  }\r\n  console.log('Bf=', s);\r\n}\r\n\r\nfunction Ca(a, s=0) {\r\n  a.map(x =&gt; { s+=x });\r\n  console.log('Ca=', s);\r\n}\r\n\r\nfunction Cb(a, s=0) {\r\n  a.forEach(x =&gt; { s+=x });\r\n  console.log('Cb=', s);\r\n}\r\n\r\nfunction Cc(a, s=0) {\r\n  a.every(x =&gt; (s += x, 1));\r\n  console.log('Cc=', s);\r\n}\r\n\r\nfunction Cd(a, s=0) {\r\n  a.filter(x =&gt; { s+=x });\r\n  console.log('Cd=',s);\r\n}\r\n\r\nfunction Ce(a, s=0) {\r\n  a.reduce((z, c) =&gt; { s+=c }, 0);\r\n  console.log('Ce=', s);\r\n}\r\n\r\nfunction Cf(a, s=0) {\r\n  a.reduceRight((z, c) =&gt; { s += c }, 0);\r\n  console.log('Cf=', s);\r\n}\r\n\r\nfunction Cg(a, s=0) {\r\n  a.some(x =&gt; { s += x } );\r\n  console.log('Cg=', s);\r\n}\r\n\r\nfunction Ch(a, s=0) {\r\n  Array.from(a, x=&gt; s += x);\r\n  console.log('Cc=', s);\r\n}\r\n\r\n\r\nAa(arr);\r\nAb(arr);\r\nAc(arr);\r\nAd(arr);\r\nAe(arr);\r\n\r\nBa(arr);\r\nBb(arr);\r\nBc(arr);\r\nBd(arr);\r\nBe(arr);\r\nBf(arr);\r\n\r\nCa(arr);\r\nCb(arr);\r\nCc(arr);\r\nCd(arr);\r\nCe(arr);\r\nCf(arr);\r\nCg(arr);\r\nCh(arr);</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;p style=\"color: red\"&gt;This snippets only PRESENTS code used for benchmark - it not perform test itself&lt;/p&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><strong>Cross browser results</strong></p>\n\n<p>Results for all tested browsers</p>\n\n<p><a href=\"https://i.stack.imgur.com/bSXp2.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/bSXp2.png\" alt=\"Enter image description here\"></a>browsers**</p>\n\n<p><strong>Array with 10 elements</strong></p>\n\n<p>Results for Chrome. You can perform the test on your machine <a href=\"https://jsbench.me/pxk4bicjru\" rel=\"nofollow noreferrer\">here</a>.</p>\n\n<p><a href=\"https://i.stack.imgur.com/VuCMw.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/VuCMw.png\" alt=\"Enter image description here\"></a></p>\n\n<p><strong>Array with 1,000,000 elements</strong></p>\n\n<p>Results for Chrome. You can perform the test on your machine <a href=\"https://jsbench.me/9uk4bj4svg\" rel=\"nofollow noreferrer\">here</a></p>\n\n<p><a href=\"https://i.stack.imgur.com/8JQf6.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/8JQf6.png\" alt=\"Enter image description here\"></a></p>\n"},{"owner":{"reputation":1969,"user_id":7656367,"user_type":"registered","profile_image":"https://i.stack.imgur.com/pvdwf.jpg?s=128&g=1","display_name":"antelove","link":"https://stackoverflow.com/users/7656367/antelove"},"is_accepted":false,"score":0,"last_activity_date":1583680631,"last_edit_date":1583680631,"creation_date":1576319090,"answer_id":59334231,"question_id":9329446,"content_license":"CC BY-SA 4.0","body":"<p><a href=\"https://developer.mozilla.org/id/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\" rel=\"nofollow noreferrer\">Mozilla documentation</a></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>/* Get all forms */\r\ndocument.querySelectorAll( \"form\" ).forEach( form =&gt; {\r\n\r\n  /* For each form, add the onsubmit event */\r\n  form.addEventListener( \"submit\", event =&gt; {\r\n    event.preventDefault(); // Return false\r\n\r\n    /* Display it */\r\n    alert(event.target.action);\r\n    console.log(event.target);\r\n  } );\r\n\r\n} );</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;form action=\"form1.php\" &gt;\r\n  &lt;input type=\"submit\" value=\"Submit\" /&gt;\r\n&lt;/form&gt;\r\n&lt;form action=\"form2.php\" &gt;\r\n  &lt;input type=\"submit\" value=\"Submit\" /&gt;\r\n&lt;/form&gt;\r\n&lt;form action=\"form3.php\" &gt;\r\n  &lt;input type=\"submit\" value=\"Submit\" /&gt;\r\n&lt;/form&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"owner":{"reputation":730,"user_id":10636628,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/4e2cc5a31034c216ec5c582293980414?s=128&d=identicon&r=PG&f=1","display_name":"anonymous","link":"https://stackoverflow.com/users/10636628/anonymous"},"is_accepted":false,"score":4,"last_activity_date":1583680560,"last_edit_date":1583680560,"creation_date":1576758361,"answer_id":59409790,"question_id":9329446,"content_license":"CC BY-SA 4.0","body":"<p>You can use:</p>\n\n<ol>\n<li><p>ForEach</p>\n\n<pre><code>theArray.forEach(function (array, index) {\n    console.log(index);\n    console.log(array);\n});\n</code></pre></li>\n<li><p>for</p>\n\n<pre><code>for(var i=0; i&lt;theArray.length; i++) {\n    console.log(i)\n}\n</code></pre></li>\n<li><p>map</p>\n\n<pre><code>theArray.map(x =&gt; console.log(x));\n</code></pre></li>\n<li><p>map</p>\n\n<pre><code>theArray.filter(x =&gt; console.log(x));\n</code></pre></li>\n</ol>\n\n<p>And there are many others for iteration.</p>\n"},{"owner":{"reputation":2852,"user_id":5783700,"user_type":"registered","profile_image":"https://i.stack.imgur.com/tOYYR.jpg?s=128&g=1","display_name":"ankitkanojia","link":"https://stackoverflow.com/users/5783700/ankitkanojia"},"is_accepted":false,"score":6,"last_activity_date":1583679096,"last_edit_date":1583679096,"creation_date":1579680844,"answer_id":59855245,"question_id":9329446,"content_license":"CC BY-SA 4.0","body":"<p>As per the new updated feature ECMAScript 6 (ES6) and ECMAScript 2015, you can use the following options with loops:</p>\n\n<blockquote>\n  <p><strong>for loops</strong></p>\n</blockquote>\n\n<pre><code>for(var i = 0; i &lt; 5; i++){\n  console.log(i);\n}\n\n// Output: 0,1,2,3,4\n</code></pre>\n\n<blockquote>\n  <p><strong>for...in loops</strong></p>\n</blockquote>\n\n<pre><code>let obj = {\"a\":1, \"b\":2}\n\nfor(let k in obj){\n  console.log(k)\n}\n\n// Output: a,b\n</code></pre>\n\n<blockquote>\n  <p><strong>Array.forEach()</strong></p>\n</blockquote>\n\n<pre><code>let array = [1,2,3,4]\n\narray.forEach((x) =&gt; {\n  console.log(x);\n})\n\n// Output: 1,2,3,4\n</code></pre>\n\n<blockquote>\n  <p><strong>for...of loops</strong></p>\n</blockquote>\n\n<pre><code>let array = [1,2,3,4]\n\nfor(let x of array){\n  console.log(x);\n}\n\n// Output: 1,2,3,4\n</code></pre>\n\n<blockquote>\n  <p><strong>while loops</strong></p>\n</blockquote>\n\n<pre><code>let x = 0\n\nwhile(x &lt; 5){\n  console.log(x)\n  x++\n}\n\n// Output: 1,2,3,4\n</code></pre>\n\n<blockquote>\n  <p><strong>do...while loops</strong></p>\n</blockquote>\n\n<pre><code>let x = 0\n\ndo{\n  console.log(x)\n  x++\n}while(x &lt; 5)\n\n// Output: 1,2,3,4\n</code></pre>\n"},{"owner":{"reputation":1165,"user_id":8217454,"user_type":"registered","profile_image":"https://i.stack.imgur.com/oghl3.jpg?s=128&g=1","display_name":"mojtaba ramezani","link":"https://stackoverflow.com/users/8217454/mojtaba-ramezani"},"is_accepted":false,"score":-1,"last_activity_date":1583678987,"last_edit_date":1583678987,"creation_date":1580108017,"answer_id":59926311,"question_id":9329446,"content_license":"CC BY-SA 4.0","body":"<p>Using the <strong>grep</strong> function in jQuery, for example:</p>\n\n<pre><code>$.grep([0, 1, 2], function(n, i) {\n    return n &gt; 0;\n});\n</code></pre>\n"},{"owner":{"reputation":150930,"user_id":220819,"user_type":"registered","accept_rate":100,"profile_image":"https://www.gravatar.com/avatar/0135bb75b1f08484d26239e8117b111c?s=128&d=identicon&r=PG","display_name":"Jacob Relkin","link":"https://stackoverflow.com/users/220819/jacob-relkin"},"is_accepted":false,"score":81,"last_activity_date":1583239043,"last_edit_date":1583239043,"creation_date":1275855737,"answer_id":2985773,"question_id":3390396,"content_license":"CC BY-SA 4.0","body":"<p>You can use <code>typeof</code>, like this:</p>\n\n<pre><code>if (typeof something != \"undefined\") {\n    // ...\n}\n</code></pre>\n"},{"owner":{"reputation":37880,"user_id":1946501,"user_type":"registered","accept_rate":86,"profile_image":"https://i.stack.imgur.com/mRsBv.png?s=128&g=1","display_name":"John Slegers","link":"https://stackoverflow.com/users/1946501/john-slegers"},"is_accepted":false,"score":77,"last_activity_date":1582825833,"last_edit_date":1592644375,"creation_date":1456253495,"answer_id":35585773,"question_id":500431,"content_license":"CC BY-SA 4.0","body":"<h1>Old school JavaScript</h1>\n<p>Traditionally, JavaScript really only has two types of scope :</p>\n<ol>\n<li><strong>Global Scope</strong> : Variables are known throughout the application, from the start of the application <em>(*)</em></li>\n<li><strong>Functional Scope</strong> : Variables are known within <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/function\" rel=\"noreferrer\"><strong>the function</strong></a> they are declared in, from the start of the function <em>(*)</em></li>\n</ol>\n<p>I will not elaborate on this, since there are already many other answers explaining the difference.</p>\n<hr />\n<h1>Modern JavaScript</h1>\n<p>The <a href=\"https://www.smashingmagazine.com/2015/10/es6-whats-new-next-version-javascript/\" rel=\"noreferrer\"><strong>most recent JavaScript specs</strong></a> now also allow a third scope :</p>\n<ol start=\"3\">\n<li><strong>Block Scope</strong> : Identifiers are &quot;known&quot; <a href=\"https://stackoverflow.com/a/31222689/38522\">from the top of the scope they are declared within</a>, but they cannot be assigned to or dereferenced (read) until after the line of their declaration. This interim period is called the &quot;temporal dead zone.&quot;</li>\n</ol>\n<hr />\n<h3>How do I create block scope variables?</h3>\n<p>Traditionally, you create your variables like this :</p>\n<pre><code>var myVariable = &quot;Some text&quot;;\n</code></pre>\n<p>Block scope variables are created like this :</p>\n<pre><code>let myVariable = &quot;Some text&quot;;\n</code></pre>\n<hr />\n<h3>So what is the difference between functional scope and block scope?</h3>\n<p>To understand the difference between functional scope and block scope, consider the following code :</p>\n<pre><code>// i IS NOT known here\n// j IS NOT known here\n// k IS known here, but undefined\n// l IS NOT known here\n\nfunction loop(arr) {\n    // i IS known here, but undefined\n    // j IS NOT known here\n    // k IS known here, but has a value only the second time loop is called\n    // l IS NOT known here\n\n    for( var i = 0; i &lt; arr.length; i++ ) {\n        // i IS known here, and has a value\n        // j IS NOT known here\n        // k IS known here, but has a value only the second time loop is called\n        // l IS NOT known here\n    };\n\n    // i IS known here, and has a value\n    // j IS NOT known here\n    // k IS known here, but has a value only the second time loop is called\n    // l IS NOT known here\n\n    for( let j = 0; j &lt; arr.length; j++ ) {\n        // i IS known here, and has a value\n        // j IS known here, and has a value\n        // k IS known here, but has a value only the second time loop is called\n        // l IS NOT known here\n    };\n\n    // i IS known here, and has a value\n    // j IS NOT known here\n    // k IS known here, but has a value only the second time loop is called\n    // l IS NOT known here\n}\n\nloop([1,2,3,4]);\n\nfor( var k = 0; k &lt; arr.length; k++ ) {\n    // i IS NOT known here\n    // j IS NOT known here\n    // k IS known here, and has a value\n    // l IS NOT known here\n};\n\nfor( let l = 0; l &lt; arr.length; l++ ) {\n    // i IS NOT known here\n    // j IS NOT known here\n    // k IS known here, and has a value\n    // l IS known here, and has a value\n};\n\nloop([1,2,3,4]);\n\n// i IS NOT known here\n// j IS NOT known here\n// k IS known here, and has a value\n// l IS NOT known here\n</code></pre>\n<p>Here, we can see that our variable <code>j</code> is only known in the first for loop, but not before and after. Yet, our variable <code>i</code> is known in the entire function.</p>\n<p>Also, consider that block scoped variables are not known before they are declared because they are not hoisted. You're also not allowed to redeclare the same block scoped variable within the same block. This makes block scoped variables less error prone than globally or functionally scoped variables, which are hoisted and which do not produce any errors in case of multiple declarations.</p>\n<hr />\n<h3>Is it safe to use block scope variables today?</h3>\n<p>Whether or not it is safe to use today, depends on your environment :</p>\n<ul>\n<li><p>If you're writing server-side JavaScript code (<a href=\"https://nodejs.org/en/\" rel=\"noreferrer\"><strong>Node.js</strong></a>), you can safely use the <code>let</code> statement.</p>\n</li>\n<li><p>If you're writing client-side JavaScript code and use a browser based transpiler (like <a href=\"https://github.com/google/traceur-compiler\" rel=\"noreferrer\"><strong>Traceur</strong></a> or <a href=\"https://github.com/babel/babel-standalone\" rel=\"noreferrer\"><strong>babel-standalone</strong></a>), you can safely use the <code>let</code> statement, however your code is likely to be anything but optimal with respect to performance.</p>\n</li>\n<li><p>If you're writing client-side JavaScript code and use a Node based transpiler (like the <a href=\"https://github.com/google/traceur-compiler/wiki/Compiling-Offline\" rel=\"noreferrer\"><strong>traceur shell script</strong></a> or <a href=\"https://babeljs.io/\" rel=\"noreferrer\"><strong>Babel</strong></a>), you can safely use the <code>let</code> statement. And because your browser will only know about the transpiled code, performance drawbacks should be limited.</p>\n</li>\n<li><p>If you're writing client-side JavaScript code and don't use a transpiler, you need to consider browser support.</p>\n<p>These are some browsers that don't support <code>let</code> at all :</p>\n<ul>\n<li><strong>Internet explorer 10</strong> and below</li>\n<li><strong>Firefox 43</strong> and below</li>\n<li><strong>Safari 9</strong> and below</li>\n<li><strong>Android browser 4</strong> and below</li>\n<li><strong>Opera 27</strong> and below</li>\n<li><strong>Chome 40</strong> and below</li>\n<li>ANY version of <strong>Opera Mini</strong> &amp; <strong>Blackberry Browser</strong></li>\n</ul>\n</li>\n</ul>\n<p><a href=\"https://i.stack.imgur.com/J9kEC.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/J9kEC.png\" alt=\"enter image description here\" /></a></p>\n<hr />\n<h3>How to keep track of browser support</h3>\n<p>For an up-to-date overview of which browsers support the <code>let</code> statement at the time of your reading this answer, see <a href=\"http://caniuse.com/#search=let\" rel=\"noreferrer\"><strong>this <code>Can I Use</code> page</strong></a>.</p>\n<hr />\n<p><em>(*) Globally and functionally scoped variables can be initialized and used before they are declared because JavaScript variables are <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Hoisting\" rel=\"noreferrer\"><strong>hoisted</strong></a>.</em> This means that declarations are always much to the top of the scope.</p>\n"},{"owner":{"reputation":251741,"user_id":9515207,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/34932d3e923ffad9a4a1423e30b1d9fc?s=128&d=identicon&r=PG&f=1","display_name":"CertainPerformance","link":"https://stackoverflow.com/users/9515207/certainperformance"},"is_accepted":false,"score":4,"last_activity_date":1582438879,"last_edit_date":1582438879,"creation_date":1577760645,"answer_id":59539045,"question_id":500431,"content_license":"CC BY-SA 4.0","body":"<p>A very common issue not described yet that front-end coders often run into is the scope that is visible to an inline event handler in the HTML - for example, with</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;button onclick=\"foo()\"&gt;&lt;/button&gt;\n</code></pre>\n\n<p>The scope of the variables that an <code>on*</code> attribute can reference <em>must</em> be either:</p>\n\n<ul>\n<li>global (working inline handlers almost always reference global variables)</li>\n<li>a property of the document (eg, <code>querySelector</code> as a standalone variable will point to <code>document.querySelector</code>; rare)</li>\n<li>a property of the element the handler is attached to (like above; rare)</li>\n</ul>\n\n<p>Otherwise, you'll get a ReferenceError when the handler is invoked. So, for example, if the inline handler references a function which is defined <em>inside</em> <code>window.onload</code> or <code>$(function() {</code>, the reference will fail, because the inline handler may only reference variables in the global scope, and the function is not global:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>window.addEventListener('DOMContentLoaded', () =&gt; {\r\n  function foo() {\r\n    console.log('foo running');\r\n  }\r\n});</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;button onclick=\"foo()\"&gt;click&lt;/button&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Properties of the <code>document</code> and properties of the element the handler is attached to may also be referenced as standalone variables inside inline handlers because inline handlers are invoked <a href=\"https://i.stack.imgur.com/dTDB0.png\" rel=\"nofollow noreferrer\"><em>inside</em> of two <code>with</code> blocks</a>, one for the <code>document</code>, one for the element. The scope chain of variables inside these handlers is <a href=\"https://stackoverflow.com/a/57048067\">extremely unintuitive</a>, and a working event handler will <em>probably</em> require a function to be global (and unnecessary global pollution <a href=\"https://softwareengineering.stackexchange.com/q/148108\">should probably be avoided</a>).</p>\n\n<p>Since the scope chain inside inline handlers is <em>so weird</em>, and since inline handlers require global pollution to work, and since inline handlers sometimes require ugly string escaping when passing arguments, it's probably easier to avoid them. Instead, attach event handlers using Javascript (like with <code>addEventListener</code>), rather than with HTML markup.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function foo() {\r\n  console.log('foo running');\r\n}\r\ndocument.querySelector('.my-button').addEventListener('click', foo);</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;button class=\"my-button\"&gt;click&lt;/button&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<hr>\n\n<p>On a different note, unlike normal <code>&lt;script&gt;</code> tags, which run on the top level, code inside ES6 modules runs in its own private scope. A variable defined at the top of a normal <code>&lt;script&gt;</code> tag is global, so you can reference it in other <code>&lt;script&gt;</code> tags, like this:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script&gt;\r\nconst foo = 'foo';\r\n&lt;/script&gt;\r\n&lt;script&gt;\r\nconsole.log(foo);\r\n&lt;/script&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>But the top level of an ES6 module is <em>not</em> global. A variable declared at the top of an ES6 module will only be visible inside that module, unless the variable is explicitly <code>export</code>ed, or unless it's assigned to a property of the global object.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script type=\"module\"&gt;\r\nconst foo = 'foo';\r\n&lt;/script&gt;\r\n&lt;script&gt;\r\n// Can't access foo here, because the other script is a module\r\nconsole.log(typeof foo);\r\n&lt;/script&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>The top level of an ES6 module is similar to that of the inside of an IIFE on the top level in a normal <code>&lt;script&gt;</code>. The module can reference any variables which are global, and nothing can reference anything inside the module unless the module is explicitly designed for it.</p>\n"},{"owner":{"reputation":2615,"user_id":3680588,"user_type":"registered","accept_rate":12,"profile_image":"https://www.gravatar.com/avatar/ed17467e31fcc8f8a297ece99b00046b?s=128&d=identicon&r=PG&f=1","display_name":"litepresence","link":"https://stackoverflow.com/users/3680588/litepresence"},"is_accepted":false,"score":5,"last_activity_date":1581552462,"last_edit_date":1581552462,"creation_date":1521691727,"answer_id":49420387,"question_id":38987,"content_license":"CC BY-SA 4.0","body":"<p>I was curious if I could beat the accepted answer's time with a one line stringify approach:</p>\n\n<p>I tried 5 methods, none previously mentioned - all one liner - all producing correct answers - and I couldn't come close.</p>\n\n<p>So... to save you the trouble and perhaps fulfill curiosity:</p>\n\n<pre><code>import json\nimport yaml\nimport time\nfrom ast import literal_eval as literal\n\ndef merge_two_dicts(x, y):\n    z = x.copy()   # start with x's keys and values\n    z.update(y)    # modifies z with y's keys and values &amp; returns None\n    return z\n\nx = {'a':1, 'b': 2}\ny = {'b':10, 'c': 11}\n\nstart = time.time()\nfor i in range(10000):\n    z = yaml.load((str(x)+str(y)).replace('}{',', '))\nelapsed = (time.time()-start)\nprint (elapsed, z, 'stringify yaml')\n\nstart = time.time()\nfor i in range(10000):\n    z = literal((str(x)+str(y)).replace('}{',', '))\nelapsed = (time.time()-start)\nprint (elapsed, z, 'stringify literal')\n\nstart = time.time()\nfor i in range(10000):\n    z = eval((str(x)+str(y)).replace('}{',', '))\nelapsed = (time.time()-start)\nprint (elapsed, z, 'stringify eval')\n\nstart = time.time()\nfor i in range(10000):\n    z = {k:int(v) for k,v in (dict(zip(\n            ((str(x)+str(y))\n            .replace('}',' ')\n            .replace('{',' ')\n            .replace(':',' ')\n            .replace(',',' ')\n            .replace(\"'\",'')\n            .strip()\n            .split('  '))[::2], \n            ((str(x)+str(y))\n            .replace('}',' ')\n            .replace('{',' ').replace(':',' ')\n            .replace(',',' ')\n            .replace(\"'\",'')\n            .strip()\n            .split('  '))[1::2]\n             ))).items()}\nelapsed = (time.time()-start)\nprint (elapsed, z, 'stringify replace')\n\nstart = time.time()\nfor i in range(10000):\n    z = json.loads(str((str(x)+str(y)).replace('}{',', ').replace(\"'\",'\"')))\nelapsed = (time.time()-start)\nprint (elapsed, z, 'stringify json')\n\nstart = time.time()\nfor i in range(10000):\n    z = merge_two_dicts(x, y)\nelapsed = (time.time()-start)\nprint (elapsed, z, 'accepted')\n</code></pre>\n\n<p>results:</p>\n\n<pre><code>7.693928956985474 {'c': 11, 'b': 10, 'a': 1} stringify yaml\n0.29134678840637207 {'c': 11, 'b': 10, 'a': 1} stringify literal\n0.2208399772644043 {'c': 11, 'b': 10, 'a': 1} stringify eval\n0.1106564998626709 {'c': 11, 'b': 10, 'a': 1} stringify replace\n0.07989692687988281 {'c': 11, 'b': 10, 'a': 1} stringify json\n0.005082368850708008 {'c': 11, 'b': 10, 'a': 1} accepted\n</code></pre>\n\n<p>What I did learn from this is that JSON approach is the fastest way (of those attempted) to return a dictionary from string-of-dictionary; much faster (about 1/4th of the time) of what I considered to be the normal method using <code>ast</code>.  I also learned that, the YAML approach should be avoided at all cost.</p>\n\n<p>Yes, I understand that this is not the best/correct way. I was curious if it was faster, and it isn't; I posted to prove it so.</p>\n"},{"owner":{"reputation":2335,"user_id":3267107,"user_type":"registered","profile_image":"https://i.stack.imgur.com/AEciL.jpg?s=128&g=1","display_name":"vkarpov15","link":"https://stackoverflow.com/users/3267107/vkarpov15"},"is_accepted":false,"score":3,"last_activity_date":1581067686,"last_edit_date":1581067686,"creation_date":1577129479,"answer_id":59460408,"question_id":9329446,"content_license":"CC BY-SA 4.0","body":"<p>I'd argue that <code>for/of</code> is the way to go:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const arr = ['a', 'b', 'c'];\r\n\r\nfor (const v of arr) {\r\n  console.log(v); // Prints \"a\", \"b\", \"c\"\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<ul>\n<li><p>Unlike <code>for/in</code>, <code>for/of</code> skips non-numeric properties on the array. For example, if you set <code>arr.foo = 'test'</code>, <code>for (var v in arr)</code> will loop through the <code>'foo'</code> key.</p></li>\n<li><p>Unlike <code>forEach()</code>, <code>for/of</code> doesn't skip \"holes\" in arrays. <code>const arr = ['a',, 'c']</code> is valid JavaScript, just the 2nd element is a \"hole\". The array is functionally equivalent to <code>['a', undefined, 'c']</code>.</p></li>\n</ul>\n\n<p>You can read more in <a href=\"https://thecodebarbarian.com/for-vs-for-each-vs-for-in-vs-for-of-in-javascript\" rel=\"nofollow noreferrer\">this blog post on <code>for/of</code> vs <code>forEach()</code>.</a></p>\n"},{"owner":{"reputation":463,"user_id":8701383,"user_type":"registered","profile_image":"https://lh3.googleusercontent.com/-HInT4c4ILJ0/AAAAAAAAAAI/AAAAAAAAAPg/HZd-ZHIsiZQ/photo.jpg?sz=128","display_name":"Nouman Dilshad","link":"https://stackoverflow.com/users/8701383/nouman-dilshad"},"is_accepted":false,"score":7,"last_activity_date":1579954415,"last_edit_date":1579954415,"creation_date":1531830651,"answer_id":51381464,"question_id":9329446,"content_license":"CC BY-SA 4.0","body":"<p>You can call forEach like this:</p>\n\n<p><code>forEach</code> will iterate over the array you provide and for each iteration it will have <code>element</code> which holds the value of that iteration. If you need index you can get the current index by passing the <code>i</code> as the second parameter in the callback function for forEach. </p>\n\n<p>Foreach is basically a High Order Function, Which takes another function as its parameter. </p>\n\n<pre><code>let theArray= [1,3,2];\n\ntheArray.forEach((element) =&gt; {\n  // Use the element of the array\n  console.log(element)\n}\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>1\n3\n2\n</code></pre>\n\n<p>You can also iterate over an array like this:</p>\n\n<pre><code>for (let i=0; i&lt;theArray.length; i++) {\n  console.log(i); // i will have the value of each index\n}\n</code></pre>\n"},{"owner":{"reputation":323,"user_id":891126,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/e1c47d796708150dbff1851e05752d5a?s=128&d=identicon&r=PG","display_name":"rgb_life","link":"https://stackoverflow.com/users/891126/rgb-life"},"is_accepted":false,"score":10,"last_activity_date":1578632603,"last_edit_date":1578632603,"creation_date":1322717805,"answer_id":8337001,"question_id":950087,"content_license":"CC BY-SA 4.0","body":"<p>I came to this question because I was looking for a simple way to maintain a collection of useful JavaScript plugins. After seeing some of the solutions here, I came up with this:</p>\n\n<ol>\n<li><p>Set up a file called \"plugins.js\" (or extensions.js or whatever you want). Keep your plugin files together with that one master file.</p></li>\n<li><p>plugins.js will have an array called <code>pluginNames[]</code> that we will iterate over <code>each()</code>,\nthen append a <code>&lt;script&gt;</code> tag to the head for each plugin</p></li>\n</ol>\n\n<pre class=\"lang-js prettyprint-override\"><code>//set array to be updated when we add or remove plugin files\nvar pluginNames = [\"lettering\", \"fittext\", \"butterjam\", etc.];\n\n//one script tag for each plugin\n$.each(pluginNames, function(){\n    $('head').append('&lt;script src=\"js/plugins/' + this + '.js\"&gt;&lt;/script&gt;');\n});\n</code></pre>\n\n<ol start=\"3\">\n<li>Manually call just the one file in your head:<br>\n<code>&lt;script src=\"js/plugins/plugins.js\"&gt;&lt;/script&gt;</code></li>\n</ol>\n\n<p>BUT:</p>\n\n<p>Even though all of the plugins get dropped into the head tag the way they ought to, they don't always get run by the browser when you click into the page or refresh.</p>\n\n<p>I've found it's more reliable to just write the script tags in a PHP include. You only have to write it once and that's just as much work as calling the plugin using JavaScript.</p>\n"},{"owner":{"reputation":1118,"user_id":7132212,"user_type":"registered","accept_rate":75,"profile_image":"https://www.gravatar.com/avatar/9096ba14c05d0edf551297b675b3d1b9?s=128&d=identicon&r=PG&f=1","display_name":"Kevin Sabbe","link":"https://stackoverflow.com/users/7132212/kevin-sabbe"},"is_accepted":false,"score":1,"last_activity_date":1575672392,"creation_date":1575672392,"answer_id":59221273,"question_id":38987,"content_license":"CC BY-SA 4.0","body":"<p>Some ways to solve it without using any python modules (no dependencies) with few lines of codes.</p>\n\n<p><strong>ALL Python Versions (using Lambda):</strong></p>\n\n<pre><code>merge_dicts = lambda old, new: old.update(new) or old\n</code></pre>\n\n<blockquote>\n  <p><strong>Python Version >= 3.5:</strong></p>\n</blockquote>\n\n<pre><code>def merge_dicts(old, new):\n    return {**old, **new} \n</code></pre>\n\n<blockquote>\n  <p><strong>Older Python Version:</strong></p>\n</blockquote>\n\n<pre><code>def merge_dicts(old, new):\n    merged = old.copy()\n    merged.update(new)\n    return merged\n</code></pre>\n\n<p>This example will merge old and new while erasing old values with the new values.</p>\n\n<blockquote>\n  <p><strong>USAGE:</strong></p>\n</blockquote>\n\n<pre><code>old = {'name': 'Kevin', 'phone_number': '+33 12 34 45 67'}\nnew = {'name': 'Kevin', 'phone_number': '+33 88 88 88 88'}\n\nprint(merge_dicts(old, new))\n</code></pre>\n\n<blockquote>\n  <p><strong>OUTPUT:</strong></p>\n</blockquote>\n\n<pre><code>{'name': 'Kevin', 'phone_number': '+33 88 88 88 88'}\n</code></pre>\n\n<p>IF you have to deal with multiples merged from old to new version, without losing any data one example approach below using an array of dictionaries:</p>\n\n<blockquote>\n  <p><strong>ALL Python Versions:</strong></p>\n</blockquote>\n\n<pre><code>def merge_dicts(old, news):\n    merged = old.copy()\n    for new in news:\n        merged.update(new)\n    return merged\n</code></pre>\n\n<blockquote>\n  <p><strong>USAGE:</strong></p>\n</blockquote>\n\n<pre><code>old = {'name': 'Kevin', 'phone_number': '+33 12 34 45 67'}\nnew_01 = {'name': 'Kevin', 'phone_number': '+33 77 77 77 77', 'age': 28}\nnew_02 = {'name': 'SabK', 'phone_number': '+33 88 88 88 89'}\nnew_03 = {'phone_number': '+33 99 99 99 99'}\n\nprint(merge_dicts(old, [new_01, new_02, new_03]))\n</code></pre>\n\n<blockquote>\n  <p><strong>OUTPUT:</strong></p>\n</blockquote>\n\n<pre><code>{'phone_number': '+33 99 99 99 99', 'age': 28, 'name': 'SabK'}\n</code></pre>\n\n<p>In this example, the new dictionary will be generated from the old one (first argument) and then will update sequentially from the first element of the array to the last one (new_01 > new_02 > new_03)</p>\n\n<p>At the end, you will get all the datas from all the dictionary will updating values that as been change. This function can be really useful when you have deal with datas that change frequently.</p>\n"},{"owner":{"reputation":132186,"user_id":165737,"user_type":"registered","accept_rate":97,"profile_image":"https://www.gravatar.com/avatar/484769fdcead6bf0fa4be5106e4aa4d1?s=128&d=identicon&r=PG&f=1","display_name":"Anurag","link":"https://stackoverflow.com/users/165737/anurag"},"is_accepted":true,"score":2866,"last_activity_date":1575585645,"last_edit_date":1575585645,"creation_date":1280771898,"answer_id":3390426,"question_id":3390396,"content_license":"CC BY-SA 4.0","body":"<p>If you are interested in finding out whether a variable has been declared regardless of its value, then using the <code>in</code> operator is the safest way to go. Consider this example:</p>\n\n<pre><code>// global scope\nvar theFu; // theFu has been declared, but its value is undefined\ntypeof theFu; // \"undefined\"\n</code></pre>\n\n<p>But this may not be the intended result for some cases, since the variable or property was declared but just not initialized. Use the <code>in</code> operator for a more robust check.</p>\n\n<pre><code>\"theFu\" in window; // true\n\"theFoo\" in window; // false\n</code></pre>\n\n<p>If you are interested in knowing whether the variable hasn't been declared or has the value <code>undefined</code>, then use the <code>typeof</code> operator, which is guaranteed to return a string:</p>\n\n<pre><code>if (typeof myVar !== 'undefined')\n</code></pre>\n\n<p>Direct comparisons against <code>undefined</code> are troublesome as <code>undefined</code> can be overwritten. </p>\n\n<pre><code>window.undefined = \"foo\";\n\"foo\" == undefined // true\n</code></pre>\n\n<p>As @CMS pointed out, this has been patched in ECMAScript 5th ed., and <code>undefined</code> is non-writable.</p>\n\n<p><code>if (window.myVar)</code> will also include these falsy values, so it's not very robust:</p>\n\n<pre>\nfalse\n0\n\"\"\nNaN\nnull\nundefined\n</pre>\n\n<p>Thanks to @CMS for pointing out that your third case - <code>if (myVariable)</code> can also throw an error in two cases. The first is when the variable hasn't been defined which throws a <code>ReferenceError</code>. </p>\n\n<pre><code>// abc was never declared.\nif (abc) {\n    // ReferenceError: abc is not defined\n} \n</code></pre>\n\n<p>The other case is when the variable has been defined, but has a getter function which throws an error when invoked. For example,</p>\n\n<pre><code>// or it's a property that can throw an error\nObject.defineProperty(window, \"myVariable\", { \n    get: function() { throw new Error(\"W00t?\"); }, \n    set: undefined \n});\nif (myVariable) {\n    // Error: W00t?\n}\n</code></pre>\n"},{"owner":{"reputation":276461,"user_id":6521,"user_type":"registered","accept_rate":95,"profile_image":"https://www.gravatar.com/avatar/6af19633ae0228e3b5bb4de168b5d19d?s=128&d=identicon&r=PG","display_name":"Paul Dixon","link":"https://stackoverflow.com/users/6521/paul-dixon"},"is_accepted":true,"score":1343,"last_activity_date":1574794565,"last_edit_date":1574794565,"creation_date":1349196088,"answer_id":12694578,"question_id":12694530,"content_license":"CC BY-SA 4.0","body":"<blockquote>\n  <p>I originally wrote this answer when TypeScript was still\n  hot-off-the-presses. Five years later, this is an OK overview, but look \n  at <a href=\"https://stackoverflow.com/a/35048303/6521\">Lodewijk's answer</a> below for more depth</p>\n</blockquote>\n\n<h2>1000ft view...</h2>\n\n<p><a href=\"http://www.typescriptlang.org\" rel=\"noreferrer\">TypeScript</a> is a superset of JavaScript which primarily provides optional static typing, classes and interfaces. One of the big benefits is to enable IDEs to provide a richer environment for spotting common errors <em>as you type the code</em>.</p>\n\n<p>To get an idea of what I mean, watch <a href=\"http://channel9.msdn.com/posts/Anders-Hejlsberg-Introducing-TypeScript\" rel=\"noreferrer\">Microsoft's introductory video</a> on the language.</p>\n\n<p>For a large JavaScript project, adopting TypeScript might result in more robust software, while still being deployable where a regular JavaScript application would run.</p>\n\n<p>It is open source, but you only get the clever Intellisense as you type if you use a supported IDE. Initially, this was only Microsoft's Visual Studio (also noted in blog post from <a href=\"http://tirania.org/blog/archive/2012/Oct-01.html\" rel=\"noreferrer\">Miguel de Icaza</a>). These days, <a href=\"https://github.com/Microsoft/TypeScript/wiki/TypeScript-Editor-Support\" rel=\"noreferrer\">other IDEs offer TypeScript support too</a>.</p>\n\n<h2>Are there other technologies like it?</h2>\n\n<p>There's <a href=\"http://coffeescript.org/\" rel=\"noreferrer\">CoffeeScript</a>, but that really serves a different purpose. IMHO, CoffeeScript provides readability for humans, but TypeScript also provides deep readability for <em>tools</em> through its optional static typing (see this <a href=\"http://www.hanselman.com/blog/WhyDoesTypeScriptHaveToBeTheAnswerToAnything.aspx\" rel=\"noreferrer\">recent blog post</a> for a little more critique). There's also <a href=\"http://en.wikipedia.org/wiki/Dart_%28programming_language%29\" rel=\"noreferrer\">Dart</a> but that's a full on replacement for JavaScript (though it <a href=\"http://www.dartlang.org/docs/dart-up-and-running/contents/ch04-tools-dart2js.html\" rel=\"noreferrer\">can produce JavaScript code</a>)</p>\n\n<h2>Example</h2>\n\n<p>As an example, here's some TypeScript (you can play with this in the <a href=\"http://www.typescriptlang.org/Playground/\" rel=\"noreferrer\">TypeScript Playground</a>)</p>\n\n<pre><code>class Greeter {\n    greeting: string;\n    constructor (message: string) {\n        this.greeting = message;\n    }\n    greet() {\n        return \"Hello, \" + this.greeting;\n    }\n}  \n</code></pre>\n\n<p>And here's the JavaScript it would produce</p>\n\n<pre><code>var Greeter = (function () {\n    function Greeter(message) {\n        this.greeting = message;\n    }\n    Greeter.prototype.greet = function () {\n        return \"Hello, \" + this.greeting;\n    };\n    return Greeter;\n})();\n</code></pre>\n\n<p>Notice how the TypeScript defines the type of member variables and class method parameters. This is removed when translating to JavaScript, but used by the IDE and compiler to spot errors, like passing a numeric type to the constructor.</p>\n\n<p>It's also capable of inferring types which aren't explicitly declared, for example, it would determine the <code>greet()</code> method returns a string.</p>\n\n<h2>Debugging TypeScript</h2>\n\n<p>Many browsers and IDEs offer direct debugging support through sourcemaps. See this Stack Overflow question for more details: <a href=\"https://stackoverflow.com/questions/12711826/debugging-typescript-code-with-visual-studio\">Debugging TypeScript code with Visual Studio</a></p>\n\n<h2>Want to know more?</h2>\n\n<p>I originally wrote this answer when TypeScript was still hot-off-the-presses. Check out <a href=\"https://stackoverflow.com/a/35048303/6521\">Lodewijk's answer</a> to this question for some more current detail.</p>\n"},{"owner":{"reputation":19678,"user_id":929999,"user_type":"registered","accept_rate":83,"profile_image":"https://www.gravatar.com/avatar/8e38b941717ff6f519095ee81fcd09a7?s=128&d=identicon&r=PG","display_name":"Torxed","link":"https://stackoverflow.com/users/929999/torxed"},"is_accepted":false,"score":1,"last_activity_date":1574355820,"last_edit_date":1574355820,"creation_date":1570649396,"answer_id":58311037,"question_id":950087,"content_license":"CC BY-SA 4.0","body":"<p>So this is a edge case. But if you need to load the JavaScript from a remote source, most modern browsers might block your cross-site requests due to CORS or something similar. So normal</p>\n\n<pre><code>&lt;script src=\"https://another-domain.com/example.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>Won't work. And doing the <code>document.createElement('script').src = '...'</code> won't cut it either. Instead, what you could do is load the java-script as a resource via standard <code>GET</code> request, and do this:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    var script = document.createElement('script');\n    script.type = 'text/javascript';\n\n    let xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", 'https://raw.githubusercontent.com/Torxed/slimWebSocket/master/slimWebSocket.js', true);\n    xhr.onreadystatechange = function() {\n        if (this.readyState === XMLHttpRequest.DONE &amp;&amp; this.status === 200) {\n            script.innerHTML = this.responseText; // &lt;-- This one\n            document.head.appendChild(script);\n        }\n    }\n    xhr.send();\n&lt;/script&gt;\n</code></pre>\n\n<p>By grabbing the content yourself, the browser won't notice malicious intents and allow you go do the request. Then you add it in <code>&lt;script&gt;</code>'s <code>innerHTML</code> instead. This still causes the browser <em>(at least tested in Chrome)</em> to parse/execute the script.</p>\n\n<p>Again, this is a edge case use case. And you'll have no backwards compatibility or browser compliance probably. But fun/useful thing to know about.</p>\n"},{"owner":{"reputation":896,"user_id":3239917,"user_type":"registered","accept_rate":100,"profile_image":"https://i.stack.imgur.com/rhZUf.png?s=128&g=1","display_name":"MCollard","link":"https://stackoverflow.com/users/3239917/mcollard"},"is_accepted":false,"score":0,"last_activity_date":1574255889,"creation_date":1574255889,"answer_id":58955313,"question_id":17289236,"content_license":"CC BY-SA 4.0","body":"<p>Because this pops-up in Google when trying to find an answer to: \"Error: Argument '' is not a function, got undefined\".</p>\n\n<p>It's possible that you are trying to create the same module twice.</p>\n\n<blockquote>\n  <p>The angular.module is a global place for creating, registering and\n  retrieving AngularJS modules.</p>\n  \n  <p><strong>Passing one argument retrieves an existing angular.Module, whereas</strong>\n  <strong>passing more than one argument creates a new angular.Module</strong></p>\n</blockquote>\n\n<p>Source: <a href=\"https://docs.angularjs.org/api/ng/function/angular.module#overview\" rel=\"nofollow noreferrer\">https://docs.angularjs.org/api/ng/function/angular.module#overview</a></p>\n\n<p>Example:</p>\n\n<p><code>angular.module('myApp', [])</code> Is used to create a module without injecting any dependencies.</p>\n\n<p><code>angular.module('myApp')</code> (Without argument) is used to get an existing module. </p>\n"},{"owner":{"reputation":82464,"user_id":5423108,"user_type":"registered","profile_image":"https://i.stack.imgur.com/WtfBG.png?s=128&g=1","display_name":"Alireza","link":"https://stackoverflow.com/users/5423108/alireza"},"is_accepted":false,"score":22,"last_activity_date":1571787168,"last_edit_date":1571787168,"creation_date":1494426722,"answer_id":43895482,"question_id":9329446,"content_license":"CC BY-SA 4.0","body":"<p>There are <strong>a few ways</strong> to loop through an array in JavaScript, as below:</p>\n\n<p><strong>for</strong> - it's <strong>the most common one</strong>. Full block of code for looping <br/></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var languages = [\"Java\", \"JavaScript\", \"C#\", \"Python\"];\r\nvar i, len, text;\r\nfor (i = 0, len = languages.length, text = \"\"; i &lt; len; i++) {\r\n    text += languages[i] + \"&lt;br&gt;\";\r\n}\r\ndocument.getElementById(\"example\").innerHTML = text;</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;p id=\"example\"&gt;&lt;/p&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><strong>while</strong> - loop while a condition is through. It seems to be the fastest loop <br/></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var text = \"\";\r\nvar i = 0;\r\nwhile (i &lt; 10) {\r\n    text +=  i + \") something&lt;br&gt;\";\r\n    i++;\r\n}\r\ndocument.getElementById(\"example\").innerHTML = text;</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;p id=\"example\"&gt;&lt;/p&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><strong>do/while</strong> - also loop through a block of code while the condition is true, will run at least one time <br/></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var text = \"\"\r\nvar i = 0;\r\n\r\ndo {\r\n    text += i + \") something &lt;br&gt;\";\r\n    i++;\r\n}\r\nwhile (i &lt; 10);\r\n\r\ndocument.getElementById(\"example\").innerHTML = text;</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;p id=\"example\"&gt;&lt;/p&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><strong>Functional loops</strong> - <code>forEach</code>, <code>map</code>, <code>filter</code>, also <code>reduce</code> (they loop through the function, but they are used if you need to do something with your array, etc.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>// For example, in this case we loop through the number and double them up using the map function\r\nvar numbers = [65, 44, 12, 4];\r\ndocument.getElementById(\"example\").innerHTML = numbers.map(function(num){return num * 2});</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;p id=\"example\"&gt;&lt;/p&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>For more information and examples about functional programming on arrays, look at the blog post <em><a href=\"http://cryto.net/~joepie91/blog/2015/05/04/functional-programming-in-javascript-map-filter-reduce/\" rel=\"nofollow noreferrer\">Functional programming in JavaScript: map, filter and reduce</a></em>.</p>\n"},{"owner":{"reputation":82464,"user_id":5423108,"user_type":"registered","profile_image":"https://i.stack.imgur.com/WtfBG.png?s=128&g=1","display_name":"Alireza","link":"https://stackoverflow.com/users/5423108/alireza"},"is_accepted":false,"score":15,"last_activity_date":1569984696,"last_edit_date":1569984696,"creation_date":1495635355,"answer_id":44161028,"question_id":27509,"content_license":"CC BY-SA 4.0","body":"<p>Simply anything is not defined in JavaScript, is <strong>undefined</strong>, doesn't matter if it's a property inside an <strong>Object/Array</strong> or as just a simple variable...</p>\n\n<p>JavaScript has <code>typeof</code> which make it very easy to detect an undefined variable.</p>\n\n<p>Simply check if <code>typeof whatever === 'undefined'</code> and it will return a boolean.</p>\n\n<p>That's how the famous function <code>isUndefined()</code> in AngularJs v.1x is written:</p>\n\n<pre><code>function isUndefined(value) {return typeof value === 'undefined';} \n</code></pre>\n\n<p>So as you see the function receive a value, if that value is defined, it will return <code>false</code>, otherwise for undefined values, return <code>true</code>. </p>\n\n<p>So let's have a look what gonna be the results when we passing values, including object properties like below, this is the list of variables we have:</p>\n\n<pre><code>var stackoverflow = {};\nstackoverflow.javascipt = 'javascript';\nvar today;\nvar self = this;\nvar num = 8;\nvar list = [1, 2, 3, 4, 5];\nvar y = null;\n</code></pre>\n\n<p>and we check them as below, you can see the results in front of them as a comment:</p>\n\n<pre><code>isUndefined(stackoverflow); //false\nisUndefined(stackoverflow.javascipt); //false\nisUndefined(today); //true\nisUndefined(self); //false\nisUndefined(num); //false\nisUndefined(list); //false\nisUndefined(y); //false\nisUndefined(stackoverflow.java); //true\nisUndefined(stackoverflow.php); //true\nisUndefined(stackoverflow &amp;&amp; stackoverflow.css); //true\n</code></pre>\n\n<p>As you see we can check anything with using something like this in our code, as mentioned you can simply use <code>typeof</code> in your code, but if you are using it over and over, create a function like the angular sample which I share and keep reusing as following DRY code pattern.</p>\n\n<p>Also one more thing, for checking property on an object in a real application which you not sure even the object exists or not, check if the object exists first.</p>\n\n<p>If you check a property on an object and the object doesn't exist, will throw an error and stop the whole application running.</p>\n\n<pre><code>isUndefined(x.css);\nVM808:2 Uncaught ReferenceError: x is not defined(…)\n</code></pre>\n\n<p>So simple you can wrap inside an if statement like below:</p>\n\n<pre><code>if(typeof x !== 'undefined') {\n  //do something\n}\n</code></pre>\n\n<p>Which also equal to isDefined in Angular 1.x...</p>\n\n<pre><code>function isDefined(value) {return typeof value !== 'undefined';}\n</code></pre>\n\n<p>Also other javascript frameworks like underscore has similar defining check, but I recommend you use <code>typeof</code> if you already not using any frameworks.</p>\n\n<p>I also add this section from MDN which has got useful information about typeof, undefined and void(0).</p>\n\n<blockquote>\n  <p><strong>Strict equality and undefined</strong> <br> You can use undefined and the strict equality and inequality operators to determine whether a variable has\n  a value. In the following code, the variable x is not defined, and the\n  if statement evaluates to true.</p>\n</blockquote>\n\n<pre><code>var x;\nif (x === undefined) {\n   // these statements execute\n}\nelse {\n   // these statements do not execute\n}\n</code></pre>\n\n<blockquote>\n  <p>Note: The strict equality operator rather than the standard equality\n  operator must be used here, because x == undefined also checks whether\n  x is null, while strict equality doesn't. null is not equivalent to\n  undefined. See comparison operators for details.</p>\n</blockquote>\n\n<hr>\n\n<blockquote>\n  <p><strong>Typeof operator and undefined</strong> <br>\n  Alternatively, typeof can be used:</p>\n</blockquote>\n\n<pre><code>var x;\nif (typeof x === 'undefined') {\n   // these statements execute\n}\n</code></pre>\n\n<blockquote>\n  <p>One reason to use typeof is that it does not throw an error if the\n  variable has not been declared.</p>\n</blockquote>\n\n<pre><code>// x has not been declared before\nif (typeof x === 'undefined') { // evaluates to true without errors\n   // these statements execute\n}\n\nif (x === undefined) { // throws a ReferenceError\n\n}\n</code></pre>\n\n<blockquote>\n  <p>However, this kind of technique should be avoided. JavaScript is a\n  statically scoped language, so knowing if a variable is declared can\n  be read by seeing whether it is declared in an enclosing context. The\n  only exception is the global scope, but the global scope is bound to\n  the global object, so checking the existence of a variable in the\n  global context can be done by checking the existence of a property on\n  the global object (using the in operator, for instance).</p>\n</blockquote>\n\n<hr>\n\n<blockquote>\n  <p><strong>Void operator and undefined</strong></p>\n  \n  <p>The void operator is a third alternative.</p>\n</blockquote>\n\n<pre><code>var x;\nif (x === void 0) {\n   // these statements execute\n}\n\n// y has not been declared before\nif (y === void 0) {\n   // throws a ReferenceError (in contrast to `typeof`)\n}\n</code></pre>\n\n<p>more > <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/undefined\" rel=\"nofollow noreferrer\">here</a></p>\n"},{"owner":{"reputation":24008,"user_id":99777,"user_type":"registered","accept_rate":32,"profile_image":"https://www.gravatar.com/avatar/851524689a35bd68e0ccd953997c99db?s=128&d=identicon&r=PG","display_name":"joeytwiddle","link":"https://stackoverflow.com/users/99777/joeytwiddle"},"is_accepted":false,"score":133,"last_activity_date":1568952666,"last_edit_date":1568952666,"creation_date":1399040479,"answer_id":23430396,"question_id":9329446,"content_license":"CC BY-SA 4.0","body":"<h1>Loop backwards</h1>\n\n<p>I think the <em>reverse</em> for loop deserves a mention here:</p>\n\n<pre><code>for (var i = array.length; i--; ) {\n     // process array[i]\n}\n</code></pre>\n\n<h2>Advantages:</h2>\n\n<ul>\n<li>You do not need to declare a temporary <code>len</code> variable, or compare against <code>array.length</code> on each iteration, either of which might be a minute optimisation.</li>\n<li><strong>Removing siblings</strong> from the DOM in reverse order is usually <strong>more efficient</strong>.  (The browser needs to do less shifting of elements in its internal arrays.)</li>\n<li>If you <strong>modify the array</strong> while looping, at or after index <em>i</em> (for example you remove or insert an item at <code>array[i]</code>), then a forward loop would skip the item that shifted left into position <em>i</em>, or re-process the <em>i</em>th item that was shifted right.  In a traditional for loop, you <em>could</em> update <em>i</em> to point to the next item that needs processing - 1, but simply reversing the direction of iteration is often a <strong>simpler</strong> and <a href=\"https://stackoverflow.com/questions/23186254/javascript-splice-changing-earlier-values-in-an-array/23186450#23186450\">more elegant solution</a>.</li>\n<li>Similarly, when modifying or removing <strong>nested</strong> DOM elements, processing in reverse can <strong>circumvent errors</strong>. For example, consider modifying the innerHTML of a parent node before handling its children.  By the time the child node is reached it will be detached from the DOM, having been replaced by a newly created child when the parent's innerHTML was written.</li>\n<li>It is <strong>shorter</strong> to type, and <strong>read</strong>, than some of the other options available.  Although it loses to <code>forEach()</code> and to ES6's <code>for ... of</code>.</li>\n</ul>\n\n<h2>Disadvantages:</h2>\n\n<ul>\n<li>It processes the items in reverse order.  If you were building a new array from the results, or printing things on screen, naturally <strong>the output will be reversed</strong> with respect to the original order.</li>\n<li>Repeatedly inserting siblings into the DOM as a first child in order to retain their order is <strong>less efficient</strong>.  (The browser would keep having to shift things right.)  To create DOM nodes efficiently and in order, just loop forwards and append as normal (and also use a \"document fragment\").</li>\n<li>The reverse loop is <strong>confusing</strong> to junior developers.  (You may consider that an advantage, depending on your outlook.)</li>\n</ul>\n\n<hr>\n\n<h2>Should I always use it?</h2>\n\n<p>Some developers use the reverse for loop <em>by default</em>, unless there is a good reason to loop forwards.</p>\n\n<p>Although the performance gains are usually insignificant, it sort of screams:</p>\n\n<blockquote>\n  <p>\"Just do this to every item in the list, I don't care about the order!\"</p>\n</blockquote>\n\n<p>However in practice that is <strong>not</strong> actually a reliable indication of intent, since it is indistinguishable from those occasions when you <strong><em>do</em></strong> care about the order, and really do <strong><em>need</em></strong> to loop in reverse.  So in fact another construct would be needed to accurately express the \"don't care\" intent, something currently unavailable in most languages, including ECMAScript, but which could be called, for example, <code>forEachUnordered()</code>.</p>\n\n<p>If order doesn't matter, and <strong>efficiency</strong> is a concern (in the innermost loop of a game or animation engine), then it may be acceptable to use the reverse for loop as your go-to pattern.  Just remember that seeing a reverse for loop in existing code <strong>does not necessarily mean</strong> that the order irrelevant!</p>\n\n<h3>It was better to use forEach()</h3>\n\n<p>In general for higher level code where <strong>clarity and safety</strong> are greater concerns, I previously recommended using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\" rel=\"noreferrer\"><code>Array::forEach</code></a> as your default pattern for looping (although these days I prefer to use <code>for..of</code>).  Reasons to prefer <code>forEach</code> over a reverse loop are:</p>\n\n<ul>\n<li>It is clearer to read.</li>\n<li>It indicates that <em>i</em> is not going to be shifted within the block (which is always a possible surprise hiding in long <code>for</code> and <code>while</code> loops).</li>\n<li>It gives you a free scope for closures.</li>\n<li>It reduces leakage of local variables and accidental collision with (and mutation of) outer variables.</li>\n</ul>\n\n<p>Then when you do see the reverse for loop in your code, that is a hint that it is reversed for a good reason (perhaps one of the reasons described above).  And seeing a traditional forward for loop may indicate that shifting can take place.</p>\n\n<p>(If the discussion of intent makes no sense to you, then you and your code may benefit from watching Crockford's lecture on <a href=\"https://www.youtube.com/watch?v=taaEzHI9xyY&amp;t=480\" rel=\"noreferrer\">Programming Style &amp; Your Brain</a>.)</p>\n\n<h3>It is now even better to use for..of!</h3>\n\n<p>There is a debate about whether <code>for..of</code> or <code>forEach()</code> are preferable:</p>\n\n<ul>\n<li><p>For maximum browser support, <code>for..of</code> <a href=\"https://github.com/airbnb/javascript/issues/1122#issuecomment-471169142\" rel=\"noreferrer\">requires a polyfill</a> for iterators, making your app slightly slower to execute and slightly larger to download.</p></li>\n<li><p>For that reason (and to encourage use of <code>map</code> and <code>filter</code>), <a href=\"https://github.com/airbnb/javascript#iterators-and-generators\" rel=\"noreferrer\">some front-end style guides</a> ban <code>for..of</code> completely!</p></li>\n<li><p>But the above concerns is not applicable to Node.js applications, where <code>for..of</code> is now well supported.</p></li>\n<li><p>And furthermore <code>await</code> <a href=\"https://gist.github.com/joeytwiddle/37d2085425c049629b80956d3c618971\" rel=\"noreferrer\">does not work</a> inside <code>forEach()</code>.  Using <code>for..of</code> is <a href=\"https://github.com/airbnb/javascript/issues/1122#issuecomment-259876436\" rel=\"noreferrer\">the clearest pattern</a> in this case.</p></li>\n</ul>\n\n<p>Personally, I tend to use whatever looks easiest to read, unless performance or minification has become a major concern.  So these days I prefer to use <code>for..of</code> instead of <code>forEach()</code>, but I will always use <code>map</code> or <code>filter</code> or <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find\" rel=\"noreferrer\"><code>find</code></a> or <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some\" rel=\"noreferrer\"><code>some</code></a> when applicable. \n (For the sake of my colleagues, I rarely use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\" rel=\"noreferrer\"><code>reduce</code></a>.)</p>\n\n<hr>\n\n<h2>How does it work?</h2>\n\n<pre><code>for (var i = 0; i &lt; array.length; i++) { ... }   // Forwards\n\nfor (var i = array.length; i--; )    { ... }   // Reverse\n</code></pre>\n\n<p>You will notice that <code>i--</code> is the middle clause (where we usually see a comparison) and the last clause is empty (where we usually see <code>i++</code>).  That means that <code>i--</code> is also used as the <em>condition</em> for continuation.  Crucially, it is executed and checked <em>before</em> each iteration.</p>\n\n<ul>\n<li><p><strong>How can it start at <code>array.length</code> without exploding?</strong></p>\n\n<p>Because <code>i--</code> runs <em>before</em> each iteration, on the first iteration we will actually be accessing the item at <code>array.length - 1</code> which avoids any issues with <strike>Array-out-of-bounds</strike> <code>undefined</code> items.</p></li>\n<li><p><strong>Why doesn't it stop iterating before index 0?</strong></p>\n\n<p>The loop will stop iterating when the condition <code>i--</code> evaluates to a falsey value (when it yields 0).</p>\n\n<p>The trick is that unlike <code>--i</code>, the trailing <code>i--</code> operator decrements <code>i</code> but yields the value <strong><em>before</em></strong> the decrement.  Your console can demonstrate this:</p>\n\n<p><code>&gt; var i = 5; [i, i--, i];</code></p>\n\n<p><code>[5, 5, 4]</code></p>\n\n<p>So on the final iteration, <em>i</em> was previously <strong>1</strong> and the <code>i--</code> expression changes it to <strong>0</strong> but actually yields <strong>1</strong> (truthy), and so the condition passes.  On the next iteration <code>i--</code> changes <em>i</em> to <strong>-1</strong> but yields <strong>0</strong> (falsey), causing execution to immediately drop out of the bottom of the loop.</p>\n\n<p>In the traditional forwards for loop, <code>i++</code> and <code>++i</code> are interchangeable (as Douglas Crockford points out).  However in the reverse for loop, because our decrement is also our condition expression, we must stick with <code>i--</code> if we want to process the item at index 0.</p></li>\n</ul>\n\n<hr>\n\n<h2>Trivia</h2>\n\n<p>Some people like to draw a little arrow in the reverse <code>for</code> loop, and end with a wink:</p>\n\n<pre><code>for (var i = array.length; i --&gt; 0 ;) {\n</code></pre>\n\n<hr>\n\n<p><em>Credits go to WYL for showing me the benefits and horrors of the reverse for loop.</em></p>\n"},{"owner":{"reputation":39219,"user_id":405550,"user_type":"registered","accept_rate":77,"profile_image":"https://www.gravatar.com/avatar/7bc4d5f38183597c6e47f3f6f3be2ff6?s=128&d=identicon&r=PG","display_name":"Zaz","link":"https://stackoverflow.com/users/405550/zaz"},"is_accepted":false,"score":33,"last_activity_date":1568265127,"last_edit_date":1568265127,"creation_date":1464279284,"answer_id":37466121,"question_id":9329446,"content_license":"CC BY-SA 4.0","body":"<p><strong>As of ECMAScript&nbsp;6:</strong></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>list = [0, 1, 2, 3]\r\nfor (let obj of list) {\r\n    console.log(obj)\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Where <code>of</code> avoids the oddities associated with <code>in</code> and makes it work like the <code>for</code> loop of any other language, and <code>let</code> binds <code>i</code> within the loop as opposed to within the function.</p>\n\n<p>The braces (<code>{}</code>) can be omitted when there is only one command (e.g. in the example above).</p>\n"},{"owner":{"reputation":1305,"user_id":2902161,"user_type":"registered","accept_rate":50,"profile_image":"https://graph.facebook.com/1261558429/picture?type=large","display_name":"Ante Jablan Adamović","link":"https://stackoverflow.com/users/2902161/ante-jablan-adamovi%c4%87"},"is_accepted":false,"score":8,"last_activity_date":1567619463,"last_edit_date":1567619463,"creation_date":1510241504,"answer_id":47205719,"question_id":9329446,"content_license":"CC BY-SA 4.0","body":"<p>A way closest to your idea would be to use <code>Array.forEach()</code> which accepts a closure function which will be executed for each element of the array.</p>\n\n<pre><code>myArray.forEach(\n  (item) =&gt; {\n    // Do something\n    console.log(item);\n  }\n);\n</code></pre>\n\n<p>Another viable way would be to use <code>Array.map()</code> which works in the same way, but it also takes all values that you return and returns them in a new array (essentially mapping each element to a new one), like this:</p>\n\n<pre><code>var myArray = [1, 2, 3];\nmyArray = myArray.map(\n  (item) =&gt; {\n    return item + 1;\n  }\n);\n\nconsole.log(myArray); // [2, 3, 4]\n</code></pre>\n"},{"owner":{"reputation":2832,"user_id":1106366,"user_type":"registered","accept_rate":88,"profile_image":"https://i.stack.imgur.com/kycba.jpg?s=128&g=1","display_name":"Anil Kumar Arya","link":"https://stackoverflow.com/users/1106366/anil-kumar-arya"},"is_accepted":false,"score":21,"last_activity_date":1567544131,"last_edit_date":1567544131,"creation_date":1491756711,"answer_id":43309349,"question_id":9329446,"content_license":"CC BY-SA 4.0","body":"<p>ECMAScript&nbsp;5 (the version on JavaScript) to work with Arrays:</p>\n\n<p><strong>forEach</strong> - Iterates through every item in the array and do whatever you need with each item.</p>\n\n<pre><code>['C', 'D', 'E'].forEach(function(element, index) {\n  console.log(element + \" is #\" + (index+1) + \" in the musical scale\");\n});\n\n// Output\n// C is the #1 in musical scale\n// D is the #2 in musical scale\n// E is the #3 in musical scale\n</code></pre>\n\n<p>In case, more interested on operation on array using some inbuilt feature.</p>\n\n<p><strong>map</strong> - It creates a new array with the result of the callback function. This method is good to be used when you need to format the elements of your array.</p>\n\n<pre><code>// Let's upper case the items in the array\n['bob', 'joe', 'jen'].map(function(elem) {\n  return elem.toUpperCase();\n});\n\n// Output: ['BOB', 'JOE', 'JEN']\n</code></pre>\n\n<p><strong>reduce</strong> - As the name says, it reduces the array to a single value by calling the given function passing in the current element and the result of the previous execution.</p>\n\n<pre><code>[1,2,3,4].reduce(function(previous, current) {\n  return previous + current;\n});\n// Output: 10\n// 1st iteration: previous=1, current=2 =&gt; result=3\n// 2nd iteration: previous=3, current=3 =&gt; result=6\n// 3rd iteration: previous=6, current=4 =&gt; result=10\n</code></pre>\n\n<p><strong>every</strong> - Returns true or false if all the elements in the array pass the test in the callback function.</p>\n\n<pre><code>// Check if everybody has 18 years old of more.\nvar ages = [30, 43, 18, 5];\nages.every(function(elem) {\n  return elem &gt;= 18;\n});\n\n// Output: false\n</code></pre>\n\n<p><strong>filter</strong> - Very similar to every except that filter returns an array with the elements that return true to the given function.</p>\n\n<pre><code>// Finding the even numbers\n[1,2,3,4,5,6].filter(function(elem){\n  return (elem % 2 == 0)\n});\n\n// Output: [2,4,6]\n</code></pre>\n"},{"owner":{"reputation":131,"user_id":1689520,"user_type":"registered","profile_image":"https://lh5.googleusercontent.com/-ex9D1htvZJY/AAAAAAAAAAI/AAAAAAAAANo/D6onMznsEQw/photo.jpg?sz=128","display_name":"Murtuza Husain","link":"https://stackoverflow.com/users/1689520/murtuza-husain"},"is_accepted":false,"score":7,"last_activity_date":1567543006,"last_edit_date":1567543006,"creation_date":1510380987,"answer_id":47234998,"question_id":9329446,"content_license":"CC BY-SA 4.0","body":"<p>The lambda syntax doesn't usually work in Internet&nbsp;Explorer&nbsp;10  or below.</p>\n\n<p>I usually use the</p>\n\n<pre><code>[].forEach.call(arrayName,function(value,index){\n    console.log(\"value of the looped element\" + value);\n    console.log(\"index of the looped element\" + index);\n});\n</code></pre>\n\n<p>If you are a jQuery <em>fan</em> and already have a jQuery file running, you should reverse the positions of the index and value parameters</p>\n\n<pre><code>$(\"#ul&gt;li\").each(function(**index, value**){\n    console.log(\"value of the looped element\" + value);\n    console.log(\"index of the looped element\" + index);\n});\n</code></pre>\n"},{"owner":{"reputation":2317,"user_id":2076949,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/820f081690c4d46479e003ec9b5f8b09?s=128&d=identicon&r=PG","display_name":"darklightcode","link":"https://stackoverflow.com/users/2076949/darklightcode"},"is_accepted":false,"score":10,"last_activity_date":1567542060,"last_edit_date":1592644375,"creation_date":1539116392,"answer_id":52728745,"question_id":9329446,"content_license":"CC BY-SA 4.0","body":"<p><strong>Using loops with ECMAScript 6  <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\" rel=\"noreferrer\">destructuring</a> and the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\" rel=\"noreferrer\">spread operator</a></strong></p>\n<p>Destructuring and using of the spread operator have proven quite useful for newcomers to ECMAScript 6 as being more human-readable/aesthetic, although some JavaScript veterans might consider it messy. Juniors or some other people might find it useful.</p>\n<blockquote>\n<p>The following examples will use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of\" rel=\"noreferrer\"><code>for...of</code></a> statement and the <a href=\"https://developer.mozilla.org/ro/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\" rel=\"noreferrer\"><code>.forEach</code></a> method.</p>\n<p><strong>Examples 6, 7, and 8</strong> can be used with any functional loops like <code>.map</code>, <code>.filter</code>, <code>.reduce</code>, <code>.sort</code>, <code>.every</code>, <code>.some</code>. For more information about these methods, check out the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" rel=\"noreferrer\">Array Object</a>.</p>\n</blockquote>\n<p><strong>Example 1:</strong> Normal <code>for...of</code> loop - no tricks here.</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>let arrSimple = ['a', 'b', 'c'];\n\nfor (let letter of arrSimple) {\n  console.log(letter);\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p><strong>Example 2:</strong> Split words to characters</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>let arrFruits = ['apple', 'orange', 'banana'];\n\nfor (let [firstLetter, ...restOfTheWord] of arrFruits) {\n  // Create a shallow copy using the spread operator\n  let [lastLetter] = [...restOfTheWord].reverse();\n  console.log(firstLetter, lastLetter, restOfTheWord);\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p><strong>Example 3:</strong> Looping with a <code>key</code> and <code>value</code></p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>// let arrSimple = ['a', 'b', 'c'];\n\n// Instead of keeping an index in `i` as per example `for(let i = 0 ; i&lt;arrSimple.length;i++)`\n// this example will use a multi-dimensional array of the following format type:\n// `arrWithIndex: [number, string][]`\n\nlet arrWithIndex = [\n  [0, 'a'],\n  [1, 'b'],\n  [2, 'c'],\n];\n\n// Same thing can be achieved using `.map` method\n// let arrWithIndex = arrSimple.map((i, idx) =&gt; [idx, i]);\n\n// Same thing can be achieved using `Object.entries`\n// NOTE: `Object.entries` method doesn't work on Internet Explorer  unless it's polyfilled\n// let arrWithIndex = Object.entries(arrSimple);\n\nfor (let [key, value] of arrWithIndex) {\n  console.log(key, value);\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p><strong>Example 4:</strong> Get object properties inline</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>let arrWithObjects = [{\n    name: 'Jon',\n    age: 32\n  },\n  {\n    name: 'Elise',\n    age: 33\n  }\n];\n\nfor (let { name, age: aliasForAge } of arrWithObjects) {\n  console.log(name, aliasForAge);\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p><strong>Example 5:</strong> Get deep object properties of what you need</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>let arrWithObjectsWithArr = [{\n    name: 'Jon',\n    age: 32,\n    tags: ['driver', 'chef', 'jogger']\n  },\n  {\n    name: 'Elise',\n    age: 33,\n    tags: ['best chef', 'singer', 'dancer']\n  }\n];\n\nfor (let { name, tags: [firstItemFromTags, ...restOfTags] } of arrWithObjectsWithArr) {\n  console.log(name, firstItemFromTags, restOfTags);\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p><strong>Example 6:</strong> Is <strong>Example 3</strong> used with <code>.forEach</code></p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>let arrWithIndex = [\n  [0, 'a'],\n  [1, 'b'],\n  [2, 'c'],\n];\n\n// Not to be confused here, `forEachIndex` is the real index\n// `mappedIndex` was created by \"another user\", so you can't really trust it\n\narrWithIndex.forEach(([mappedIndex, item], forEachIndex) =&gt; {\n  console.log(forEachIndex, mappedIndex, item);\n});</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p><strong>Example 7:</strong> Is <strong>Example 4</strong> used with <code>.forEach</code></p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>let arrWithObjects = [{\n    name: 'Jon',\n    age: 32\n  },\n  {\n    name: 'Elise',\n    age: 33\n  }\n];\n// NOTE: Destructuring objects while using shorthand functions\n// are required to be surrounded by parentheses\narrWithObjects.forEach( ({ name, age: aliasForAge }) =&gt; {\n  console.log(name, aliasForAge)\n});</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p><strong>Example 8:</strong> Is <strong>Example 5</strong> used with <code>.forEach</code></p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>let arrWithObjectsWithArr = [{\n    name: 'Jon',\n    age: 32,\n    tags: ['driver', 'chef', 'jogger']\n  },\n  {\n    name: 'Elise',\n    age: 33,\n    tags: ['best chef', 'singer', 'dancer']\n  }\n];\n\narrWithObjectsWithArr.forEach(({\n  name,\n  tags: [firstItemFromTags, ...restOfTags]\n}) =&gt; {\n  console.log(name, firstItemFromTags, restOfTags);\n});</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"}],"has_more":true,"quota_max":300,"quota_remaining":278}
